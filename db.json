{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/tags/index.md","hash":"4d82a2b5acf69e026b1190b0bd144baad9292ef8","modified":1611223670310},{"_id":"source/_posts/ChromeExtensions.md","hash":"089c6a7ba23b3de6880ca0486c27ffe342e2ff10","modified":1625133513359},{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1611218978587},{"_id":"source/_posts/ChromeExtensions/Untitled 1.png","hash":"c366ae062231cb684c7fed69954cffb33c8eb1d3","modified":1625083224000},{"_id":"source/_posts/ChromeExtensions/Untitled 3.png","hash":"b04a3c1f343a20a22a27b300e3fd93f8594404d8","modified":1625083224000},{"_id":"source/_posts/ChromeExtensions/Untitled 2.png","hash":"1e9ac08f78fbade17df618cbe226ac77b939dc6e","modified":1625083224000},{"_id":"source/_posts/ChromeExtensions/Untitled 4.png","hash":"c626aedfe29b7a78b391bc7195af6e992f7eb2e5","modified":1625083224000},{"_id":"themes/butterfly/_config.yml","hash":"c343377dd00f811305ef871d8846a45748c98dbc","modified":1625195474075},{"_id":"themes/butterfly/package.json","hash":"470a7d4685f1b82d79d29a59479e84e0e5727731","modified":1624257316803},{"_id":"themes/butterfly/languages/default.yml","hash":"b9dbdb20bd1f1c7ca8a8f38635bdc4ed8bb1d44c","modified":1624257316735},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"46685048a05b419ed9c72cf31bd6e5efef7524f2","modified":1624257316736},{"_id":"themes/butterfly/languages/en.yml","hash":"fd1c1211c8f166d089a7697872185a81182d92e1","modified":1625135968514},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"736bec8eeb3a29d0d43669d81f1fa686e02be18e","modified":1624257316736},{"_id":"themes/butterfly/layout/category.pug","hash":"5ac3cd8172088843cec03175c612a9c85f49cf2e","modified":1624257316738},{"_id":"themes/butterfly/layout/archive.pug","hash":"2d5bf4b1755f89898c579c18d601be83d2bc8ebd","modified":1624257316737},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1624257316801},{"_id":"themes/butterfly/layout/page.pug","hash":"cae76ce64c114fd192b5da5a7d14aa0240df2f06","modified":1624257316801},{"_id":"themes/butterfly/layout/post.pug","hash":"8f2f13c9ae099dd83827ce3dbac5abc8d7d5bde3","modified":1624257316802},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1624257316802},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"2cf69f5c908c74eace3c168b920de09dfadd6b85","modified":1624257316738},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1624257316739},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"a1ca58fdff74b890cade94479f8f0eb9ce7e5e73","modified":1624257316739},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"bff5ed7e56cce3cd540da40d971393fe7e93085c","modified":1624257316740},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"f2e1d8a05d2e409c4804f67a98f5f59f527d6627","modified":1624257316751},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"bb1847f45e713cc88b1c0a97035ec01f0209c995","modified":1624257316756},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"2d62f88f049c907ee2e63ba275b398e87bee98eb","modified":1624257316758},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"66b14189a1913119ff5927c0b933b5c73fb37f48","modified":1624257316757},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1624257316804},{"_id":"themes/butterfly/scripts/events/init.js","hash":"5803aa55d9c21e51ea64c1ae50c9b602979aaee2","modified":1624257316805},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"1e1da036fae593be7e2cc502f0a5cbeb2e7881d1","modified":1624257316805},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"98ef86305b8d2ad9dbab969715e1ac93b407f036","modified":1624257316806},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"bd29f20fad3d3fab600940e7a6dc9a803943cb33","modified":1624257316806},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1624257316807},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1624257316808},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"87cefb7d6235744a2448e70df9061c1700169ad6","modified":1624257316809},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"7dd77f751f5cc8c4fe30475a52df632dd85ce49a","modified":1624257316811},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"51112d3db07f87034422ff4acc69ca2eb4215b4e","modified":1624257316812},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"8cb7ef368cc2ac7f4a13c2959908b1574e572acf","modified":1624257316813},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"eb019da8c190923e759d2fd7cb846281eef8594e","modified":1624257316814},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"7ffbe625f184116e442648c8416ea58614a1cef8","modified":1624257316814},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1624257316815},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1624257316815},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"829229b0074b332ba779e159219eb2466612ff6e","modified":1624257316816},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"420ba8b11e7316b4c09eb301d39814bc9bae9f90","modified":1624257316816},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1624257316817},{"_id":"themes/butterfly/source/css/var.styl","hash":"31198af95fecc6819d3b2cb7ef03988ef67257da","modified":1624257316855},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1624257316732},{"_id":"themes/butterfly/source/css/index.styl","hash":"c7924868adcb046b46498626a9223c7a7b3f2e30","modified":1624257316854},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1624257316857},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1624257316857},{"_id":"themes/butterfly/README.md","hash":"0f0eaee9c30ef1e9aed588fbb3e8263401348b55","modified":1624257316733},{"_id":"themes/butterfly/README_CN.md","hash":"70ec43a8aa0776b5a0a2a6b6009dd253fa3679eb","modified":1624257316733},{"_id":"themes/butterfly/source/js/main.js","hash":"e16689382fc3b4ea20b13f0230a36e21bec63092","modified":1624257316863},{"_id":"themes/butterfly/source/js/utils.js","hash":"ba7e672a7bed2aefb9174e8122d92a643814272a","modified":1624257316866},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"07380718ed3af19a7e64b30e8c13726fe5983947","modified":1624257316741},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"3ca9d9cdfd6e61df1d5b07de40f34349cda7a7c7","modified":1624257316743},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"903d12250ce70713dd5b8ac7e1f7a20fe15eb815","modified":1624257316742},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1624257316745},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"73c04d62055840545112dd12d73807835ca62347","modified":1624257316744},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1624257316745},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"d6556d5396eb0e10ea0ec10158779c21dc78f738","modified":1624257316746},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1624257316746},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"d5747ccfba4861567375d2c7aa0ec6a846a57594","modified":1624257316748},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"419807903e5586b8804b1f8f17cea97bd05f0b17","modified":1624257316749},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"4d52000cae1fce333329c382dac6c9a21ad0b195","modified":1624257316749},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"7677911bd3f43edaf8230eea02f60a248eee9934","modified":1624257316750},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1624257316750},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1624257316747},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"2e1ab0c2ca59a1ff5a5ba9b6ef60f3e34af5430c","modified":1624257316752},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"dd8e6813976be64e80eba6562b54e74527ab306d","modified":1624257316752},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"971038debf539333b1687b4a1d87cf4fc965a846","modified":1624257316753},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"95924d28d71b28769963529f82b376a9dc731fad","modified":1624257316754},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"dcccb1425fabcf12a1bed955518b0e7b1054cab0","modified":1624257316753},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"f5ea1e10a169aeb98e42b19ac084c4eb27693b46","modified":1624257316755},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"3e9c45aa4e97650bb8c19fe7c6c0e096a826f95d","modified":1624257316755},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"62dc2e683d56ddc9b588abc44dc1cfb778a2c68f","modified":1624257316755},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"6ec54b77e3a90e148e66e317e5bb6c89624fddca","modified":1624257316757},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"c762732e200ff2627bc046af5f170b3269343341","modified":1624257316757},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"bee06b3f01fa1f0d8fa08c154234b452da425101","modified":1624257316761},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4c3da5a89b4e6fd3ab527f5c6d27790359d57f71","modified":1624257316781},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"d06dafe7faf3a2e328ef62f26166a51ffe7a5579","modified":1624257316788},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"897fe61982d503f285028e52de51ab3af8eb9485","modified":1624257316788},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"2448b243ded58aa1d5fc22fd115e6d06b636f9fd","modified":1624257316789},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"4a2ea9fe59f1dc8cb4f4f6a28cf24a40fc300254","modified":1624257316794},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1624257316795},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"009bdbef23381f10664622fafdc602f2ff5bf1ec","modified":1624257316796},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"67cad32f84414c7b10195d64376c140b878c4ebe","modified":1624257316797},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1624257316796},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1624257316797},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"cabf9ee6a2886e6ede17f224dfbb161a9b1258e7","modified":1624257316798},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"0b5c165664f9f8691551fc5ff435b40e7f73c737","modified":1624257316798},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"471b20e71a19db1f5115727082e5188200c49383","modified":1624257316799},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"9755cac8424dc578e9ec07dbcaa429fddbedd392","modified":1624257316799},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"62adef7998fb9bebc5891a49472cfea944a1bf7a","modified":1624257316800},{"_id":"themes/butterfly/layout/includes/widget/card_self.pug","hash":"8318c7c9a6aef966afba44e283111e7ff0b2f04f","modified":1624257316799},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"8c5b241773597a412dbf3ebaca1f0bf504934a33","modified":1624257316800},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f9de9db2a49ac4d5447660ab159171ac5c228e3c","modified":1624257316818},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"fe1942d3924d557497e37bcf2d1887483e98bedb","modified":1624257316819},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3f0b8699f529f0842c3b101006f60cb7933c16ff","modified":1624257316824},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"a0e5790eb82b8f551f4161b72f1bec29a4e501be","modified":1624257316820},{"_id":"themes/butterfly/source/css/_layout/404.styl","hash":"7730741fa8beb29e3231d397171f312957563e7b","modified":1624257316825},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"8627055bae0f877482dc53325152beb0a68d8e17","modified":1624257316826},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"8e6c9a2c1881985e4b2ae14ef1bdfdbb1bc83b37","modified":1624257316828},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f27ad7b5d781c98bcac5c12c2d70b69b830e0374","modified":1624257316827},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"bfc4b9d8df66593c11c9ae78899f54e69785ca90","modified":1624257316828},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"f4cba3170834e8caf736bb4f00cba4041495f5e9","modified":1625136817146},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"807f18717c29b5c41de6fc600a69a80ce8b7a19c","modified":1624257316829},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"db7fe645662d87be4f8dfc08e55bbe1a3734bf93","modified":1624257316830},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"814729d1d71f4326623a4f34b621bf0421503103","modified":1624257316831},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"8c4e08c8a63dacdfb2a733a0d0035fa97c7f5e9e","modified":1624257316831},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"4ae98e703440b616d2a36da139bda844c94d425e","modified":1624257316831},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"a00ad74074513a1c7f6e02977b8fa778beaa2108","modified":1624257316832},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"78ef182c0f6711c8491a8ee421b708c8f2a63c30","modified":1624257316833},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"257f08063d056bcc9fe385d7913df19b6503d93d","modified":1624257316833},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"ca1d3a885a85a91fcd6f7b55fca96cafb6a1b0a3","modified":1624257316836},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"190b85de3e686393e45869d12464995f23b304dc","modified":1624257316835},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"ab403bfb1abc12ea5015b123ce412d3177e638d9","modified":1624257316836},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"05269a522a7248d9a77569331481cbe18033c774","modified":1624257316837},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"0da09b1811a776106ca66c56be6e2a396dca5680","modified":1624257316837},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"26e26797b3175498e20b2a8bf1679d3ed9fac5a6","modified":1624257316838},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"8489722684aa9b4baa38386f4d4b39f4dbd60113","modified":1624257316834},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"89a6cb63a97cc08675319c403e4a89391f6ab401","modified":1624257316834},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"a470029a157fbb8406ff72322a75ef63d6675431","modified":1624257316840},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1624257316856},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"202b01db6ef3cca9e5a173e1a0dadfee8854a849","modified":1624257316840},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"6c12a03e26ca5d538537d472657d3d03a7fcbb87","modified":1624257316843},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"c3369a14f4111c098d0177036ca57df6deb59d72","modified":1624257316842},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"aa0728c556af75f5d66ecd44fa207722d474c26d","modified":1624257316848},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"56691537c7f06c2cf1ffa1509a328f506d938ee8","modified":1624257316850},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1624257316851},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"c91609b7f431cacecc3718ae2fb7403c55f8267a","modified":1624257316851},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"75a5c15c7029197ec5cffd27f7c5455891c946c9","modified":1624257316852},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1624257316854},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"8520674768dd0b1837f947892e8402b192a4f9c1","modified":1624257316853},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"a19f12257b14f70806a0c3cb0e9df1090f36e919","modified":1624257316864},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1624257316861},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1624257316767},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"4eebb2d94ca75809ef0cf32d70f13e9bf1e87091","modified":1624257316768},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"a18415004d03c0a1783eccac522fbcb6ce0ea1f1","modified":1624257316769},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"896dc0b7480151562c5717771e3000c5a7fc1b16","modified":1624257316770},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"eb2d840fa42de3ec7a7fda0eaa30246d52f543e2","modified":1624257316769},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"a17f9a832f299d3e43c5eb757d99d34fec1ac932","modified":1624257316770},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1624257316771},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"92aa84cdec97729c86ba4674a355496eb37c986a","modified":1624257316841},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1624257316771},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1624257316772},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1624257316772},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"4db1170be7a9360e2c5399d281b979da730df2a3","modified":1624257316865},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"bb467bb22f3d0775b33f9eacbfc086ecb7831e78","modified":1624257316773},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1624257316773},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"d5f81fd5443a1b09efb165b5f4447a35949d14ad","modified":1624257316774},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"03a8937c60403252d33bacea947e252e5007eac8","modified":1624257316775},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"50126b2e841b01584b8b65b2f834038e3997b694","modified":1624257316774},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0254203aae73e70b90dfce6ec4f9c9d3be9ac9f8","modified":1624257316777},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"d97403cdd58c759cfd1752dd85aa4a0f9b73dc46","modified":1624257316777},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"e877c98949873a62659db7501d19eb3d66650b51","modified":1624257316778},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1624257316779},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"afffc4ac8ce93d39dcc892bd518805cf33531244","modified":1624257316779},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"1c7e9fe86b7d7ef18cc876dfce19263fd4e73066","modified":1624257316780},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"8290994cf1ee2faff60214ff245cf513fbbe94aa","modified":1624257316780},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1624257316782},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"1fb4bbbe1def54f179173ec7e62b66dc4a49c843","modified":1624257316781},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"407d88e4af099d5f1a3f44623ec276c999219ec3","modified":1624257316782},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"3234942decaa1fde5b872766d4943a2e8cb9ef72","modified":1624257316865},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"6f92311afe60ca5f44055016db9cecce8fb2dc62","modified":1624257316783},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"faf1113de12d6db0486572d7e99b03cbd0c4a896","modified":1624257316783},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"7935e92db64ca047d94404e5fc390a207e857a87","modified":1624257316785},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"70125dc478ae20d5f6b4b908260fdc451d803c6c","modified":1624257316785},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"767c38e3dfa0097b0dc1fdfd0df292c16f757d05","modified":1624257316786},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"a3d43cc360666b5b9730e8bb9e5c8fd940ae5b3d","modified":1624257316787},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"35278cfc2dbd92457b1e558b20fcd994eb81259c","modified":1624257316785},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"fe7468c1316583ac368d96d6a6095d1a01fe4f18","modified":1624257316787},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"fbcf94ecdca30bed7cfc4f4ec08b200579c2614e","modified":1624257316791},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"1c06e60b120c946c1856904848ceba6ab58d1f82","modified":1624257316790},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"ff3727c3ec698ec61a28c55cbc8c8508f0efb0a0","modified":1624257316790},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"fbac21a6c5924fb2f8d1190fd634105fdbc603d4","modified":1624257316793},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1624257316792},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1624257316793},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"7e9a7347dd8ca4c33c564fb62512743b6012bb2d","modified":1624257316794},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"b0916c8c7d15b67b55cb1618be8370870fedbf42","modified":1624257316821},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"b74c61f6e15b422e9d2df23133552bbd1b5fe513","modified":1624257316821},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1624257316823},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1624257316822},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"4d71aab9082c67d3ee52ad58dfc3c1c9b41f2ab1","modified":1624257316822},{"_id":"source/_posts/ChromeExtensions/Untitled.png","hash":"128948df5d378b3d2d7ed68a7150620bb66cc4b1","modified":1625083224000},{"_id":"public/tags/index.html","hash":"660c67584ff9d35390baf68c6d3d8940f2c83612","modified":1625195478732},{"_id":"public/2021/07/01/ChromeExtensions/index.html","hash":"9aa124edd93aba3d6163d508e1ac701808a9c6a5","modified":1625195478732},{"_id":"public/2021/01/21/hello-world/index.html","hash":"490cb4abb8ec173e30eb010a3feea668acadbbff","modified":1625195478732},{"_id":"public/archives/index.html","hash":"884df43884b2ed4b66095127430b683beed0391c","modified":1625195478732},{"_id":"public/archives/2021/index.html","hash":"74a71efa1b277cdefd7cac553efe66a0f5e6025c","modified":1625195478732},{"_id":"public/archives/2021/01/index.html","hash":"476a27b8b3e3e1d902f6c595caa71b0e6307579b","modified":1625195478732},{"_id":"public/archives/2021/07/index.html","hash":"bf010a7a6f3e98a71e7c053d6b2d49662e981de8","modified":1625195478732},{"_id":"public/categories/浏览器插件/index.html","hash":"14330c4c37fdb87d0db8641594bb8aba3f9e55b8","modified":1625195478732},{"_id":"public/index.html","hash":"bf58d29afc0ed664a7e201b4c0192dd3ab3e23df","modified":1625195478732},{"_id":"public/tags/Chrome-Extensions/index.html","hash":"6b7b4545ac2883818d8964b0e9c722666532841c","modified":1625195478732},{"_id":"public/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1625194873266},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1625194873266},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1625194873266},{"_id":"public/2021/07/01/ChromeExtensions/Untitled 1.png","hash":"c366ae062231cb684c7fed69954cffb33c8eb1d3","modified":1625194873266},{"_id":"public/2021/07/01/ChromeExtensions/Untitled 3.png","hash":"b04a3c1f343a20a22a27b300e3fd93f8594404d8","modified":1625194873266},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"284416885e4e80e27fa4eae6fc305f4de15b914c","modified":1625194873266},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1625194873266},{"_id":"public/2021/07/01/ChromeExtensions/Untitled 2.png","hash":"1e9ac08f78fbade17df618cbe226ac77b939dc6e","modified":1625194873266},{"_id":"public/2021/07/01/ChromeExtensions/Untitled 4.png","hash":"c626aedfe29b7a78b391bc7195af6e992f7eb2e5","modified":1625194873266},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"e56ad6b82caf69066de545201014291fc961635e","modified":1625194873266},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"a3b131a9a47ccc16f4dd8988fabb6d306548db2f","modified":1625194873266},{"_id":"public/css/index.css","hash":"f883b67afd4511cc00e230bfd6ac9ec5bbad19de","modified":1625194873266},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1625194873266},{"_id":"public/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1625194873266},{"_id":"public/js/utils.js","hash":"41481019ef510c74e744f4f7ec4d0a13b5ccc04c","modified":1625194873266},{"_id":"public/js/search/local-search.js","hash":"459e2541afda483916d16fce4aaa56b41bcd42ba","modified":1625194873266},{"_id":"public/js/main.js","hash":"229c8abda75ab80b47e234ab7b81dca7d655441f","modified":1625194873266},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1625194873266},{"_id":"public/assets/algolia/algoliasearch.js","hash":"6948fcdf071e4983e784e8c458cf201536f77792","modified":1625194873266},{"_id":"public/2021/07/01/ChromeExtensions/Untitled.png","hash":"128948df5d378b3d2d7ed68a7150620bb66cc4b1","modified":1625194873266}],"Category":[{"name":"浏览器插件","_id":"ckqlr2i0q0003g8upallkctlo"}],"Data":[],"Page":[{"title":"tags","date":"2021-01-21T10:07:05.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-01-21 18:07:05\ntype: \"tags\"\n---\n","updated":"2021-01-21T10:07:50.310Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckqlr2i0a0000g8up0wif6poe","content":"","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/butterfly_cdn@2.1.0/top_img/archive.jpg","excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-01-21T08:49:38.587Z","updated":"2021-01-21T08:49:38.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqlr2i0g0001g8up6l2i0sp0","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/butterfly_cdn@2.1.0/top_img/archive.jpg","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Chrome Extensions","comments":1,"thumbnail":"https://img0.baidu.com/it/u=1754948549,4053210497&fm=26&fmt=auto&gp=0.jpg","banner":"https://img0.baidu.com/it/u=1754948549,4053210497&fm=26&fmt=auto&gp=0.jpg","cover":"https://img0.baidu.com/it/u=1754948549,4053210497&fm=26&fmt=auto&gp=0.jpg","_content":"\n# 1. 概览:\n\n![Untitled.png](Untitled.png)\n\n# 2. **入门**\n\n首先我们看看的浏览器插件的定义:\n\n浏览器插件是基于Web技术（例如HTML，JavaScript和CSS）构建的可以定制浏览体验的小型软件程序。它们使用户可以根据个人需要或偏好来定制Chrome功能和行为。\n\n要想开发一款浏览器插件,我们只需要有一个manifest.json文件即可, 为了快速上手浏览器插件开发,我们需要把浏览器开发者工具打开, 具体步骤如下:\n\n1. **在谷歌浏览器中输入chrome://extensions/**\n2. **将开发者模式启动**\n\n![https://pic3.zhimg.com/80/v2-a557be3300d7012d25f89d00038b7e22_720w.jpg](https://pic3.zhimg.com/80/v2-a557be3300d7012d25f89d00038b7e22_720w.jpg)\n\n## 2.1 **导入自己的浏览器插件包**\n\n通过以上三个步骤我们就可以开启浏览器插件开发之旅了.浏览器插件一般放在浏览器地址栏右侧,我们可以在manifest.json文件配置插件的icon,并配置一定的规则,就能看到我们的浏览器插件图标了,如下图:\n\n![https://pic4.zhimg.com/80/v2-023f0963017950f69fee85bfaf35bd3b_720w.jpg](https://pic4.zhimg.com/80/v2-023f0963017950f69fee85bfaf35bd3b_720w.jpg)\n\n下面我们来具体讲解一下浏览器插件开发的核心概念.\n\n## 2.2 **核心知识点**\n\n浏览器插件一般涉及以下几个核心文件:\n\n- **manifest.json** 用来配置所有和插件相关的配置(必须放在根目录)\n- **background.js** 后台脚本(后台页面),生命周期和浏览器一致,一般放置全局代码\n- **content-scripts** 插件向页面注入脚本的一种形式,我们可以通过content-scripts向页面注入js和css资源,并可控制允许注入的范围\n- **popup** 点击插件图标后打开的自定义窗口, 用来处理用户交互\n\n笔者画了一张简图来大致表示一下它们之间的关系:\n\n![https://pic4.zhimg.com/80/v2-bcebb2fc6d562fefac9de971f6e0ee9f_720w.jpg](https://pic4.zhimg.com/80/v2-bcebb2fc6d562fefac9de971f6e0ee9f_720w.jpg)\n\n接下来我们来具体了解一下一上几个核心知识点.\n\n### 2**.2.1 manifest.json**\n\n谷歌官网简单的配置,如下:\n\n```docker\n{\n    \"name\": \"My Extension\",\n    \"version\": \"2.1\",\n    \"description\": \"Gets information from Google.\",\n    \"icons\": {\n      \"128\": \"icon_16.png\",\n      \"128\": \"icon_32.png\",\n      \"128\": \"icon_48.png\",\n      \"128\": \"icon_128.png\"\n    },\n    \"background\": {\n      \"persistent\": false,\n      \"scripts\": [\"background_script.js\"]\n    },\n    \"permissions\": [\"https://*.google.com/\", \"activeTab\"],\n    \"browser_action\": {\n      \"default_icon\": \"icon_16.png\",\n      \"default_popup\": \"popup.html\"\n    }\n }\n```\n\n各字段含义介绍如下:\n\n- **name** 浏览器插件名称, 将会在插件列表中显示\n- **description** 浏览器插件简介, 方便告诉开发者插件的功能和作用, 将会在插件列表中显示\n- **version** 浏览器插件版本\n- **icon** 浏览器插件图标\n\n![Untitled%201.png](Untitled%201.png)\n\n- **background** 背景页的脚本路径,一般为插件目录的相对地址\n- **permissions** 允许使用的浏览器API的权限,比如contextMenus(右键菜单), tabs(操作标签), webRequest(使用web请求), storage(允许使用本地存储), “**http://**”(可以通过executeScript或者insertCSS访问的网站)\n- **browser_action** 浏览器右上角图标设置(包括popup页面, 鼠标悬停时的标题, icon等)\n- **content_scripts** 需要直接注入页面的javascript脚本\n- **web_accessible_resources** 普通页面能够直接访问的插件资源列表，如果不设置是无法直接访问的\n- **chrome_url_overrides** 覆盖浏览器默认页面(经常用来做浏览器的自定义桌面)\n- **omnibox** 向地址栏注册一个关键字以提供搜索建议，只能设置一个关键字(多用于自定义搜索拦截)\n- **default_locale** 默认语言(比如\"zh_CN\")\n\n### 2**.2.2 background.js**\n\nbackground页面主要用来提供一些全局配置, 事件监听, 业务转发等.举几个常用案例:\n\n**1.定义右键菜单**\n\n```docker\n// background.js\nconst systems = {\n  a: '趣谈前端',\n  b: '掘金',\n  c: '微信'\n}\n\nchrome.runtime.onInstalled.addListener(function() {\n  // 上下文菜单\n  for (let key of Object.keys(systems)) {\n    chrome.contextMenus.create({\n      id: key,\n      title: systems[key],\n      type: 'normal',\n      contexts: ['selection'],\n    });\n  }\n});\n\n// manifest.json\n{\n    \"permissions\": [\"contextMenus\"]\n}\n```\n\n效果如下:\n\n![Untitled%202.png](Untitled%202.png)\n\n**2.设置只有.com后缀的页面才会激活插件**\n\n```docker\nchrome.runtime.onInstalled.addListener(function() {\n  // 类似于什么时候激活浏览器插件图标这种感觉\n  chrome.declarativeContent.onPageChanged.removeRules(undefined, function() {\n    chrome.declarativeContent.onPageChanged.addRules([{\n      conditions: [new chrome.declarativeContent.PageStateMatcher({\n        pageUrl: {hostSuffix: '.com'},\n      })\n      ],\n      actions: [new chrome.declarativeContent.ShowPageAction()]\n    }]);\n  });\n});\n```\n\n如下图所示,当页面地址的后缀不等于.com时,插件icon将不被激活:\n\n![https://pic3.zhimg.com/80/v2-e71bb0259baff0138a3ed613d3636342_720w.jpg](https://pic3.zhimg.com/80/v2-e71bb0259baff0138a3ed613d3636342_720w.jpg)\n\n**3.和content_script或者popup页面进行消息通信**\n\n```docker\nchrome.runtime.onMessage.addListener(\n\tfunction(request, sender, sendResponse) {\n\t  console.log(sender.tab ?\n\t              \"from a content script:\" + sender.tab.url :\n\t              \"from the extension\");\n\t  if (request.greeting == \"hello\")\n\t    sendResponse({farewell: \"goodbye\"});\n\t});\n```\n\n### 2.**2.3 content-scripts**\n\n内容脚本一般植入会被植入到页面中, 并且可以控制页面中的dom. 我们可以利用它实现屏蔽网页广告, 定制页面皮肤等操作. 在manifest.json中的基本配置如下:\n\n```docker\n{\n    \"content_scripts\": [{\n    \"matches\": [\n        \"http://*/*\",\n        \"https://*/*\"\n    ],\n    \"js\": [\n        \"lib/jquery3.4.min.js\",\n        \"content_script.js\"\n    ],\n    \"css\": [\"base.css\"]\n  }],\n}\n```\n\n以上代码中我们定义了content_scripts允许注入的页面范围, 插入页面的js以及css, 这样我们就能轻松改变某一个页面的样式.比如我们可以在页面中注入一个按钮:\n\n![Untitled%203.png](Untitled%203.png)\n\n后面的浏览器插件案例中会详细介绍content_scripts的用法.\n\n### **2.2.4 popup**\n\npopup是用户点击插件图标时打开的一个小窗口，当失去焦点后窗口就立即关闭，我们一般用它来处理一些简单的用户交互和插件说明。\n\n由于popup窗口也是一个网页,所以我们一般会建立一个popup.html和popup.js用来控制popup的页面展示和交互.我们在manifest.json中配置如下:\n\n```docker\n{\n    \"page_action\": {\n        \"default_title\": \"小夕图片提取插件\",\n        \"default_popup\": \"popup.html\"\n  },\n}\n```\n\n这里要注意一点的是,我们在popup.html中不能直接使用script脚本,需要用引入脚本文件的方式.如下:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>在线图片提取工具</title>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  </head>\n  <body>\n    <div class=\"pop-wrap\">\n    </div>\n    <script src=\"lib/jquery3.4.min.js\"></script>\n    <script src=\"popup.js\"></script>\n  </body>\n</html>\n```\n\n以下是笔者写的一个插件的popup页面:\n\n![Untitled%204.png](Untitled%204.png)\n\n## 2.3.通信机制\n\n对于一个相对复杂的浏览器插件来说,我们不仅仅只操作dom或者提供基本的功能就行了,我们还需要向第三方或者自己的服务器抓取有用的页面数据,这个时候就需要用到插件的通信机制了.\n\n因为content_script脚本存在于当前页面,受同源策略影响,导致我们无法将捕获到的数据传给第三方平台或者自己的服务器, 所以我们需要基于浏览器的通信API.一下是谷歌浏览器插件的通信流程:\n\n![https://pic2.zhimg.com/80/v2-5a05979498bf90fe0443290623e1c8cd_720w.jpg](https://pic2.zhimg.com/80/v2-5a05979498bf90fe0443290623e1c8cd_720w.jpg)\n\n### 2.**3.1 popup和background相互通信**\n\n由官方文档可知popup可以直接访问background页的方法,所以popup可以直接与其通信:\n\n```html\n// background.js\nvar getData = (data) => { console.log('拿到数据:' + data) }\n// popup.js\nlet bgObj = chrome.extension.getBackgroundPage();\nbgObj.getData(); // 访问bg的函数\n```\n\n### 2.**3.2 popup或者background页和content_script通信**\n\n这里我们使用chrome的tabs API,如下:\n\n```html\n// popup.js\n// 发送消息给content_script\nchrome.tabs.query({active: true, currentWindow: true}, function(tabs) {\n    chrome.tabs.sendMessage(tabs[0].id, \"activeBtn\", function(response) {\n      console.log(response);\n    });\n  });\n  \n// 接收消息\nchrome.runtime.onMessage.addListener(\n  function(request, sender, sendResponse) {\n    console.log(sender.tab ?\n                \"from a content script:\" + sender.tab.url :\n                \"from the extension\");\n    if (request.greeting == \"hello\")\n      sendResponse({farewell: \"goodbye\"});\n  });\n```\n\ncontent_script接收和发送消息:\n\n```html\n// 接收消息\nchrome.runtime.onMessage.addListener(\n  function(message, sender, sendResponse) {\n    if (message == \"activeBtn\"){\n      // ...\n      sendResponse({farewell: \"激活成功\"});\n    }\n });\n \n // 主动发送消息\n chrome.runtime.sendMessage({greeting: \"hello\"}, function(response) {\n   console.log(response, document.body);\n   // document.body.style.backgroundColor=\"orange\"\n});\n```\n\n有关消息的长连接,在谷歌官网也写的很清楚:\n\n![https://pic2.zhimg.com/80/v2-8064fff68ca7ab8e0d40631b6b7155fd_720w.jpg](https://pic2.zhimg.com/80/v2-8064fff68ca7ab8e0d40631b6b7155fd_720w.jpg)\n\n我们可以采用如下方式进行长连接:\n\n```html\n// content_script.js\nvar port = chrome.runtime.connect({name: \"徐小夕\"});\nport.postMessage({Ling: \"你好\"});\nport.onMessage.addListener(function(msg) {\n  if (msg.question == \"你是做什么滴?\")\n    port.postMessage({answer: \"搬砖\"});\n  else if (msg.question == \"搬砖有钱吗?\")\n    port.postMessage({answer: \"木有\"});\n});\n\n// popup.js\nchrome.runtime.onConnect.addListener(function(port) {\n  port.onMessage.addListener(function(msg) {\n    if (msg.Ling == \"你好\")\n      port.postMessage({question: \"你是做什么滴?\"});\n    else if (msg.answer == \"搬砖\")\n      port.postMessage({question: \"搬砖有钱吗?\"});\n    else if (msg.answer == \"木有\")\n      port.postMessage({question: \"太难了.\"});\n  });\n});\n```\n\n## **4.数据存储**\n\nchrome.storage用来针对插件全局进行数据存储,我们在任何一个页面(popup或content_script或background)下存储了数据,我们在以上三个页面都可以获取到, 具体用法如下:\n\n```html\n获取数据\nchrome.storage.sync.get('imgArr', function(data) {\n  console.log(data)\n});\n// 保存数据\nchrome.storage.sync.set({'imgArr': imgArr}, function() {\n    console.log('保存成功');\n  });\n  \n// 另一种方式\nchrome.storage.local.set({key: value}, function() {\n  console.log('Value is set to ' + value);\n});\n```\n\n## **5.应用场景**\n\n谷歌浏览器的插件应用场景很多,正如文章开头的思维导图中写的.以下是笔者总结的一些应用场景，大家感兴趣可以尝试去实现：\n\n- 谷歌浏览器自定义桌面\n- 网页性能分析工具\n- 网页爬虫\n- 埋点工具\n- 网页热力图生成工具\n- 安全拦截插件\n- 广告过滤插件\n- 网站动态换肤\n- 第三方数据导入\n- 代码格式化工具\n- 在线协作工具\n- 防作弊插件\n\n还有很多实用工具可以开发，大家可以好好把玩。接下来就来通过实现一个网页图片提取插件，来总结以下浏览器插件开发流程。\n\n## 6.开发一款抓取网站图片资源的浏览器插件\n\n首先还是按照笔者的风格，在开发任何一种工具之前都要明确需求，所以我们来看看该插件的功能点：\n\n- 能植入网页按钮，通过点击按钮捕获网页图片\n- 能在用户端展示捕获的图片\n- 点击插件能预览捕获的图片\n\n基本上就这几个功能，接下来我会展示核心代码，在介绍代码之前我们先预览一下插件的实现效果：\n\n![https://pic3.zhimg.com/80/v2-0c79ea16b92fb0619cd70248a8090462_720w.jpg](https://pic3.zhimg.com/80/v2-0c79ea16b92fb0619cd70248a8090462_720w.jpg)\n\n![https://pic2.zhimg.com/80/v2-ecee95b625f566a9595d73d55768c211_720w.jpg](https://pic2.zhimg.com/80/v2-ecee95b625f566a9595d73d55768c211_720w.jpg)\n\n插件目录结构如下：\n\n![https://pic1.zhimg.com/80/v2-79f003a0e9a21ec8566a37a3a4820e50_720w.jpg](https://pic1.zhimg.com/80/v2-79f003a0e9a21ec8566a37a3a4820e50_720w.jpg)\n\n因为插件的开发比较简单，所以我直接用jquery开发。这里我们主要关注popup.js和content_script.js, popup.js中主要用来获取从content_script页传过来的图片数据，并展示在popup.html中，另外又一个需要注意的是当页面没有注入生成按钮时，popupu需要发送信息给content页面，主动让其生成按钮，代码如下：\n\n```jsx\nchrome.storage.sync.get('imgArr', function(data) {\n  data.imgArr && data.imgArr.forEach(item => {\n    var imgWrap = $(\"<div class='img-box'></div>\")\n    var img = $(\"<img src='\" + item + \"' alt='\" + item + \"' />\")\n    imgWrap.append(img);\n    $('#content').append(imgWrap);\n    $('.empty').hide();\n  })\n});\n\n$('#activeBtn').click(function(element) {\n  chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {\n    chrome.tabs.sendMessage(tabs[0].id, \"activeBtn\", function(response) {\n      console.log(response);\n    });\n  });\n});\n```\n\n对于content页面，我们需要实现的是动态生成按钮，并且在页面中植入弹窗来展示获取到的图片，另一方面需要将图片数据传递给storage，以便popup页面可以获取图片数据。\n\n由于页面比较简单，笔者就不用过多的第三方库了，笔者先简单手写一个modal组件，代码如下：\n\n```jsx\n// 弹窗\n~function Modal() {\n  var modal;\n  \n  if(this instanceof Modal) {\n    this.init = function(opt) {\n      modal = $(\"<div class='modal'></div>\");\n      var title = $(\"<div class='modal-title'>\" + opt.title + \"</div>\");\n      var close_btn = $(\"<span class='modal-close-btn'>X</span>\");\n      var content = $(\"<div class='modal-content'></div>\");\n      var mask = $(\"<div class='modal-mask'></div>\");\n      close_btn.click(function(){\n        modal.hide()\n      })\n      title.append(close_btn);\n      content.append(title);\n      content.append(opt.content);\n      modal.append(content);\n      modal.append(mask);\n      $('body').append(modal);\n    }\n    this.show = function(opt) {\n      if(modal) {\n        modal.show();\n      }else {\n        var options = {\n          title: opt.title || '标题',\n          content: opt.content || ''\n        }\n        this.init(options)\n        modal.show();\n      }\n    }\n    this.hide = function() {\n      modal.hide();\n    }\n  }else {\n    window.Modal = new Modal()\n  }\n}()\n```\n\n**第一步，我们先批量获取页面图片数据：**\n\n```jsx\nvar imgArr = []\n$('img').each(function(i) {\n  var src = $(this).attr('src');\n  var realSrc = /^(http|https)/.test(src) ? src : location.protocol+ '//' + location.host + src;\n  imgArr.push(realSrc)\n})\n```\n\n因为图片的src路径可能是相对地址，所以笔者在这里用正则简单处理以下，当然我们可以进行更细粒度的控制。\n\n**第二步，将图片数据存储到storage中：**\n\n```jsx\nchrome.storage.sync.set({'imgArr': imgArr}, function() {\n  console.log('保存成功');\n});\n```\n\n**第三步，生成预览图片的弹窗，这里用笔者上面实现的modal组件**：\n\n```jsx\nModal.show({\n  title: '提取结果',\n  content: imgBox\n})\n```\n\n**第四步，当popup发送激活按钮的通知时，我们要在网页中动态插入生成按钮：**\n\n```jsx\nchrome.runtime.onMessage.addListener(\n  function(message, sender, sendResponse) {\n    if (message == \"activeBtn\"){\n      if(!$('.crawl-btn')) {\n        $('body').append(\"<div class='crawl-btn'>提取</div>\")\n      }else {\n        $('.crawl-btn').css(\"background-color\",\"orange\");\n        setTimeout(() => {\n          $('.crawl-btn').css(\"background-color\",\"#06c\");\n        }, 3000);\n      }\n      sendResponse({farewell: \"激活成功\"});\n    }\n });\n```\n\nsetTimeout那段纯属是为了吸引用户视线，当然我们可以用更优雅的方式来处理。插件核心代码主要是这些，当然还有很多细节要考虑，我把配置文件和一些细节放到github了，如果感兴趣的朋友可以安装感受一下。\n\ngithub地址：[https://github.com/MrXujiang/fetchImg](https://github.com/MrXujiang/fetchImg)","source":"_posts/ChromeExtensions.md","raw":"---\ntitle: Chrome Extensions\ncomments: true\ntags: \n    - Chrome Extensions\ncategories: 浏览器插件\nthumbnail: https://img0.baidu.com/it/u=1754948549,4053210497&fm=26&fmt=auto&gp=0.jpg\nbanner: https://img0.baidu.com/it/u=1754948549,4053210497&fm=26&fmt=auto&gp=0.jpg\ncover: https://img0.baidu.com/it/u=1754948549,4053210497&fm=26&fmt=auto&gp=0.jpg\n---\n\n# 1. 概览:\n\n![Untitled.png](Untitled.png)\n\n# 2. **入门**\n\n首先我们看看的浏览器插件的定义:\n\n浏览器插件是基于Web技术（例如HTML，JavaScript和CSS）构建的可以定制浏览体验的小型软件程序。它们使用户可以根据个人需要或偏好来定制Chrome功能和行为。\n\n要想开发一款浏览器插件,我们只需要有一个manifest.json文件即可, 为了快速上手浏览器插件开发,我们需要把浏览器开发者工具打开, 具体步骤如下:\n\n1. **在谷歌浏览器中输入chrome://extensions/**\n2. **将开发者模式启动**\n\n![https://pic3.zhimg.com/80/v2-a557be3300d7012d25f89d00038b7e22_720w.jpg](https://pic3.zhimg.com/80/v2-a557be3300d7012d25f89d00038b7e22_720w.jpg)\n\n## 2.1 **导入自己的浏览器插件包**\n\n通过以上三个步骤我们就可以开启浏览器插件开发之旅了.浏览器插件一般放在浏览器地址栏右侧,我们可以在manifest.json文件配置插件的icon,并配置一定的规则,就能看到我们的浏览器插件图标了,如下图:\n\n![https://pic4.zhimg.com/80/v2-023f0963017950f69fee85bfaf35bd3b_720w.jpg](https://pic4.zhimg.com/80/v2-023f0963017950f69fee85bfaf35bd3b_720w.jpg)\n\n下面我们来具体讲解一下浏览器插件开发的核心概念.\n\n## 2.2 **核心知识点**\n\n浏览器插件一般涉及以下几个核心文件:\n\n- **manifest.json** 用来配置所有和插件相关的配置(必须放在根目录)\n- **background.js** 后台脚本(后台页面),生命周期和浏览器一致,一般放置全局代码\n- **content-scripts** 插件向页面注入脚本的一种形式,我们可以通过content-scripts向页面注入js和css资源,并可控制允许注入的范围\n- **popup** 点击插件图标后打开的自定义窗口, 用来处理用户交互\n\n笔者画了一张简图来大致表示一下它们之间的关系:\n\n![https://pic4.zhimg.com/80/v2-bcebb2fc6d562fefac9de971f6e0ee9f_720w.jpg](https://pic4.zhimg.com/80/v2-bcebb2fc6d562fefac9de971f6e0ee9f_720w.jpg)\n\n接下来我们来具体了解一下一上几个核心知识点.\n\n### 2**.2.1 manifest.json**\n\n谷歌官网简单的配置,如下:\n\n```docker\n{\n    \"name\": \"My Extension\",\n    \"version\": \"2.1\",\n    \"description\": \"Gets information from Google.\",\n    \"icons\": {\n      \"128\": \"icon_16.png\",\n      \"128\": \"icon_32.png\",\n      \"128\": \"icon_48.png\",\n      \"128\": \"icon_128.png\"\n    },\n    \"background\": {\n      \"persistent\": false,\n      \"scripts\": [\"background_script.js\"]\n    },\n    \"permissions\": [\"https://*.google.com/\", \"activeTab\"],\n    \"browser_action\": {\n      \"default_icon\": \"icon_16.png\",\n      \"default_popup\": \"popup.html\"\n    }\n }\n```\n\n各字段含义介绍如下:\n\n- **name** 浏览器插件名称, 将会在插件列表中显示\n- **description** 浏览器插件简介, 方便告诉开发者插件的功能和作用, 将会在插件列表中显示\n- **version** 浏览器插件版本\n- **icon** 浏览器插件图标\n\n![Untitled%201.png](Untitled%201.png)\n\n- **background** 背景页的脚本路径,一般为插件目录的相对地址\n- **permissions** 允许使用的浏览器API的权限,比如contextMenus(右键菜单), tabs(操作标签), webRequest(使用web请求), storage(允许使用本地存储), “**http://**”(可以通过executeScript或者insertCSS访问的网站)\n- **browser_action** 浏览器右上角图标设置(包括popup页面, 鼠标悬停时的标题, icon等)\n- **content_scripts** 需要直接注入页面的javascript脚本\n- **web_accessible_resources** 普通页面能够直接访问的插件资源列表，如果不设置是无法直接访问的\n- **chrome_url_overrides** 覆盖浏览器默认页面(经常用来做浏览器的自定义桌面)\n- **omnibox** 向地址栏注册一个关键字以提供搜索建议，只能设置一个关键字(多用于自定义搜索拦截)\n- **default_locale** 默认语言(比如\"zh_CN\")\n\n### 2**.2.2 background.js**\n\nbackground页面主要用来提供一些全局配置, 事件监听, 业务转发等.举几个常用案例:\n\n**1.定义右键菜单**\n\n```docker\n// background.js\nconst systems = {\n  a: '趣谈前端',\n  b: '掘金',\n  c: '微信'\n}\n\nchrome.runtime.onInstalled.addListener(function() {\n  // 上下文菜单\n  for (let key of Object.keys(systems)) {\n    chrome.contextMenus.create({\n      id: key,\n      title: systems[key],\n      type: 'normal',\n      contexts: ['selection'],\n    });\n  }\n});\n\n// manifest.json\n{\n    \"permissions\": [\"contextMenus\"]\n}\n```\n\n效果如下:\n\n![Untitled%202.png](Untitled%202.png)\n\n**2.设置只有.com后缀的页面才会激活插件**\n\n```docker\nchrome.runtime.onInstalled.addListener(function() {\n  // 类似于什么时候激活浏览器插件图标这种感觉\n  chrome.declarativeContent.onPageChanged.removeRules(undefined, function() {\n    chrome.declarativeContent.onPageChanged.addRules([{\n      conditions: [new chrome.declarativeContent.PageStateMatcher({\n        pageUrl: {hostSuffix: '.com'},\n      })\n      ],\n      actions: [new chrome.declarativeContent.ShowPageAction()]\n    }]);\n  });\n});\n```\n\n如下图所示,当页面地址的后缀不等于.com时,插件icon将不被激活:\n\n![https://pic3.zhimg.com/80/v2-e71bb0259baff0138a3ed613d3636342_720w.jpg](https://pic3.zhimg.com/80/v2-e71bb0259baff0138a3ed613d3636342_720w.jpg)\n\n**3.和content_script或者popup页面进行消息通信**\n\n```docker\nchrome.runtime.onMessage.addListener(\n\tfunction(request, sender, sendResponse) {\n\t  console.log(sender.tab ?\n\t              \"from a content script:\" + sender.tab.url :\n\t              \"from the extension\");\n\t  if (request.greeting == \"hello\")\n\t    sendResponse({farewell: \"goodbye\"});\n\t});\n```\n\n### 2.**2.3 content-scripts**\n\n内容脚本一般植入会被植入到页面中, 并且可以控制页面中的dom. 我们可以利用它实现屏蔽网页广告, 定制页面皮肤等操作. 在manifest.json中的基本配置如下:\n\n```docker\n{\n    \"content_scripts\": [{\n    \"matches\": [\n        \"http://*/*\",\n        \"https://*/*\"\n    ],\n    \"js\": [\n        \"lib/jquery3.4.min.js\",\n        \"content_script.js\"\n    ],\n    \"css\": [\"base.css\"]\n  }],\n}\n```\n\n以上代码中我们定义了content_scripts允许注入的页面范围, 插入页面的js以及css, 这样我们就能轻松改变某一个页面的样式.比如我们可以在页面中注入一个按钮:\n\n![Untitled%203.png](Untitled%203.png)\n\n后面的浏览器插件案例中会详细介绍content_scripts的用法.\n\n### **2.2.4 popup**\n\npopup是用户点击插件图标时打开的一个小窗口，当失去焦点后窗口就立即关闭，我们一般用它来处理一些简单的用户交互和插件说明。\n\n由于popup窗口也是一个网页,所以我们一般会建立一个popup.html和popup.js用来控制popup的页面展示和交互.我们在manifest.json中配置如下:\n\n```docker\n{\n    \"page_action\": {\n        \"default_title\": \"小夕图片提取插件\",\n        \"default_popup\": \"popup.html\"\n  },\n}\n```\n\n这里要注意一点的是,我们在popup.html中不能直接使用script脚本,需要用引入脚本文件的方式.如下:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>在线图片提取工具</title>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  </head>\n  <body>\n    <div class=\"pop-wrap\">\n    </div>\n    <script src=\"lib/jquery3.4.min.js\"></script>\n    <script src=\"popup.js\"></script>\n  </body>\n</html>\n```\n\n以下是笔者写的一个插件的popup页面:\n\n![Untitled%204.png](Untitled%204.png)\n\n## 2.3.通信机制\n\n对于一个相对复杂的浏览器插件来说,我们不仅仅只操作dom或者提供基本的功能就行了,我们还需要向第三方或者自己的服务器抓取有用的页面数据,这个时候就需要用到插件的通信机制了.\n\n因为content_script脚本存在于当前页面,受同源策略影响,导致我们无法将捕获到的数据传给第三方平台或者自己的服务器, 所以我们需要基于浏览器的通信API.一下是谷歌浏览器插件的通信流程:\n\n![https://pic2.zhimg.com/80/v2-5a05979498bf90fe0443290623e1c8cd_720w.jpg](https://pic2.zhimg.com/80/v2-5a05979498bf90fe0443290623e1c8cd_720w.jpg)\n\n### 2.**3.1 popup和background相互通信**\n\n由官方文档可知popup可以直接访问background页的方法,所以popup可以直接与其通信:\n\n```html\n// background.js\nvar getData = (data) => { console.log('拿到数据:' + data) }\n// popup.js\nlet bgObj = chrome.extension.getBackgroundPage();\nbgObj.getData(); // 访问bg的函数\n```\n\n### 2.**3.2 popup或者background页和content_script通信**\n\n这里我们使用chrome的tabs API,如下:\n\n```html\n// popup.js\n// 发送消息给content_script\nchrome.tabs.query({active: true, currentWindow: true}, function(tabs) {\n    chrome.tabs.sendMessage(tabs[0].id, \"activeBtn\", function(response) {\n      console.log(response);\n    });\n  });\n  \n// 接收消息\nchrome.runtime.onMessage.addListener(\n  function(request, sender, sendResponse) {\n    console.log(sender.tab ?\n                \"from a content script:\" + sender.tab.url :\n                \"from the extension\");\n    if (request.greeting == \"hello\")\n      sendResponse({farewell: \"goodbye\"});\n  });\n```\n\ncontent_script接收和发送消息:\n\n```html\n// 接收消息\nchrome.runtime.onMessage.addListener(\n  function(message, sender, sendResponse) {\n    if (message == \"activeBtn\"){\n      // ...\n      sendResponse({farewell: \"激活成功\"});\n    }\n });\n \n // 主动发送消息\n chrome.runtime.sendMessage({greeting: \"hello\"}, function(response) {\n   console.log(response, document.body);\n   // document.body.style.backgroundColor=\"orange\"\n});\n```\n\n有关消息的长连接,在谷歌官网也写的很清楚:\n\n![https://pic2.zhimg.com/80/v2-8064fff68ca7ab8e0d40631b6b7155fd_720w.jpg](https://pic2.zhimg.com/80/v2-8064fff68ca7ab8e0d40631b6b7155fd_720w.jpg)\n\n我们可以采用如下方式进行长连接:\n\n```html\n// content_script.js\nvar port = chrome.runtime.connect({name: \"徐小夕\"});\nport.postMessage({Ling: \"你好\"});\nport.onMessage.addListener(function(msg) {\n  if (msg.question == \"你是做什么滴?\")\n    port.postMessage({answer: \"搬砖\"});\n  else if (msg.question == \"搬砖有钱吗?\")\n    port.postMessage({answer: \"木有\"});\n});\n\n// popup.js\nchrome.runtime.onConnect.addListener(function(port) {\n  port.onMessage.addListener(function(msg) {\n    if (msg.Ling == \"你好\")\n      port.postMessage({question: \"你是做什么滴?\"});\n    else if (msg.answer == \"搬砖\")\n      port.postMessage({question: \"搬砖有钱吗?\"});\n    else if (msg.answer == \"木有\")\n      port.postMessage({question: \"太难了.\"});\n  });\n});\n```\n\n## **4.数据存储**\n\nchrome.storage用来针对插件全局进行数据存储,我们在任何一个页面(popup或content_script或background)下存储了数据,我们在以上三个页面都可以获取到, 具体用法如下:\n\n```html\n获取数据\nchrome.storage.sync.get('imgArr', function(data) {\n  console.log(data)\n});\n// 保存数据\nchrome.storage.sync.set({'imgArr': imgArr}, function() {\n    console.log('保存成功');\n  });\n  \n// 另一种方式\nchrome.storage.local.set({key: value}, function() {\n  console.log('Value is set to ' + value);\n});\n```\n\n## **5.应用场景**\n\n谷歌浏览器的插件应用场景很多,正如文章开头的思维导图中写的.以下是笔者总结的一些应用场景，大家感兴趣可以尝试去实现：\n\n- 谷歌浏览器自定义桌面\n- 网页性能分析工具\n- 网页爬虫\n- 埋点工具\n- 网页热力图生成工具\n- 安全拦截插件\n- 广告过滤插件\n- 网站动态换肤\n- 第三方数据导入\n- 代码格式化工具\n- 在线协作工具\n- 防作弊插件\n\n还有很多实用工具可以开发，大家可以好好把玩。接下来就来通过实现一个网页图片提取插件，来总结以下浏览器插件开发流程。\n\n## 6.开发一款抓取网站图片资源的浏览器插件\n\n首先还是按照笔者的风格，在开发任何一种工具之前都要明确需求，所以我们来看看该插件的功能点：\n\n- 能植入网页按钮，通过点击按钮捕获网页图片\n- 能在用户端展示捕获的图片\n- 点击插件能预览捕获的图片\n\n基本上就这几个功能，接下来我会展示核心代码，在介绍代码之前我们先预览一下插件的实现效果：\n\n![https://pic3.zhimg.com/80/v2-0c79ea16b92fb0619cd70248a8090462_720w.jpg](https://pic3.zhimg.com/80/v2-0c79ea16b92fb0619cd70248a8090462_720w.jpg)\n\n![https://pic2.zhimg.com/80/v2-ecee95b625f566a9595d73d55768c211_720w.jpg](https://pic2.zhimg.com/80/v2-ecee95b625f566a9595d73d55768c211_720w.jpg)\n\n插件目录结构如下：\n\n![https://pic1.zhimg.com/80/v2-79f003a0e9a21ec8566a37a3a4820e50_720w.jpg](https://pic1.zhimg.com/80/v2-79f003a0e9a21ec8566a37a3a4820e50_720w.jpg)\n\n因为插件的开发比较简单，所以我直接用jquery开发。这里我们主要关注popup.js和content_script.js, popup.js中主要用来获取从content_script页传过来的图片数据，并展示在popup.html中，另外又一个需要注意的是当页面没有注入生成按钮时，popupu需要发送信息给content页面，主动让其生成按钮，代码如下：\n\n```jsx\nchrome.storage.sync.get('imgArr', function(data) {\n  data.imgArr && data.imgArr.forEach(item => {\n    var imgWrap = $(\"<div class='img-box'></div>\")\n    var img = $(\"<img src='\" + item + \"' alt='\" + item + \"' />\")\n    imgWrap.append(img);\n    $('#content').append(imgWrap);\n    $('.empty').hide();\n  })\n});\n\n$('#activeBtn').click(function(element) {\n  chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {\n    chrome.tabs.sendMessage(tabs[0].id, \"activeBtn\", function(response) {\n      console.log(response);\n    });\n  });\n});\n```\n\n对于content页面，我们需要实现的是动态生成按钮，并且在页面中植入弹窗来展示获取到的图片，另一方面需要将图片数据传递给storage，以便popup页面可以获取图片数据。\n\n由于页面比较简单，笔者就不用过多的第三方库了，笔者先简单手写一个modal组件，代码如下：\n\n```jsx\n// 弹窗\n~function Modal() {\n  var modal;\n  \n  if(this instanceof Modal) {\n    this.init = function(opt) {\n      modal = $(\"<div class='modal'></div>\");\n      var title = $(\"<div class='modal-title'>\" + opt.title + \"</div>\");\n      var close_btn = $(\"<span class='modal-close-btn'>X</span>\");\n      var content = $(\"<div class='modal-content'></div>\");\n      var mask = $(\"<div class='modal-mask'></div>\");\n      close_btn.click(function(){\n        modal.hide()\n      })\n      title.append(close_btn);\n      content.append(title);\n      content.append(opt.content);\n      modal.append(content);\n      modal.append(mask);\n      $('body').append(modal);\n    }\n    this.show = function(opt) {\n      if(modal) {\n        modal.show();\n      }else {\n        var options = {\n          title: opt.title || '标题',\n          content: opt.content || ''\n        }\n        this.init(options)\n        modal.show();\n      }\n    }\n    this.hide = function() {\n      modal.hide();\n    }\n  }else {\n    window.Modal = new Modal()\n  }\n}()\n```\n\n**第一步，我们先批量获取页面图片数据：**\n\n```jsx\nvar imgArr = []\n$('img').each(function(i) {\n  var src = $(this).attr('src');\n  var realSrc = /^(http|https)/.test(src) ? src : location.protocol+ '//' + location.host + src;\n  imgArr.push(realSrc)\n})\n```\n\n因为图片的src路径可能是相对地址，所以笔者在这里用正则简单处理以下，当然我们可以进行更细粒度的控制。\n\n**第二步，将图片数据存储到storage中：**\n\n```jsx\nchrome.storage.sync.set({'imgArr': imgArr}, function() {\n  console.log('保存成功');\n});\n```\n\n**第三步，生成预览图片的弹窗，这里用笔者上面实现的modal组件**：\n\n```jsx\nModal.show({\n  title: '提取结果',\n  content: imgBox\n})\n```\n\n**第四步，当popup发送激活按钮的通知时，我们要在网页中动态插入生成按钮：**\n\n```jsx\nchrome.runtime.onMessage.addListener(\n  function(message, sender, sendResponse) {\n    if (message == \"activeBtn\"){\n      if(!$('.crawl-btn')) {\n        $('body').append(\"<div class='crawl-btn'>提取</div>\")\n      }else {\n        $('.crawl-btn').css(\"background-color\",\"orange\");\n        setTimeout(() => {\n          $('.crawl-btn').css(\"background-color\",\"#06c\");\n        }, 3000);\n      }\n      sendResponse({farewell: \"激活成功\"});\n    }\n });\n```\n\nsetTimeout那段纯属是为了吸引用户视线，当然我们可以用更优雅的方式来处理。插件核心代码主要是这些，当然还有很多细节要考虑，我把配置文件和一些细节放到github了，如果感兴趣的朋友可以安装感受一下。\n\ngithub地址：[https://github.com/MrXujiang/fetchImg](https://github.com/MrXujiang/fetchImg)","slug":"ChromeExtensions","published":1,"date":"2021-07-01T04:04:10.967Z","updated":"2021-07-01T09:58:33.359Z","layout":"post","photos":[],"link":"","_id":"ckqlr2i0o0002g8up2vrz9e7r","content":"<h1 id=\"1-概览\"><a href=\"#1-概览\" class=\"headerlink\" title=\"1. 概览:\"></a>1. 概览:</h1><p><img src=\"Untitled.png\" alt=\"Untitled.png\"></p>\n<h1 id=\"2-入门\"><a href=\"#2-入门\" class=\"headerlink\" title=\"2. 入门\"></a>2. <strong>入门</strong></h1><p>首先我们看看的浏览器插件的定义:</p>\n<p>浏览器插件是基于Web技术（例如HTML，JavaScript和CSS）构建的可以定制浏览体验的小型软件程序。它们使用户可以根据个人需要或偏好来定制Chrome功能和行为。</p>\n<p>要想开发一款浏览器插件,我们只需要有一个manifest.json文件即可, 为了快速上手浏览器插件开发,我们需要把浏览器开发者工具打开, 具体步骤如下:</p>\n<ol>\n<li><strong>在谷歌浏览器中输入chrome://extensions/</strong></li>\n<li><strong>将开发者模式启动</strong></li>\n</ol>\n<p><img src=\"https://pic3.zhimg.com/80/v2-a557be3300d7012d25f89d00038b7e22_720w.jpg\" alt=\"https://pic3.zhimg.com/80/v2-a557be3300d7012d25f89d00038b7e22_720w.jpg\"></p>\n<h2 id=\"2-1-导入自己的浏览器插件包\"><a href=\"#2-1-导入自己的浏览器插件包\" class=\"headerlink\" title=\"2.1 导入自己的浏览器插件包\"></a>2.1 <strong>导入自己的浏览器插件包</strong></h2><p>通过以上三个步骤我们就可以开启浏览器插件开发之旅了.浏览器插件一般放在浏览器地址栏右侧,我们可以在manifest.json文件配置插件的icon,并配置一定的规则,就能看到我们的浏览器插件图标了,如下图:</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-023f0963017950f69fee85bfaf35bd3b_720w.jpg\" alt=\"https://pic4.zhimg.com/80/v2-023f0963017950f69fee85bfaf35bd3b_720w.jpg\"></p>\n<p>下面我们来具体讲解一下浏览器插件开发的核心概念.</p>\n<h2 id=\"2-2-核心知识点\"><a href=\"#2-2-核心知识点\" class=\"headerlink\" title=\"2.2 核心知识点\"></a>2.2 <strong>核心知识点</strong></h2><p>浏览器插件一般涉及以下几个核心文件:</p>\n<ul>\n<li><strong>manifest.json</strong> 用来配置所有和插件相关的配置(必须放在根目录)</li>\n<li><strong>background.js</strong> 后台脚本(后台页面),生命周期和浏览器一致,一般放置全局代码</li>\n<li><strong>content-scripts</strong> 插件向页面注入脚本的一种形式,我们可以通过content-scripts向页面注入js和css资源,并可控制允许注入的范围</li>\n<li><strong>popup</strong> 点击插件图标后打开的自定义窗口, 用来处理用户交互</li>\n</ul>\n<p>笔者画了一张简图来大致表示一下它们之间的关系:</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-bcebb2fc6d562fefac9de971f6e0ee9f_720w.jpg\" alt=\"https://pic4.zhimg.com/80/v2-bcebb2fc6d562fefac9de971f6e0ee9f_720w.jpg\"></p>\n<p>接下来我们来具体了解一下一上几个核心知识点.</p>\n<h3 id=\"2-2-1-manifest-json\"><a href=\"#2-2-1-manifest-json\" class=\"headerlink\" title=\"2**.2.1 manifest.json**\"></a>2**.2.1 manifest.json**</h3><p>谷歌官网简单的配置,如下:</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;My Extension&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;version&quot;</span>: <span class=\"string\">&quot;2.1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;description&quot;</span>: <span class=\"string\">&quot;Gets information from Google.&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;icons&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;128&quot;</span>: <span class=\"string\">&quot;icon_16.png&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;128&quot;</span>: <span class=\"string\">&quot;icon_32.png&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;128&quot;</span>: <span class=\"string\">&quot;icon_48.png&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;128&quot;</span>: <span class=\"string\">&quot;icon_128.png&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;background&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;persistent&quot;</span>: false,</span><br><span class=\"line\">      <span class=\"string\">&quot;scripts&quot;</span>: [<span class=\"string\">&quot;background_script.js&quot;</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;permissions&quot;</span>: [<span class=\"string\">&quot;https://*.google.com/&quot;</span>, <span class=\"string\">&quot;activeTab&quot;</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;browser_action&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;default_icon&quot;</span>: <span class=\"string\">&quot;icon_16.png&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;default_popup&quot;</span>: <span class=\"string\">&quot;popup.html&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>各字段含义介绍如下:</p>\n<ul>\n<li><strong>name</strong> 浏览器插件名称, 将会在插件列表中显示</li>\n<li><strong>description</strong> 浏览器插件简介, 方便告诉开发者插件的功能和作用, 将会在插件列表中显示</li>\n<li><strong>version</strong> 浏览器插件版本</li>\n<li><strong>icon</strong> 浏览器插件图标</li>\n</ul>\n<p><img src=\"Untitled%201.png\" alt=\"Untitled%201.png\"></p>\n<ul>\n<li><strong>background</strong> 背景页的脚本路径,一般为插件目录的相对地址</li>\n<li><strong>permissions</strong> 允许使用的浏览器API的权限,比如contextMenus(右键菜单), tabs(操作标签), webRequest(使用web请求), storage(允许使用本地存储), “**http://**”(可以通过executeScript或者insertCSS访问的网站)</li>\n<li><strong>browser_action</strong> 浏览器右上角图标设置(包括popup页面, 鼠标悬停时的标题, icon等)</li>\n<li><strong>content_scripts</strong> 需要直接注入页面的javascript脚本</li>\n<li><strong>web_accessible_resources</strong> 普通页面能够直接访问的插件资源列表，如果不设置是无法直接访问的</li>\n<li><strong>chrome_url_overrides</strong> 覆盖浏览器默认页面(经常用来做浏览器的自定义桌面)</li>\n<li><strong>omnibox</strong> 向地址栏注册一个关键字以提供搜索建议，只能设置一个关键字(多用于自定义搜索拦截)</li>\n<li><strong>default_locale</strong> 默认语言(比如”zh_CN”)</li>\n</ul>\n<h3 id=\"2-2-2-background-js\"><a href=\"#2-2-2-background-js\" class=\"headerlink\" title=\"2**.2.2 background.js**\"></a>2**.2.2 background.js**</h3><p>background页面主要用来提供一些全局配置, 事件监听, 业务转发等.举几个常用案例:</p>\n<p><strong>1.定义右键菜单</strong></p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// background.js</span><br><span class=\"line\">const systems = &#123;</span><br><span class=\"line\">  a: <span class=\"string\">&#x27;趣谈前端&#x27;</span>,</span><br><span class=\"line\">  b: <span class=\"string\">&#x27;掘金&#x27;</span>,</span><br><span class=\"line\">  c: <span class=\"string\">&#x27;微信&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">chrome.runtime.onInstalled.addListener(function() &#123;</span><br><span class=\"line\">  // 上下文菜单</span><br><span class=\"line\">  for (let key of Object.keys(systems)) &#123;</span><br><span class=\"line\">    chrome.contextMenus.create(&#123;</span><br><span class=\"line\">      id: key,</span><br><span class=\"line\">      title: systems[key],</span><br><span class=\"line\">      type: <span class=\"string\">&#x27;normal&#x27;</span>,</span><br><span class=\"line\">      contexts: [<span class=\"string\">&#x27;selection&#x27;</span>],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// manifest.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;permissions&quot;</span>: [<span class=\"string\">&quot;contextMenus&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果如下:</p>\n<p><img src=\"Untitled%202.png\" alt=\"Untitled%202.png\"></p>\n<p><strong>2.设置只有.com后缀的页面才会激活插件</strong></p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.runtime.onInstalled.addListener(function() &#123;</span><br><span class=\"line\">  // 类似于什么时候激活浏览器插件图标这种感觉</span><br><span class=\"line\">  chrome.declarativeContent.onPageChanged.removeRules(undefined, function() &#123;</span><br><span class=\"line\">    chrome.declarativeContent.onPageChanged.addRules([&#123;</span><br><span class=\"line\">      conditions: [new chrome.declarativeContent.PageStateMatcher(&#123;</span><br><span class=\"line\">        pageUrl: &#123;hostSuffix: <span class=\"string\">&#x27;.com&#x27;</span>&#125;,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      actions: [new chrome.declarativeContent.ShowPageAction()]</span><br><span class=\"line\">    &#125;]);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如下图所示,当页面地址的后缀不等于.com时,插件icon将不被激活:</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-e71bb0259baff0138a3ed613d3636342_720w.jpg\" alt=\"https://pic3.zhimg.com/80/v2-e71bb0259baff0138a3ed613d3636342_720w.jpg\"></p>\n<p><strong>3.和content_script或者popup页面进行消息通信</strong></p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.runtime.onMessage.addListener(</span><br><span class=\"line\">\tfunction(request, sender, sendResponse) &#123;</span><br><span class=\"line\">\t  console.log(sender.tab ?</span><br><span class=\"line\">\t              <span class=\"string\">&quot;from a content script:&quot;</span> + sender.tab.url :</span><br><span class=\"line\">\t              <span class=\"string\">&quot;from the extension&quot;</span>);</span><br><span class=\"line\">\t  if (request.greeting == <span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">\t    sendResponse(&#123;farewell: <span class=\"string\">&quot;goodbye&quot;</span>&#125;);</span><br><span class=\"line\">\t&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-3-content-scripts\"><a href=\"#2-2-3-content-scripts\" class=\"headerlink\" title=\"2.2.3 content-scripts\"></a>2.<strong>2.3 content-scripts</strong></h3><p>内容脚本一般植入会被植入到页面中, 并且可以控制页面中的dom. 我们可以利用它实现屏蔽网页广告, 定制页面皮肤等操作. 在manifest.json中的基本配置如下:</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;content_scripts&quot;</span>: [&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;matches&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;http://*/*&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;https://*/*&quot;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&quot;js&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;lib/jquery3.4.min.js&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;content_script.js&quot;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&quot;css&quot;</span>: [<span class=\"string\">&quot;base.css&quot;</span>]</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码中我们定义了content_scripts允许注入的页面范围, 插入页面的js以及css, 这样我们就能轻松改变某一个页面的样式.比如我们可以在页面中注入一个按钮:</p>\n<p><img src=\"Untitled%203.png\" alt=\"Untitled%203.png\"></p>\n<p>后面的浏览器插件案例中会详细介绍content_scripts的用法.</p>\n<h3 id=\"2-2-4-popup\"><a href=\"#2-2-4-popup\" class=\"headerlink\" title=\"2.2.4 popup\"></a><strong>2.2.4 popup</strong></h3><p>popup是用户点击插件图标时打开的一个小窗口，当失去焦点后窗口就立即关闭，我们一般用它来处理一些简单的用户交互和插件说明。</p>\n<p>由于popup窗口也是一个网页,所以我们一般会建立一个popup.html和popup.js用来控制popup的页面展示和交互.我们在manifest.json中配置如下:</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;page_action&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;default_title&quot;</span>: <span class=\"string\">&quot;小夕图片提取插件&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;default_popup&quot;</span>: <span class=\"string\">&quot;popup.html&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里要注意一点的是,我们在popup.html中不能直接使用script脚本,需要用引入脚本文件的方式.如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>在线图片提取工具<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;Content-Type&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pop-wrap&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;lib/jquery3.4.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;popup.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>以下是笔者写的一个插件的popup页面:</p>\n<p><img src=\"Untitled%204.png\" alt=\"Untitled%204.png\"></p>\n<h2 id=\"2-3-通信机制\"><a href=\"#2-3-通信机制\" class=\"headerlink\" title=\"2.3.通信机制\"></a>2.3.通信机制</h2><p>对于一个相对复杂的浏览器插件来说,我们不仅仅只操作dom或者提供基本的功能就行了,我们还需要向第三方或者自己的服务器抓取有用的页面数据,这个时候就需要用到插件的通信机制了.</p>\n<p>因为content_script脚本存在于当前页面,受同源策略影响,导致我们无法将捕获到的数据传给第三方平台或者自己的服务器, 所以我们需要基于浏览器的通信API.一下是谷歌浏览器插件的通信流程:</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-5a05979498bf90fe0443290623e1c8cd_720w.jpg\" alt=\"https://pic2.zhimg.com/80/v2-5a05979498bf90fe0443290623e1c8cd_720w.jpg\"></p>\n<h3 id=\"2-3-1-popup和background相互通信\"><a href=\"#2-3-1-popup和background相互通信\" class=\"headerlink\" title=\"2.3.1 popup和background相互通信\"></a>2.<strong>3.1 popup和background相互通信</strong></h3><p>由官方文档可知popup可以直接访问background页的方法,所以popup可以直接与其通信:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// background.js</span><br><span class=\"line\">var getData = (data) =&gt; &#123; console.log(&#x27;拿到数据:&#x27; + data) &#125;</span><br><span class=\"line\">// popup.js</span><br><span class=\"line\">let bgObj = chrome.extension.getBackgroundPage();</span><br><span class=\"line\">bgObj.getData(); // 访问bg的函数</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-2-popup或者background页和content-script通信\"><a href=\"#2-3-2-popup或者background页和content-script通信\" class=\"headerlink\" title=\"2.3.2 popup或者background页和content_script通信\"></a>2.<strong>3.2 popup或者background页和content_script通信</strong></h3><p>这里我们使用chrome的tabs API,如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// popup.js</span><br><span class=\"line\">// 发送消息给content_script</span><br><span class=\"line\">chrome.tabs.query(&#123;active: true, currentWindow: true&#125;, function(tabs) &#123;</span><br><span class=\"line\">    chrome.tabs.sendMessage(tabs[0].id, &quot;activeBtn&quot;, function(response) &#123;</span><br><span class=\"line\">      console.log(response);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">// 接收消息</span><br><span class=\"line\">chrome.runtime.onMessage.addListener(</span><br><span class=\"line\">  function(request, sender, sendResponse) &#123;</span><br><span class=\"line\">    console.log(sender.tab ?</span><br><span class=\"line\">                &quot;from a content script:&quot; + sender.tab.url :</span><br><span class=\"line\">                &quot;from the extension&quot;);</span><br><span class=\"line\">    if (request.greeting == &quot;hello&quot;)</span><br><span class=\"line\">      sendResponse(&#123;farewell: &quot;goodbye&quot;&#125;);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>content_script接收和发送消息:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 接收消息</span><br><span class=\"line\">chrome.runtime.onMessage.addListener(</span><br><span class=\"line\">  function(message, sender, sendResponse) &#123;</span><br><span class=\"line\">    if (message == &quot;activeBtn&quot;)&#123;</span><br><span class=\"line\">      // ...</span><br><span class=\"line\">      sendResponse(&#123;farewell: &quot;激活成功&quot;&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"> // 主动发送消息</span><br><span class=\"line\"> chrome.runtime.sendMessage(&#123;greeting: &quot;hello&quot;&#125;, function(response) &#123;</span><br><span class=\"line\">   console.log(response, document.body);</span><br><span class=\"line\">   // document.body.style.backgroundColor=&quot;orange&quot;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>有关消息的长连接,在谷歌官网也写的很清楚:</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-8064fff68ca7ab8e0d40631b6b7155fd_720w.jpg\" alt=\"https://pic2.zhimg.com/80/v2-8064fff68ca7ab8e0d40631b6b7155fd_720w.jpg\"></p>\n<p>我们可以采用如下方式进行长连接:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// content_script.js</span><br><span class=\"line\">var port = chrome.runtime.connect(&#123;name: &quot;徐小夕&quot;&#125;);</span><br><span class=\"line\">port.postMessage(&#123;Ling: &quot;你好&quot;&#125;);</span><br><span class=\"line\">port.onMessage.addListener(function(msg) &#123;</span><br><span class=\"line\">  if (msg.question == &quot;你是做什么滴?&quot;)</span><br><span class=\"line\">    port.postMessage(&#123;answer: &quot;搬砖&quot;&#125;);</span><br><span class=\"line\">  else if (msg.question == &quot;搬砖有钱吗?&quot;)</span><br><span class=\"line\">    port.postMessage(&#123;answer: &quot;木有&quot;&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// popup.js</span><br><span class=\"line\">chrome.runtime.onConnect.addListener(function(port) &#123;</span><br><span class=\"line\">  port.onMessage.addListener(function(msg) &#123;</span><br><span class=\"line\">    if (msg.Ling == &quot;你好&quot;)</span><br><span class=\"line\">      port.postMessage(&#123;question: &quot;你是做什么滴?&quot;&#125;);</span><br><span class=\"line\">    else if (msg.answer == &quot;搬砖&quot;)</span><br><span class=\"line\">      port.postMessage(&#123;question: &quot;搬砖有钱吗?&quot;&#125;);</span><br><span class=\"line\">    else if (msg.answer == &quot;木有&quot;)</span><br><span class=\"line\">      port.postMessage(&#123;question: &quot;太难了.&quot;&#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-数据存储\"><a href=\"#4-数据存储\" class=\"headerlink\" title=\"4.数据存储\"></a><strong>4.数据存储</strong></h2><p>chrome.storage用来针对插件全局进行数据存储,我们在任何一个页面(popup或content_script或background)下存储了数据,我们在以上三个页面都可以获取到, 具体用法如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取数据</span><br><span class=\"line\">chrome.storage.sync.get(&#x27;imgArr&#x27;, function(data) &#123;</span><br><span class=\"line\">  console.log(data)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 保存数据</span><br><span class=\"line\">chrome.storage.sync.set(&#123;&#x27;imgArr&#x27;: imgArr&#125;, function() &#123;</span><br><span class=\"line\">    console.log(&#x27;保存成功&#x27;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">// 另一种方式</span><br><span class=\"line\">chrome.storage.local.set(&#123;key: value&#125;, function() &#123;</span><br><span class=\"line\">  console.log(&#x27;Value is set to &#x27; + value);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-应用场景\"><a href=\"#5-应用场景\" class=\"headerlink\" title=\"5.应用场景\"></a><strong>5.应用场景</strong></h2><p>谷歌浏览器的插件应用场景很多,正如文章开头的思维导图中写的.以下是笔者总结的一些应用场景，大家感兴趣可以尝试去实现：</p>\n<ul>\n<li>谷歌浏览器自定义桌面</li>\n<li>网页性能分析工具</li>\n<li>网页爬虫</li>\n<li>埋点工具</li>\n<li>网页热力图生成工具</li>\n<li>安全拦截插件</li>\n<li>广告过滤插件</li>\n<li>网站动态换肤</li>\n<li>第三方数据导入</li>\n<li>代码格式化工具</li>\n<li>在线协作工具</li>\n<li>防作弊插件</li>\n</ul>\n<p>还有很多实用工具可以开发，大家可以好好把玩。接下来就来通过实现一个网页图片提取插件，来总结以下浏览器插件开发流程。</p>\n<h2 id=\"6-开发一款抓取网站图片资源的浏览器插件\"><a href=\"#6-开发一款抓取网站图片资源的浏览器插件\" class=\"headerlink\" title=\"6.开发一款抓取网站图片资源的浏览器插件\"></a>6.开发一款抓取网站图片资源的浏览器插件</h2><p>首先还是按照笔者的风格，在开发任何一种工具之前都要明确需求，所以我们来看看该插件的功能点：</p>\n<ul>\n<li>能植入网页按钮，通过点击按钮捕获网页图片</li>\n<li>能在用户端展示捕获的图片</li>\n<li>点击插件能预览捕获的图片</li>\n</ul>\n<p>基本上就这几个功能，接下来我会展示核心代码，在介绍代码之前我们先预览一下插件的实现效果：</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-0c79ea16b92fb0619cd70248a8090462_720w.jpg\" alt=\"https://pic3.zhimg.com/80/v2-0c79ea16b92fb0619cd70248a8090462_720w.jpg\"></p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-ecee95b625f566a9595d73d55768c211_720w.jpg\" alt=\"https://pic2.zhimg.com/80/v2-ecee95b625f566a9595d73d55768c211_720w.jpg\"></p>\n<p>插件目录结构如下：</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-79f003a0e9a21ec8566a37a3a4820e50_720w.jpg\" alt=\"https://pic1.zhimg.com/80/v2-79f003a0e9a21ec8566a37a3a4820e50_720w.jpg\"></p>\n<p>因为插件的开发比较简单，所以我直接用jquery开发。这里我们主要关注popup.js和content_script.js, popup.js中主要用来获取从content_script页传过来的图片数据，并展示在popup.html中，另外又一个需要注意的是当页面没有注入生成按钮时，popupu需要发送信息给content页面，主动让其生成按钮，代码如下：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.storage.sync.get(<span class=\"string\">&#x27;imgArr&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  data.imgArr &amp;&amp; data.imgArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> imgWrap = $(<span class=\"string\">&quot;&lt;div class=&#x27;img-box&#x27;&gt;&lt;/div&gt;&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = $(<span class=\"string\">&quot;&lt;img src=&#x27;&quot;</span> + item + <span class=\"string\">&quot;&#x27; alt=&#x27;&quot;</span> + item + <span class=\"string\">&quot;&#x27; /&gt;&quot;</span>)</span><br><span class=\"line\">    imgWrap.append(img);</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#content&#x27;</span>).append(imgWrap);</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;.empty&#x27;</span>).hide();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#activeBtn&#x27;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">  chrome.tabs.query(&#123;<span class=\"attr\">active</span>: <span class=\"literal\">true</span>, <span class=\"attr\">currentWindow</span>: <span class=\"literal\">true</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tabs</span>) </span>&#123;</span><br><span class=\"line\">    chrome.tabs.sendMessage(tabs[<span class=\"number\">0</span>].id, <span class=\"string\">&quot;activeBtn&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(response);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>对于content页面，我们需要实现的是动态生成按钮，并且在页面中植入弹窗来展示获取到的图片，另一方面需要将图片数据传递给storage，以便popup页面可以获取图片数据。</p>\n<p>由于页面比较简单，笔者就不用过多的第三方库了，笔者先简单手写一个modal组件，代码如下：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 弹窗</span></span><br><span class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Modal</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> modal;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">this</span> <span class=\"keyword\">instanceof</span> Modal) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">opt</span>) </span>&#123;</span><br><span class=\"line\">      modal = $(<span class=\"string\">&quot;&lt;div class=&#x27;modal&#x27;&gt;&lt;/div&gt;&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> title = $(<span class=\"string\">&quot;&lt;div class=&#x27;modal-title&#x27;&gt;&quot;</span> + opt.title + <span class=\"string\">&quot;&lt;/div&gt;&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> close_btn = $(<span class=\"string\">&quot;&lt;span class=&#x27;modal-close-btn&#x27;&gt;X&lt;/span&gt;&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> content = $(<span class=\"string\">&quot;&lt;div class=&#x27;modal-content&#x27;&gt;&lt;/div&gt;&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> mask = $(<span class=\"string\">&quot;&lt;div class=&#x27;modal-mask&#x27;&gt;&lt;/div&gt;&quot;</span>);</span><br><span class=\"line\">      close_btn.click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        modal.hide()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      title.append(close_btn);</span><br><span class=\"line\">      content.append(title);</span><br><span class=\"line\">      content.append(opt.content);</span><br><span class=\"line\">      modal.append(content);</span><br><span class=\"line\">      modal.append(mask);</span><br><span class=\"line\">      $(<span class=\"string\">&#x27;body&#x27;</span>).append(modal);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.show = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">opt</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(modal) &#123;</span><br><span class=\"line\">        modal.show();</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\">          title: opt.title || <span class=\"string\">&#x27;标题&#x27;</span>,</span><br><span class=\"line\">          content: opt.content || <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.init(options)</span><br><span class=\"line\">        modal.show();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.hide = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      modal.hide();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.Modal = <span class=\"keyword\">new</span> Modal()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p><strong>第一步，我们先批量获取页面图片数据：</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> imgArr = []</span><br><span class=\"line\">$(<span class=\"string\">&#x27;img&#x27;</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> src = $(<span class=\"built_in\">this</span>).attr(<span class=\"string\">&#x27;src&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> realSrc = <span class=\"regexp\">/^(http|https)/</span>.test(src) ? src : location.protocol+ <span class=\"string\">&#x27;//&#x27;</span> + location.host + src;</span><br><span class=\"line\">  imgArr.push(realSrc)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>因为图片的src路径可能是相对地址，所以笔者在这里用正则简单处理以下，当然我们可以进行更细粒度的控制。</p>\n<p><strong>第二步，将图片数据存储到storage中：</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.storage.sync.set(&#123;<span class=\"string\">&#x27;imgArr&#x27;</span>: imgArr&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;保存成功&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>第三步，生成预览图片的弹窗，这里用笔者上面实现的modal组件</strong>：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Modal.show(&#123;</span><br><span class=\"line\">  title: <span class=\"string\">&#x27;提取结果&#x27;</span>,</span><br><span class=\"line\">  content: imgBox</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>第四步，当popup发送激活按钮的通知时，我们要在网页中动态插入生成按钮：</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.runtime.onMessage.addListener(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">message, sender, sendResponse</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (message == <span class=\"string\">&quot;activeBtn&quot;</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!$(<span class=\"string\">&#x27;.crawl-btn&#x27;</span>)) &#123;</span><br><span class=\"line\">        $(<span class=\"string\">&#x27;body&#x27;</span>).append(<span class=\"string\">&quot;&lt;div class=&#x27;crawl-btn&#x27;&gt;提取&lt;/div&gt;&quot;</span>)</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        $(<span class=\"string\">&#x27;.crawl-btn&#x27;</span>).css(<span class=\"string\">&quot;background-color&quot;</span>,<span class=\"string\">&quot;orange&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          $(<span class=\"string\">&#x27;.crawl-btn&#x27;</span>).css(<span class=\"string\">&quot;background-color&quot;</span>,<span class=\"string\">&quot;#06c&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      sendResponse(&#123;<span class=\"attr\">farewell</span>: <span class=\"string\">&quot;激活成功&quot;</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n<p>setTimeout那段纯属是为了吸引用户视线，当然我们可以用更优雅的方式来处理。插件核心代码主要是这些，当然还有很多细节要考虑，我把配置文件和一些细节放到github了，如果感兴趣的朋友可以安装感受一下。</p>\n<p>github地址：<a href=\"https://github.com/MrXujiang/fetchImg\">https://github.com/MrXujiang/fetchImg</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-概览\"><a href=\"#1-概览\" class=\"headerlink\" title=\"1. 概览:\"></a>1. 概览:</h1><p><img src=\"Untitled.png\" alt=\"Untitled.png\"></p>\n<h1 id=\"2-入门\"><a href=\"#2-入门\" class=\"headerlink\" title=\"2. 入门\"></a>2. <strong>入门</strong></h1><p>首先我们看看的浏览器插件的定义:</p>\n<p>浏览器插件是基于Web技术（例如HTML，JavaScript和CSS）构建的可以定制浏览体验的小型软件程序。它们使用户可以根据个人需要或偏好来定制Chrome功能和行为。</p>\n<p>要想开发一款浏览器插件,我们只需要有一个manifest.json文件即可, 为了快速上手浏览器插件开发,我们需要把浏览器开发者工具打开, 具体步骤如下:</p>\n<ol>\n<li><strong>在谷歌浏览器中输入chrome://extensions/</strong></li>\n<li><strong>将开发者模式启动</strong></li>\n</ol>\n<p><img src=\"https://pic3.zhimg.com/80/v2-a557be3300d7012d25f89d00038b7e22_720w.jpg\" alt=\"https://pic3.zhimg.com/80/v2-a557be3300d7012d25f89d00038b7e22_720w.jpg\"></p>\n<h2 id=\"2-1-导入自己的浏览器插件包\"><a href=\"#2-1-导入自己的浏览器插件包\" class=\"headerlink\" title=\"2.1 导入自己的浏览器插件包\"></a>2.1 <strong>导入自己的浏览器插件包</strong></h2><p>通过以上三个步骤我们就可以开启浏览器插件开发之旅了.浏览器插件一般放在浏览器地址栏右侧,我们可以在manifest.json文件配置插件的icon,并配置一定的规则,就能看到我们的浏览器插件图标了,如下图:</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-023f0963017950f69fee85bfaf35bd3b_720w.jpg\" alt=\"https://pic4.zhimg.com/80/v2-023f0963017950f69fee85bfaf35bd3b_720w.jpg\"></p>\n<p>下面我们来具体讲解一下浏览器插件开发的核心概念.</p>\n<h2 id=\"2-2-核心知识点\"><a href=\"#2-2-核心知识点\" class=\"headerlink\" title=\"2.2 核心知识点\"></a>2.2 <strong>核心知识点</strong></h2><p>浏览器插件一般涉及以下几个核心文件:</p>\n<ul>\n<li><strong>manifest.json</strong> 用来配置所有和插件相关的配置(必须放在根目录)</li>\n<li><strong>background.js</strong> 后台脚本(后台页面),生命周期和浏览器一致,一般放置全局代码</li>\n<li><strong>content-scripts</strong> 插件向页面注入脚本的一种形式,我们可以通过content-scripts向页面注入js和css资源,并可控制允许注入的范围</li>\n<li><strong>popup</strong> 点击插件图标后打开的自定义窗口, 用来处理用户交互</li>\n</ul>\n<p>笔者画了一张简图来大致表示一下它们之间的关系:</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-bcebb2fc6d562fefac9de971f6e0ee9f_720w.jpg\" alt=\"https://pic4.zhimg.com/80/v2-bcebb2fc6d562fefac9de971f6e0ee9f_720w.jpg\"></p>\n<p>接下来我们来具体了解一下一上几个核心知识点.</p>\n<h3 id=\"2-2-1-manifest-json\"><a href=\"#2-2-1-manifest-json\" class=\"headerlink\" title=\"2**.2.1 manifest.json**\"></a>2**.2.1 manifest.json**</h3><p>谷歌官网简单的配置,如下:</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;My Extension&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;version&quot;</span>: <span class=\"string\">&quot;2.1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;description&quot;</span>: <span class=\"string\">&quot;Gets information from Google.&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;icons&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;128&quot;</span>: <span class=\"string\">&quot;icon_16.png&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;128&quot;</span>: <span class=\"string\">&quot;icon_32.png&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;128&quot;</span>: <span class=\"string\">&quot;icon_48.png&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;128&quot;</span>: <span class=\"string\">&quot;icon_128.png&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;background&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;persistent&quot;</span>: false,</span><br><span class=\"line\">      <span class=\"string\">&quot;scripts&quot;</span>: [<span class=\"string\">&quot;background_script.js&quot;</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;permissions&quot;</span>: [<span class=\"string\">&quot;https://*.google.com/&quot;</span>, <span class=\"string\">&quot;activeTab&quot;</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;browser_action&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;default_icon&quot;</span>: <span class=\"string\">&quot;icon_16.png&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;default_popup&quot;</span>: <span class=\"string\">&quot;popup.html&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>各字段含义介绍如下:</p>\n<ul>\n<li><strong>name</strong> 浏览器插件名称, 将会在插件列表中显示</li>\n<li><strong>description</strong> 浏览器插件简介, 方便告诉开发者插件的功能和作用, 将会在插件列表中显示</li>\n<li><strong>version</strong> 浏览器插件版本</li>\n<li><strong>icon</strong> 浏览器插件图标</li>\n</ul>\n<p><img src=\"Untitled%201.png\" alt=\"Untitled%201.png\"></p>\n<ul>\n<li><strong>background</strong> 背景页的脚本路径,一般为插件目录的相对地址</li>\n<li><strong>permissions</strong> 允许使用的浏览器API的权限,比如contextMenus(右键菜单), tabs(操作标签), webRequest(使用web请求), storage(允许使用本地存储), “**http://**”(可以通过executeScript或者insertCSS访问的网站)</li>\n<li><strong>browser_action</strong> 浏览器右上角图标设置(包括popup页面, 鼠标悬停时的标题, icon等)</li>\n<li><strong>content_scripts</strong> 需要直接注入页面的javascript脚本</li>\n<li><strong>web_accessible_resources</strong> 普通页面能够直接访问的插件资源列表，如果不设置是无法直接访问的</li>\n<li><strong>chrome_url_overrides</strong> 覆盖浏览器默认页面(经常用来做浏览器的自定义桌面)</li>\n<li><strong>omnibox</strong> 向地址栏注册一个关键字以提供搜索建议，只能设置一个关键字(多用于自定义搜索拦截)</li>\n<li><strong>default_locale</strong> 默认语言(比如”zh_CN”)</li>\n</ul>\n<h3 id=\"2-2-2-background-js\"><a href=\"#2-2-2-background-js\" class=\"headerlink\" title=\"2**.2.2 background.js**\"></a>2**.2.2 background.js**</h3><p>background页面主要用来提供一些全局配置, 事件监听, 业务转发等.举几个常用案例:</p>\n<p><strong>1.定义右键菜单</strong></p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// background.js</span><br><span class=\"line\">const systems = &#123;</span><br><span class=\"line\">  a: <span class=\"string\">&#x27;趣谈前端&#x27;</span>,</span><br><span class=\"line\">  b: <span class=\"string\">&#x27;掘金&#x27;</span>,</span><br><span class=\"line\">  c: <span class=\"string\">&#x27;微信&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">chrome.runtime.onInstalled.addListener(function() &#123;</span><br><span class=\"line\">  // 上下文菜单</span><br><span class=\"line\">  for (let key of Object.keys(systems)) &#123;</span><br><span class=\"line\">    chrome.contextMenus.create(&#123;</span><br><span class=\"line\">      id: key,</span><br><span class=\"line\">      title: systems[key],</span><br><span class=\"line\">      type: <span class=\"string\">&#x27;normal&#x27;</span>,</span><br><span class=\"line\">      contexts: [<span class=\"string\">&#x27;selection&#x27;</span>],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// manifest.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;permissions&quot;</span>: [<span class=\"string\">&quot;contextMenus&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果如下:</p>\n<p><img src=\"Untitled%202.png\" alt=\"Untitled%202.png\"></p>\n<p><strong>2.设置只有.com后缀的页面才会激活插件</strong></p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.runtime.onInstalled.addListener(function() &#123;</span><br><span class=\"line\">  // 类似于什么时候激活浏览器插件图标这种感觉</span><br><span class=\"line\">  chrome.declarativeContent.onPageChanged.removeRules(undefined, function() &#123;</span><br><span class=\"line\">    chrome.declarativeContent.onPageChanged.addRules([&#123;</span><br><span class=\"line\">      conditions: [new chrome.declarativeContent.PageStateMatcher(&#123;</span><br><span class=\"line\">        pageUrl: &#123;hostSuffix: <span class=\"string\">&#x27;.com&#x27;</span>&#125;,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      actions: [new chrome.declarativeContent.ShowPageAction()]</span><br><span class=\"line\">    &#125;]);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如下图所示,当页面地址的后缀不等于.com时,插件icon将不被激活:</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-e71bb0259baff0138a3ed613d3636342_720w.jpg\" alt=\"https://pic3.zhimg.com/80/v2-e71bb0259baff0138a3ed613d3636342_720w.jpg\"></p>\n<p><strong>3.和content_script或者popup页面进行消息通信</strong></p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.runtime.onMessage.addListener(</span><br><span class=\"line\">\tfunction(request, sender, sendResponse) &#123;</span><br><span class=\"line\">\t  console.log(sender.tab ?</span><br><span class=\"line\">\t              <span class=\"string\">&quot;from a content script:&quot;</span> + sender.tab.url :</span><br><span class=\"line\">\t              <span class=\"string\">&quot;from the extension&quot;</span>);</span><br><span class=\"line\">\t  if (request.greeting == <span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">\t    sendResponse(&#123;farewell: <span class=\"string\">&quot;goodbye&quot;</span>&#125;);</span><br><span class=\"line\">\t&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-3-content-scripts\"><a href=\"#2-2-3-content-scripts\" class=\"headerlink\" title=\"2.2.3 content-scripts\"></a>2.<strong>2.3 content-scripts</strong></h3><p>内容脚本一般植入会被植入到页面中, 并且可以控制页面中的dom. 我们可以利用它实现屏蔽网页广告, 定制页面皮肤等操作. 在manifest.json中的基本配置如下:</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;content_scripts&quot;</span>: [&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;matches&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;http://*/*&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;https://*/*&quot;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&quot;js&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;lib/jquery3.4.min.js&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;content_script.js&quot;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&quot;css&quot;</span>: [<span class=\"string\">&quot;base.css&quot;</span>]</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码中我们定义了content_scripts允许注入的页面范围, 插入页面的js以及css, 这样我们就能轻松改变某一个页面的样式.比如我们可以在页面中注入一个按钮:</p>\n<p><img src=\"Untitled%203.png\" alt=\"Untitled%203.png\"></p>\n<p>后面的浏览器插件案例中会详细介绍content_scripts的用法.</p>\n<h3 id=\"2-2-4-popup\"><a href=\"#2-2-4-popup\" class=\"headerlink\" title=\"2.2.4 popup\"></a><strong>2.2.4 popup</strong></h3><p>popup是用户点击插件图标时打开的一个小窗口，当失去焦点后窗口就立即关闭，我们一般用它来处理一些简单的用户交互和插件说明。</p>\n<p>由于popup窗口也是一个网页,所以我们一般会建立一个popup.html和popup.js用来控制popup的页面展示和交互.我们在manifest.json中配置如下:</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;page_action&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;default_title&quot;</span>: <span class=\"string\">&quot;小夕图片提取插件&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;default_popup&quot;</span>: <span class=\"string\">&quot;popup.html&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里要注意一点的是,我们在popup.html中不能直接使用script脚本,需要用引入脚本文件的方式.如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>在线图片提取工具<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;Content-Type&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pop-wrap&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;lib/jquery3.4.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;popup.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>以下是笔者写的一个插件的popup页面:</p>\n<p><img src=\"Untitled%204.png\" alt=\"Untitled%204.png\"></p>\n<h2 id=\"2-3-通信机制\"><a href=\"#2-3-通信机制\" class=\"headerlink\" title=\"2.3.通信机制\"></a>2.3.通信机制</h2><p>对于一个相对复杂的浏览器插件来说,我们不仅仅只操作dom或者提供基本的功能就行了,我们还需要向第三方或者自己的服务器抓取有用的页面数据,这个时候就需要用到插件的通信机制了.</p>\n<p>因为content_script脚本存在于当前页面,受同源策略影响,导致我们无法将捕获到的数据传给第三方平台或者自己的服务器, 所以我们需要基于浏览器的通信API.一下是谷歌浏览器插件的通信流程:</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-5a05979498bf90fe0443290623e1c8cd_720w.jpg\" alt=\"https://pic2.zhimg.com/80/v2-5a05979498bf90fe0443290623e1c8cd_720w.jpg\"></p>\n<h3 id=\"2-3-1-popup和background相互通信\"><a href=\"#2-3-1-popup和background相互通信\" class=\"headerlink\" title=\"2.3.1 popup和background相互通信\"></a>2.<strong>3.1 popup和background相互通信</strong></h3><p>由官方文档可知popup可以直接访问background页的方法,所以popup可以直接与其通信:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// background.js</span><br><span class=\"line\">var getData = (data) =&gt; &#123; console.log(&#x27;拿到数据:&#x27; + data) &#125;</span><br><span class=\"line\">// popup.js</span><br><span class=\"line\">let bgObj = chrome.extension.getBackgroundPage();</span><br><span class=\"line\">bgObj.getData(); // 访问bg的函数</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-2-popup或者background页和content-script通信\"><a href=\"#2-3-2-popup或者background页和content-script通信\" class=\"headerlink\" title=\"2.3.2 popup或者background页和content_script通信\"></a>2.<strong>3.2 popup或者background页和content_script通信</strong></h3><p>这里我们使用chrome的tabs API,如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// popup.js</span><br><span class=\"line\">// 发送消息给content_script</span><br><span class=\"line\">chrome.tabs.query(&#123;active: true, currentWindow: true&#125;, function(tabs) &#123;</span><br><span class=\"line\">    chrome.tabs.sendMessage(tabs[0].id, &quot;activeBtn&quot;, function(response) &#123;</span><br><span class=\"line\">      console.log(response);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">// 接收消息</span><br><span class=\"line\">chrome.runtime.onMessage.addListener(</span><br><span class=\"line\">  function(request, sender, sendResponse) &#123;</span><br><span class=\"line\">    console.log(sender.tab ?</span><br><span class=\"line\">                &quot;from a content script:&quot; + sender.tab.url :</span><br><span class=\"line\">                &quot;from the extension&quot;);</span><br><span class=\"line\">    if (request.greeting == &quot;hello&quot;)</span><br><span class=\"line\">      sendResponse(&#123;farewell: &quot;goodbye&quot;&#125;);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>content_script接收和发送消息:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 接收消息</span><br><span class=\"line\">chrome.runtime.onMessage.addListener(</span><br><span class=\"line\">  function(message, sender, sendResponse) &#123;</span><br><span class=\"line\">    if (message == &quot;activeBtn&quot;)&#123;</span><br><span class=\"line\">      // ...</span><br><span class=\"line\">      sendResponse(&#123;farewell: &quot;激活成功&quot;&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"> // 主动发送消息</span><br><span class=\"line\"> chrome.runtime.sendMessage(&#123;greeting: &quot;hello&quot;&#125;, function(response) &#123;</span><br><span class=\"line\">   console.log(response, document.body);</span><br><span class=\"line\">   // document.body.style.backgroundColor=&quot;orange&quot;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>有关消息的长连接,在谷歌官网也写的很清楚:</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-8064fff68ca7ab8e0d40631b6b7155fd_720w.jpg\" alt=\"https://pic2.zhimg.com/80/v2-8064fff68ca7ab8e0d40631b6b7155fd_720w.jpg\"></p>\n<p>我们可以采用如下方式进行长连接:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// content_script.js</span><br><span class=\"line\">var port = chrome.runtime.connect(&#123;name: &quot;徐小夕&quot;&#125;);</span><br><span class=\"line\">port.postMessage(&#123;Ling: &quot;你好&quot;&#125;);</span><br><span class=\"line\">port.onMessage.addListener(function(msg) &#123;</span><br><span class=\"line\">  if (msg.question == &quot;你是做什么滴?&quot;)</span><br><span class=\"line\">    port.postMessage(&#123;answer: &quot;搬砖&quot;&#125;);</span><br><span class=\"line\">  else if (msg.question == &quot;搬砖有钱吗?&quot;)</span><br><span class=\"line\">    port.postMessage(&#123;answer: &quot;木有&quot;&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// popup.js</span><br><span class=\"line\">chrome.runtime.onConnect.addListener(function(port) &#123;</span><br><span class=\"line\">  port.onMessage.addListener(function(msg) &#123;</span><br><span class=\"line\">    if (msg.Ling == &quot;你好&quot;)</span><br><span class=\"line\">      port.postMessage(&#123;question: &quot;你是做什么滴?&quot;&#125;);</span><br><span class=\"line\">    else if (msg.answer == &quot;搬砖&quot;)</span><br><span class=\"line\">      port.postMessage(&#123;question: &quot;搬砖有钱吗?&quot;&#125;);</span><br><span class=\"line\">    else if (msg.answer == &quot;木有&quot;)</span><br><span class=\"line\">      port.postMessage(&#123;question: &quot;太难了.&quot;&#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-数据存储\"><a href=\"#4-数据存储\" class=\"headerlink\" title=\"4.数据存储\"></a><strong>4.数据存储</strong></h2><p>chrome.storage用来针对插件全局进行数据存储,我们在任何一个页面(popup或content_script或background)下存储了数据,我们在以上三个页面都可以获取到, 具体用法如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取数据</span><br><span class=\"line\">chrome.storage.sync.get(&#x27;imgArr&#x27;, function(data) &#123;</span><br><span class=\"line\">  console.log(data)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 保存数据</span><br><span class=\"line\">chrome.storage.sync.set(&#123;&#x27;imgArr&#x27;: imgArr&#125;, function() &#123;</span><br><span class=\"line\">    console.log(&#x27;保存成功&#x27;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">// 另一种方式</span><br><span class=\"line\">chrome.storage.local.set(&#123;key: value&#125;, function() &#123;</span><br><span class=\"line\">  console.log(&#x27;Value is set to &#x27; + value);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-应用场景\"><a href=\"#5-应用场景\" class=\"headerlink\" title=\"5.应用场景\"></a><strong>5.应用场景</strong></h2><p>谷歌浏览器的插件应用场景很多,正如文章开头的思维导图中写的.以下是笔者总结的一些应用场景，大家感兴趣可以尝试去实现：</p>\n<ul>\n<li>谷歌浏览器自定义桌面</li>\n<li>网页性能分析工具</li>\n<li>网页爬虫</li>\n<li>埋点工具</li>\n<li>网页热力图生成工具</li>\n<li>安全拦截插件</li>\n<li>广告过滤插件</li>\n<li>网站动态换肤</li>\n<li>第三方数据导入</li>\n<li>代码格式化工具</li>\n<li>在线协作工具</li>\n<li>防作弊插件</li>\n</ul>\n<p>还有很多实用工具可以开发，大家可以好好把玩。接下来就来通过实现一个网页图片提取插件，来总结以下浏览器插件开发流程。</p>\n<h2 id=\"6-开发一款抓取网站图片资源的浏览器插件\"><a href=\"#6-开发一款抓取网站图片资源的浏览器插件\" class=\"headerlink\" title=\"6.开发一款抓取网站图片资源的浏览器插件\"></a>6.开发一款抓取网站图片资源的浏览器插件</h2><p>首先还是按照笔者的风格，在开发任何一种工具之前都要明确需求，所以我们来看看该插件的功能点：</p>\n<ul>\n<li>能植入网页按钮，通过点击按钮捕获网页图片</li>\n<li>能在用户端展示捕获的图片</li>\n<li>点击插件能预览捕获的图片</li>\n</ul>\n<p>基本上就这几个功能，接下来我会展示核心代码，在介绍代码之前我们先预览一下插件的实现效果：</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-0c79ea16b92fb0619cd70248a8090462_720w.jpg\" alt=\"https://pic3.zhimg.com/80/v2-0c79ea16b92fb0619cd70248a8090462_720w.jpg\"></p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-ecee95b625f566a9595d73d55768c211_720w.jpg\" alt=\"https://pic2.zhimg.com/80/v2-ecee95b625f566a9595d73d55768c211_720w.jpg\"></p>\n<p>插件目录结构如下：</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-79f003a0e9a21ec8566a37a3a4820e50_720w.jpg\" alt=\"https://pic1.zhimg.com/80/v2-79f003a0e9a21ec8566a37a3a4820e50_720w.jpg\"></p>\n<p>因为插件的开发比较简单，所以我直接用jquery开发。这里我们主要关注popup.js和content_script.js, popup.js中主要用来获取从content_script页传过来的图片数据，并展示在popup.html中，另外又一个需要注意的是当页面没有注入生成按钮时，popupu需要发送信息给content页面，主动让其生成按钮，代码如下：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.storage.sync.get(<span class=\"string\">&#x27;imgArr&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  data.imgArr &amp;&amp; data.imgArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> imgWrap = $(<span class=\"string\">&quot;&lt;div class=&#x27;img-box&#x27;&gt;&lt;/div&gt;&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = $(<span class=\"string\">&quot;&lt;img src=&#x27;&quot;</span> + item + <span class=\"string\">&quot;&#x27; alt=&#x27;&quot;</span> + item + <span class=\"string\">&quot;&#x27; /&gt;&quot;</span>)</span><br><span class=\"line\">    imgWrap.append(img);</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#content&#x27;</span>).append(imgWrap);</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;.empty&#x27;</span>).hide();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#activeBtn&#x27;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">  chrome.tabs.query(&#123;<span class=\"attr\">active</span>: <span class=\"literal\">true</span>, <span class=\"attr\">currentWindow</span>: <span class=\"literal\">true</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tabs</span>) </span>&#123;</span><br><span class=\"line\">    chrome.tabs.sendMessage(tabs[<span class=\"number\">0</span>].id, <span class=\"string\">&quot;activeBtn&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(response);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>对于content页面，我们需要实现的是动态生成按钮，并且在页面中植入弹窗来展示获取到的图片，另一方面需要将图片数据传递给storage，以便popup页面可以获取图片数据。</p>\n<p>由于页面比较简单，笔者就不用过多的第三方库了，笔者先简单手写一个modal组件，代码如下：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 弹窗</span></span><br><span class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Modal</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> modal;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">this</span> <span class=\"keyword\">instanceof</span> Modal) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">opt</span>) </span>&#123;</span><br><span class=\"line\">      modal = $(<span class=\"string\">&quot;&lt;div class=&#x27;modal&#x27;&gt;&lt;/div&gt;&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> title = $(<span class=\"string\">&quot;&lt;div class=&#x27;modal-title&#x27;&gt;&quot;</span> + opt.title + <span class=\"string\">&quot;&lt;/div&gt;&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> close_btn = $(<span class=\"string\">&quot;&lt;span class=&#x27;modal-close-btn&#x27;&gt;X&lt;/span&gt;&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> content = $(<span class=\"string\">&quot;&lt;div class=&#x27;modal-content&#x27;&gt;&lt;/div&gt;&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> mask = $(<span class=\"string\">&quot;&lt;div class=&#x27;modal-mask&#x27;&gt;&lt;/div&gt;&quot;</span>);</span><br><span class=\"line\">      close_btn.click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        modal.hide()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      title.append(close_btn);</span><br><span class=\"line\">      content.append(title);</span><br><span class=\"line\">      content.append(opt.content);</span><br><span class=\"line\">      modal.append(content);</span><br><span class=\"line\">      modal.append(mask);</span><br><span class=\"line\">      $(<span class=\"string\">&#x27;body&#x27;</span>).append(modal);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.show = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">opt</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(modal) &#123;</span><br><span class=\"line\">        modal.show();</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\">          title: opt.title || <span class=\"string\">&#x27;标题&#x27;</span>,</span><br><span class=\"line\">          content: opt.content || <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.init(options)</span><br><span class=\"line\">        modal.show();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.hide = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      modal.hide();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.Modal = <span class=\"keyword\">new</span> Modal()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p><strong>第一步，我们先批量获取页面图片数据：</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> imgArr = []</span><br><span class=\"line\">$(<span class=\"string\">&#x27;img&#x27;</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> src = $(<span class=\"built_in\">this</span>).attr(<span class=\"string\">&#x27;src&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> realSrc = <span class=\"regexp\">/^(http|https)/</span>.test(src) ? src : location.protocol+ <span class=\"string\">&#x27;//&#x27;</span> + location.host + src;</span><br><span class=\"line\">  imgArr.push(realSrc)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>因为图片的src路径可能是相对地址，所以笔者在这里用正则简单处理以下，当然我们可以进行更细粒度的控制。</p>\n<p><strong>第二步，将图片数据存储到storage中：</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.storage.sync.set(&#123;<span class=\"string\">&#x27;imgArr&#x27;</span>: imgArr&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;保存成功&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>第三步，生成预览图片的弹窗，这里用笔者上面实现的modal组件</strong>：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Modal.show(&#123;</span><br><span class=\"line\">  title: <span class=\"string\">&#x27;提取结果&#x27;</span>,</span><br><span class=\"line\">  content: imgBox</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>第四步，当popup发送激活按钮的通知时，我们要在网页中动态插入生成按钮：</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.runtime.onMessage.addListener(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">message, sender, sendResponse</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (message == <span class=\"string\">&quot;activeBtn&quot;</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!$(<span class=\"string\">&#x27;.crawl-btn&#x27;</span>)) &#123;</span><br><span class=\"line\">        $(<span class=\"string\">&#x27;body&#x27;</span>).append(<span class=\"string\">&quot;&lt;div class=&#x27;crawl-btn&#x27;&gt;提取&lt;/div&gt;&quot;</span>)</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        $(<span class=\"string\">&#x27;.crawl-btn&#x27;</span>).css(<span class=\"string\">&quot;background-color&quot;</span>,<span class=\"string\">&quot;orange&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          $(<span class=\"string\">&#x27;.crawl-btn&#x27;</span>).css(<span class=\"string\">&quot;background-color&quot;</span>,<span class=\"string\">&quot;#06c&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      sendResponse(&#123;<span class=\"attr\">farewell</span>: <span class=\"string\">&quot;激活成功&quot;</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n<p>setTimeout那段纯属是为了吸引用户视线，当然我们可以用更优雅的方式来处理。插件核心代码主要是这些，当然还有很多细节要考虑，我把配置文件和一些细节放到github了，如果感兴趣的朋友可以安装感受一下。</p>\n<p>github地址：<a href=\"https://github.com/MrXujiang/fetchImg\">https://github.com/MrXujiang/fetchImg</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/ChromeExtensions/Untitled 1.png","slug":"Untitled 1.png","post":"ckqlr2i0o0002g8up2vrz9e7r","modified":0,"renderable":0},{"_id":"source/_posts/ChromeExtensions/Untitled 2.png","slug":"Untitled 2.png","post":"ckqlr2i0o0002g8up2vrz9e7r","modified":0,"renderable":0},{"_id":"source/_posts/ChromeExtensions/Untitled 3.png","slug":"Untitled 3.png","post":"ckqlr2i0o0002g8up2vrz9e7r","modified":0,"renderable":0},{"_id":"source/_posts/ChromeExtensions/Untitled 4.png","slug":"Untitled 4.png","post":"ckqlr2i0o0002g8up2vrz9e7r","modified":0,"renderable":0},{"_id":"source/_posts/ChromeExtensions/Untitled.png","slug":"Untitled.png","post":"ckqlr2i0o0002g8up2vrz9e7r","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckqlr2i0o0002g8up2vrz9e7r","category_id":"ckqlr2i0q0003g8upallkctlo","_id":"ckqlr2i0u0006g8upcayl9boi"}],"PostTag":[{"post_id":"ckqlr2i0o0002g8up2vrz9e7r","tag_id":"ckqlr2i0t0004g8up2zice4ru","_id":"ckqlr2i0u0005g8upcsutfu1z"}],"Tag":[{"name":"Chrome Extensions","_id":"ckqlr2i0t0004g8up2zice4ru"}]}}