{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/ChromeExtensions.md","hash":"08f2ce457fb80742fdd09b56698e7463c92e5ef7","modified":1626598002430},{"_id":"source/_posts/Dubbo学习笔记.md","hash":"1ebc522cbc5656a336f36f626cf2441e4eec4be1","modified":1628922104053},{"_id":"source/_posts/Maven学习笔记.md","hash":"669bb50776ad125c247cacaa70c8cdb5c388b66e","modified":1628922389810},{"_id":"source/_posts/learn-typescript.md","hash":"7758b39b30d0938857c3502e491a1e797a5ca6e5","modified":1626598652992},{"_id":"source/tags/index.md","hash":"42306e6989341dee9cab554f6cbea45129bcda61","modified":1626595914271},{"_id":"source/categories/index.md","hash":"0d577994e385a74b5b141aa894abdd7fb019ef48","modified":1626595905608},{"_id":"source/_posts/ChromeExtensions/Untitled 1.png","hash":"c366ae062231cb684c7fed69954cffb33c8eb1d3","modified":1625312399550},{"_id":"source/_posts/ChromeExtensions/Untitled 3.png","hash":"b04a3c1f343a20a22a27b300e3fd93f8594404d8","modified":1625312399552},{"_id":"source/_posts/Dubbo学习笔记/Untitled 1.png","hash":"7befc59749a99948b6f20bfdb73ad59f00a3e9a4","modified":1628892538000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 10.png","hash":"28d00b0663fa87d3d87e7f52bab5f0d42b8b0c28","modified":1628892540000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 2.png","hash":"9a145637147ae02e15c807892f8a555f4f7cc5f6","modified":1628892538000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 23.png","hash":"6f243a2450e06b04237984c3860496a68cb9d867","modified":1628892540000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 9.png","hash":"50958f2162ca9aea7b1c3b96ebffef31523fea79","modified":1628892538000},{"_id":"source/_posts/Dubbo学习笔记/logo.jpeg","hash":"25fa06b5c3e8fe37d7ff21b497b0d0bb58800f54","modified":1628922080648},{"_id":"source/_posts/Maven学习笔记/logo.jpeg","hash":"199493ac659f8ca42247fa55126abf0e111c5fb7","modified":1628922232785},{"_id":"source/_posts/Maven学习笔记/Untitled.png","hash":"96c02d6b6f709fe9f6af03bc90fbe9790deedfb4","modified":1628892498000},{"_id":"source/_posts/Dubbo学习笔记/stub.jpg","hash":"4e3a1322da41d721abdfe3d0293926c1a27ebfc8","modified":1628892540000},{"_id":"source/_posts/learn-typescript/Untitled.png","hash":"532c93921a01387e89d7d211b305eb56ec8b59d8","modified":1628921123985},{"_id":"source/_posts/ChromeExtensions/Untitled 2.png","hash":"1e9ac08f78fbade17df618cbe226ac77b939dc6e","modified":1625312399551},{"_id":"source/_posts/ChromeExtensions/Untitled 4.png","hash":"c626aedfe29b7a78b391bc7195af6e992f7eb2e5","modified":1625312399554},{"_id":"source/_posts/Dubbo学习笔记/Untitled 11.png","hash":"07d2f0bc49d33ed53800a10d9f5462b70514ba8d","modified":1628892540000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 13.png","hash":"6cab4ec9bc6d1b7eb84a7296b6c948cdac88d849","modified":1628892540000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 15.png","hash":"3f896c65421a0459e82574c2a11a63936cd5807d","modified":1628892540000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 14.png","hash":"c7f2ef824575d393fc9daa7e92dfa8fa11210fd4","modified":1628892540000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 16.png","hash":"e5ef349d1040c43e320dad12f4fdaf820ba1d915","modified":1628892540000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 19.png","hash":"2acb1037dfbf4db44c0affa1a9e0799c0efade57","modified":1628892540000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 24.png","hash":"b7ce7dfad7447e957539fac5a9c32ece0a80bc61","modified":1628892540000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 3.png","hash":"d4f71015f06f01ae32900882c9204e47d558d186","modified":1628892538000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 4.png","hash":"b477a0dc1b010800e9b83905843281f201540db5","modified":1628892538000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 6.png","hash":"be3442333a194337f45e1c9f6d07ec23824fb629","modified":1628892538000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 7.png","hash":"b5d509b4f090fbb618e1e7732997a233c1374c42","modified":1628892538000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 12.png","hash":"5def0f3b97d700a842bdb3f506f370c3d3b67392","modified":1628892540000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 22.png","hash":"992b3902afb411050dc32d0c051e675471bfe614","modified":1628892540000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 25.png","hash":"00405b64027d35c6f959a30e40b33f1387d354f6","modified":1628892540000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 5.png","hash":"06814e213aec05ab66a7dada1a7dbd89fb855da6","modified":1628892538000},{"_id":"source/_posts/Dubbo学习笔记/Untitled.png","hash":"11b2629287b91e26f85e87617568e0adcbff4825","modified":1628892538000},{"_id":"source/_posts/Dubbo学习笔记/dubbo-服务暴露.jpg","hash":"394e76e18a043d706e634b5a2b9d22613adee5d9","modified":1628892542000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 8.png","hash":"8d1ff79d71b20cd10dd23ab057b190692018c7a4","modified":1628892538000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 29.png","hash":"dfae34d649b681a2dd6cc0ed98f9d35ea9e84529","modified":1628892542000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 20.png","hash":"f7b00b3fa2616060f6a3f3a3bb5c59c3a90d948a","modified":1628892540000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 46.png","hash":"a76530b3f3dd20765a740f6a4421441e96551048","modified":1628892546000},{"_id":"themes/butterfly/README.md","hash":"0f0eaee9c30ef1e9aed588fbb3e8263401348b55","modified":1625312399565},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1625312399564},{"_id":"themes/butterfly/package.json","hash":"470a7d4685f1b82d79d29a59479e84e0e5727731","modified":1625312399630},{"_id":"themes/butterfly/languages/default.yml","hash":"b9dbdb20bd1f1c7ca8a8f38635bdc4ed8bb1d44c","modified":1625312399568},{"_id":"themes/butterfly/_config.yml","hash":"e053199c20d21a717b66302e51de94613d35bbbc","modified":1626596768958},{"_id":"themes/butterfly/README_CN.md","hash":"70ec43a8aa0776b5a0a2a6b6009dd253fa3679eb","modified":1625312399566},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"46685048a05b419ed9c72cf31bd6e5efef7524f2","modified":1625312399569},{"_id":"themes/butterfly/languages/en.yml","hash":"fd1c1211c8f166d089a7697872185a81182d92e1","modified":1625312399568},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"736bec8eeb3a29d0d43669d81f1fa686e02be18e","modified":1625312399569},{"_id":"themes/butterfly/layout/archive.pug","hash":"2d5bf4b1755f89898c579c18d601be83d2bc8ebd","modified":1625312399570},{"_id":"themes/butterfly/layout/category.pug","hash":"5ac3cd8172088843cec03175c612a9c85f49cf2e","modified":1625312399571},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1625312399628},{"_id":"themes/butterfly/layout/page.pug","hash":"cae76ce64c114fd192b5da5a7d14aa0240df2f06","modified":1625312399629},{"_id":"themes/butterfly/layout/post.pug","hash":"8f2f13c9ae099dd83827ce3dbac5abc8d7d5bde3","modified":1625312399629},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1625312399574},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1625312399630},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"a1ca58fdff74b890cade94479f8f0eb9ce7e5e73","modified":1625312399573},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"2cf69f5c908c74eace3c168b920de09dfadd6b85","modified":1625312399572},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"bff5ed7e56cce3cd540da40d971393fe7e93085c","modified":1625312399574},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"2d62f88f049c907ee2e63ba275b398e87bee98eb","modified":1625312399593},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"66b14189a1913119ff5927c0b933b5c73fb37f48","modified":1625312399592},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"bb1847f45e713cc88b1c0a97035ec01f0209c995","modified":1625312399590},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"f2e1d8a05d2e409c4804f67a98f5f59f527d6627","modified":1625312399584},{"_id":"themes/butterfly/source/css/var.styl","hash":"31198af95fecc6819d3b2cb7ef03988ef67257da","modified":1625312399672},{"_id":"themes/butterfly/source/css/index.styl","hash":"c7924868adcb046b46498626a9223c7a7b3f2e30","modified":1625312399672},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1625312399673},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1625312399674},{"_id":"themes/butterfly/source/js/main.js","hash":"e16689382fc3b4ea20b13f0230a36e21bec63092","modified":1625312399676},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1625312399674},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"4db1170be7a9360e2c5399d281b979da730df2a3","modified":1625312399678},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1625312399631},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1625312399675},{"_id":"themes/butterfly/scripts/events/init.js","hash":"5803aa55d9c21e51ea64c1ae50c9b602979aaee2","modified":1625312399632},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"1e1da036fae593be7e2cc502f0a5cbeb2e7881d1","modified":1625312399632},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"98ef86305b8d2ad9dbab969715e1ac93b407f036","modified":1625312399633},{"_id":"themes/butterfly/source/js/utils.js","hash":"ba7e672a7bed2aefb9174e8122d92a643814272a","modified":1625312399679},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"bd29f20fad3d3fab600940e7a6dc9a803943cb33","modified":1625312399634},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1625312399635},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"87cefb7d6235744a2448e70df9061c1700169ad6","modified":1625312399636},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1625312399635},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"51112d3db07f87034422ff4acc69ca2eb4215b4e","modified":1625312399637},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"eb019da8c190923e759d2fd7cb846281eef8594e","modified":1625312399639},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"7dd77f751f5cc8c4fe30475a52df632dd85ce49a","modified":1625312399636},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"8cb7ef368cc2ac7f4a13c2959908b1574e572acf","modified":1625312399638},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1625312399640},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"7ffbe625f184116e442648c8416ea58614a1cef8","modified":1625312399639},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1625312399640},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"829229b0074b332ba779e159219eb2466612ff6e","modified":1625312399641},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"420ba8b11e7316b4c09eb301d39814bc9bae9f90","modified":1625312399641},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1625312399642},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"903d12250ce70713dd5b8ac7e1f7a20fe15eb815","modified":1625312399576},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"3ca9d9cdfd6e61df1d5b07de40f34349cda7a7c7","modified":1625312399577},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"73c04d62055840545112dd12d73807835ca62347","modified":1625312399577},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"07380718ed3af19a7e64b30e8c13726fe5983947","modified":1625312399575},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1625312399578},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1625312399578},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"d6556d5396eb0e10ea0ec10158779c21dc78f738","modified":1625312399579},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1625312399579},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1625312399580},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"d5747ccfba4861567375d2c7aa0ec6a846a57594","modified":1625312399581},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"4d52000cae1fce333329c382dac6c9a21ad0b195","modified":1625312399582},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"7677911bd3f43edaf8230eea02f60a248eee9934","modified":1625312399583},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"971038debf539333b1687b4a1d87cf4fc965a846","modified":1625312399586},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"419807903e5586b8804b1f8f17cea97bd05f0b17","modified":1625312399582},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1625312399583},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"dcccb1425fabcf12a1bed955518b0e7b1054cab0","modified":1625312399587},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"2e1ab0c2ca59a1ff5a5ba9b6ef60f3e34af5430c","modified":1625312399585},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"3e9c45aa4e97650bb8c19fe7c6c0e096a826f95d","modified":1625312399589},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"95924d28d71b28769963529f82b376a9dc731fad","modified":1625312399588},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"dd8e6813976be64e80eba6562b54e74527ab306d","modified":1625312399585},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"f5ea1e10a169aeb98e42b19ac084c4eb27693b46","modified":1625312399589},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"c762732e200ff2627bc046af5f170b3269343341","modified":1625312399591},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"62dc2e683d56ddc9b588abc44dc1cfb778a2c68f","modified":1625312399590},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"6ec54b77e3a90e148e66e317e5bb6c89624fddca","modified":1625312399591},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"d06dafe7faf3a2e328ef62f26166a51ffe7a5579","modified":1625312399615},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"bee06b3f01fa1f0d8fa08c154234b452da425101","modified":1625312399593},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"897fe61982d503f285028e52de51ab3af8eb9485","modified":1625312399616},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4c3da5a89b4e6fd3ab527f5c6d27790359d57f71","modified":1625312399608},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"2448b243ded58aa1d5fc22fd115e6d06b636f9fd","modified":1625312399616},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"009bdbef23381f10664622fafdc602f2ff5bf1ec","modified":1625312399623},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"4a2ea9fe59f1dc8cb4f4f6a28cf24a40fc300254","modified":1625312399622},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1625312399622},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"67cad32f84414c7b10195d64376c140b878c4ebe","modified":1625312399624},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1625312399623},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1625312399624},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"cabf9ee6a2886e6ede17f224dfbb161a9b1258e7","modified":1625312399625},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"0b5c165664f9f8691551fc5ff435b40e7f73c737","modified":1625312399625},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"9755cac8424dc578e9ec07dbcaa429fddbedd392","modified":1625312399627},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"62adef7998fb9bebc5891a49472cfea944a1bf7a","modified":1625312399627},{"_id":"themes/butterfly/layout/includes/widget/card_self.pug","hash":"8318c7c9a6aef966afba44e283111e7ff0b2f04f","modified":1625312399626},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"471b20e71a19db1f5115727082e5188200c49383","modified":1625312399626},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"8c5b241773597a412dbf3ebaca1f0bf504934a33","modified":1625312399628},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f9de9db2a49ac4d5447660ab159171ac5c228e3c","modified":1625312399643},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"d2b72403dfbe9a49848e8093ba472574a4c62a64","modified":1628923282424},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"a0e5790eb82b8f551f4161b72f1bec29a4e501be","modified":1625312399645},{"_id":"themes/butterfly/source/css/_layout/404.styl","hash":"7730741fa8beb29e3231d397171f312957563e7b","modified":1625312399650},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f27ad7b5d781c98bcac5c12c2d70b69b830e0374","modified":1625312399651},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3f0b8699f529f0842c3b101006f60cb7933c16ff","modified":1625312399649},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"8627055bae0f877482dc53325152beb0a68d8e17","modified":1625312399650},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"8e6c9a2c1881985e4b2ae14ef1bdfdbb1bc83b37","modified":1625312399652},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"f4cba3170834e8caf736bb4f00cba4041495f5e9","modified":1625312399653},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"bfc4b9d8df66593c11c9ae78899f54e69785ca90","modified":1625312399652},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"807f18717c29b5c41de6fc600a69a80ce8b7a19c","modified":1625312399654},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"db7fe645662d87be4f8dfc08e55bbe1a3734bf93","modified":1625312399654},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"a00ad74074513a1c7f6e02977b8fa778beaa2108","modified":1625312399657},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"814729d1d71f4326623a4f34b621bf0421503103","modified":1625312399655},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"8c4e08c8a63dacdfb2a733a0d0035fa97c7f5e9e","modified":1625312399656},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"4ae98e703440b616d2a36da139bda844c94d425e","modified":1625312399656},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"78ef182c0f6711c8491a8ee421b708c8f2a63c30","modified":1625312399657},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"8489722684aa9b4baa38386f4d4b39f4dbd60113","modified":1625312399659},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"257f08063d056bcc9fe385d7913df19b6503d93d","modified":1625312399658},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"190b85de3e686393e45869d12464995f23b304dc","modified":1625312399660},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"89a6cb63a97cc08675319c403e4a89391f6ab401","modified":1625312399659},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"05269a522a7248d9a77569331481cbe18033c774","modified":1625312399662},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"ca1d3a885a85a91fcd6f7b55fca96cafb6a1b0a3","modified":1625312399661},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"ab403bfb1abc12ea5015b123ce412d3177e638d9","modified":1625312399661},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"26e26797b3175498e20b2a8bf1679d3ed9fac5a6","modified":1625312399663},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"0da09b1811a776106ca66c56be6e2a396dca5680","modified":1625312399663},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"a470029a157fbb8406ff72322a75ef63d6675431","modified":1625312399664},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"202b01db6ef3cca9e5a173e1a0dadfee8854a849","modified":1625312399665},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"92aa84cdec97729c86ba4674a355496eb37c986a","modified":1625312399665},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"c3369a14f4111c098d0177036ca57df6deb59d72","modified":1625312399666},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"aa0728c556af75f5d66ecd44fa207722d474c26d","modified":1625312399667},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"6c12a03e26ca5d538537d472657d3d03a7fcbb87","modified":1625312399667},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"56691537c7f06c2cf1ffa1509a328f506d938ee8","modified":1625312399668},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1625312399668},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"8520674768dd0b1837f947892e8402b192a4f9c1","modified":1625312399670},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"c91609b7f431cacecc3718ae2fb7403c55f8267a","modified":1625312399669},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"75a5c15c7029197ec5cffd27f7c5455891c946c9","modified":1625312399669},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1625312399671},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"a19f12257b14f70806a0c3cb0e9df1090f36e919","modified":1625312399677},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"a18415004d03c0a1783eccac522fbcb6ce0ea1f1","modified":1625312399595},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"3234942decaa1fde5b872766d4943a2e8cb9ef72","modified":1625312399678},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"4eebb2d94ca75809ef0cf32d70f13e9bf1e87091","modified":1625312399595},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1625312399594},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"a17f9a832f299d3e43c5eb757d99d34fec1ac932","modified":1625312399597},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"eb2d840fa42de3ec7a7fda0eaa30246d52f543e2","modified":1625312399596},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1625312399598},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1625312399598},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"896dc0b7480151562c5717771e3000c5a7fc1b16","modified":1625312399596},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1625312399599},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1625312399599},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"bb467bb22f3d0775b33f9eacbfc086ecb7831e78","modified":1625312399600},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"d5f81fd5443a1b09efb165b5f4447a35949d14ad","modified":1625312399601},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"50126b2e841b01584b8b65b2f834038e3997b694","modified":1625312399602},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"03a8937c60403252d33bacea947e252e5007eac8","modified":1625312399602},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"e877c98949873a62659db7501d19eb3d66650b51","modified":1625312399605},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1625312399600},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"d97403cdd58c759cfd1752dd85aa4a0f9b73dc46","modified":1625312399604},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1625312399606},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0254203aae73e70b90dfce6ec4f9c9d3be9ac9f8","modified":1625312399604},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"afffc4ac8ce93d39dcc892bd518805cf33531244","modified":1625312399606},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"1fb4bbbe1def54f179173ec7e62b66dc4a49c843","modified":1625312399608},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"1c7e9fe86b7d7ef18cc876dfce19263fd4e73066","modified":1625312399607},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"8290994cf1ee2faff60214ff245cf513fbbe94aa","modified":1625312399607},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1625312399609},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"407d88e4af099d5f1a3f44623ec276c999219ec3","modified":1625312399610},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"6f92311afe60ca5f44055016db9cecce8fb2dc62","modified":1625312399610},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"7935e92db64ca047d94404e5fc390a207e857a87","modified":1625312399613},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"faf1113de12d6db0486572d7e99b03cbd0c4a896","modified":1625312399611},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"70125dc478ae20d5f6b4b908260fdc451d803c6c","modified":1625312399612},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"35278cfc2dbd92457b1e558b20fcd994eb81259c","modified":1625312399612},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"767c38e3dfa0097b0dc1fdfd0df292c16f757d05","modified":1625312399614},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"1c06e60b120c946c1856904848ceba6ab58d1f82","modified":1625312399617},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"a3d43cc360666b5b9730e8bb9e5c8fd940ae5b3d","modified":1625312399614},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"fe7468c1316583ac368d96d6a6095d1a01fe4f18","modified":1625312399615},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"ff3727c3ec698ec61a28c55cbc8c8508f0efb0a0","modified":1625312399618},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1625312399619},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1625312399621},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"fbac21a6c5924fb2f8d1190fd634105fdbc603d4","modified":1625312399620},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"fbcf94ecdca30bed7cfc4f4ec08b200579c2614e","modified":1625312399618},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"7e9a7347dd8ca4c33c564fb62512743b6012bb2d","modified":1625312399621},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"b74c61f6e15b422e9d2df23133552bbd1b5fe513","modified":1625312399646},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"b0916c8c7d15b67b55cb1618be8370870fedbf42","modified":1625312399646},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1625312399647},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"4d71aab9082c67d3ee52ad58dfc3c1c9b41f2ab1","modified":1625312399648},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1625312399648},{"_id":"source/_posts/ChromeExtensions/Untitled.png","hash":"128948df5d378b3d2d7ed68a7150620bb66cc4b1","modified":1625312399558},{"_id":"source/_posts/Dubbo学习笔记/Untitled 18.png","hash":"bcf8c68530a8c51f9e5cf659443ae1e4344a5f11","modified":1628892540000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 28.png","hash":"b3013955613e8545c54e0c9e20edf74b3911e6ba","modified":1628892542000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 17.png","hash":"8732e9322632c194a8959c167290ef2974c20da5","modified":1628892540000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 21.png","hash":"cc77cea00d35118533d4ede40e4546435c285d31","modified":1628892540000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 26.png","hash":"731c2bb8680d7d58670e5f58fd71527d3b5f4fe5","modified":1628892542000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 27.png","hash":"148cdef1fdbb7ea72b041e3a46c4c7b3b2b5ba61","modified":1628892542000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 60.png","hash":"f05b6727508bb4efc61d4b0b7dc5040cb8f3d258","modified":1628892550000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 48.png","hash":"fae8cd6c8214e8c3e717ab7e31ab8609a2f8a164","modified":1628892546000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 44.png","hash":"7323c5aa93a4c80d4162561e7eda437a673d80a5","modified":1628892546000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 55.png","hash":"e06f538d25b0d0d38d16e681eaaf923aa298878a","modified":1628892548000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 32.png","hash":"dcce8e03005c050828f4d2e87cb0102dcdd358ad","modified":1628892544000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 34.png","hash":"566617f6bdc090294c4c1d1ae67b4a5afda5791c","modified":1628892544000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 45.png","hash":"15ebdce81d0bbcb1f861858c9aacf587e9ba5d88","modified":1628892546000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 58.png","hash":"594d720c0df5e04ea1edda0fbdd60a1cc93a20f5","modified":1628892548000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 42.png","hash":"bdbd95abe877a94387573d2ad5346967b8f8bf4c","modified":1628892546000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 47.png","hash":"b4ddc564462b262c0f5264202f8954d6d1521824","modified":1628892546000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 57.png","hash":"23914b84a570846e59fd29c24bae5be7ec5e95e2","modified":1628892548000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 30.png","hash":"d691147bd117fadad419445a4ef2c6f126017087","modified":1628892542000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 31.png","hash":"e68de8549f5c6fb60fcf53719c357eb73eb889b7","modified":1628892542000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 33.png","hash":"08f65809d982b6d93704e337dbba4883a8ca4cb8","modified":1628892544000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 43.png","hash":"f7ab72d27bea9d59a626ddc9697610f76e495357","modified":1628892546000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 49.png","hash":"a4f186f0f39b190f7c6edd5eb0afdb3b5bc782eb","modified":1628892546000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 52.png","hash":"2bc3fa18840f827ef8cd177a6785f6d52b8917c0","modified":1628892548000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 56.png","hash":"1e1df08c03f16cb44b1298adcad67e501d1f80b8","modified":1628892548000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 59.png","hash":"29c2d1816d889fe6b9bdee876fdea7b144c43849","modified":1628892550000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 35.png","hash":"001ea507a9d7e81fd4b742f762b4c70d8281d409","modified":1628892544000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 39.png","hash":"a5315beab08b7219d509d4b6a3541d52b0cf93de","modified":1628892546000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 51.png","hash":"da3557219420470d9330656db91bb44993cbe2c0","modified":1628892548000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 53.png","hash":"d28bff1ef7b28d9f3c506c0c2d131e0c7732681c","modified":1628892548000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 54.png","hash":"60082f8c0df3122416add96e22519f595a34533b","modified":1628892548000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 41.png","hash":"56cf16a791bbe790c00f21f8bf629766a78843e9","modified":1628892546000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 37.png","hash":"1f5ea72c940bcd4bae9d3df43f216d6e7f1ead44","modified":1628892544000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 36.png","hash":"b9f387dc824a678168e3ebc8660b0c3e5a7edc46","modified":1628892544000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 38.png","hash":"57a79ce1cc10c6a58c6ab29196faab9429750ffa","modified":1628892544000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 40.png","hash":"65615e78fa773e4147b0819efa29ec023c4cbf78","modified":1628892546000},{"_id":"source/_posts/Dubbo学习笔记/Untitled 50.png","hash":"eabbe697603f61332c6b557b68ed1bbd0c3ba391","modified":1628892546000},{"_id":"public/tags/index.html","hash":"bc3eed63fa447b22c022af3a37847fd4eebde3da","modified":1628922832463},{"_id":"public/categories/index.html","hash":"ee079df06f2842a12bbe46e782821233f8074f5e","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/index.html","hash":"116f242a3f126a999197586e035c0b2f3745f27f","modified":1628922832463},{"_id":"public/2019/08/13/Maven学习笔记/index.html","hash":"66373ada9a01cd9c18ac2bdf25e906ccccfcc0e0","modified":1628922832463},{"_id":"public/2018/09/15/learn-typescript/index.html","hash":"427ff3b9ee1e376136a35e906cbc6461f288b35e","modified":1628922832463},{"_id":"public/2017/09/15/ChromeExtensions/index.html","hash":"c5b6e84744a05d41966190c425f8e0c164b5aad4","modified":1628922832463},{"_id":"public/archives/index.html","hash":"0b94ce87541f29befce2b96a1f1ffffb10f36820","modified":1628922832463},{"_id":"public/archives/2017/index.html","hash":"066df382acd8fa415768e3b4ee5d2a5b4a7f6d0d","modified":1628922832463},{"_id":"public/archives/2017/09/index.html","hash":"a5062077410a1dc0099d87a31ab2fe66839fac61","modified":1628922832463},{"_id":"public/archives/2018/index.html","hash":"fa996347c6d3053fae43b12019983d96efc264e1","modified":1628922832463},{"_id":"public/archives/2018/09/index.html","hash":"016499094e9494969bd2eb963037138f3d9fefd7","modified":1628922832463},{"_id":"public/archives/2019/index.html","hash":"c1dd644ded5f49d5466a605a213b1809a7ac4b83","modified":1628922832463},{"_id":"public/archives/2019/08/index.html","hash":"c6ebc3800f7a479d0215dc743ad4525ead1f87ba","modified":1628922832463},{"_id":"public/archives/2021/index.html","hash":"3dc8493550ac8ddaffc99fa0c85d0295f9d61f5a","modified":1628922832463},{"_id":"public/archives/2021/08/index.html","hash":"47024443575a85295d66150998e6c00e9c348dfd","modified":1628922832463},{"_id":"public/categories/前端/index.html","hash":"92c9f3513c5a8b9ba82fc4259b21d278f17bafdc","modified":1628922832463},{"_id":"public/categories/插件/index.html","hash":"64d71d88f5b51c777ba32542a25c1a542fe6686c","modified":1628922832463},{"_id":"public/categories/后端/index.html","hash":"45dc642fa6483f3ac44737468ab1deebf8029d5d","modified":1628922832463},{"_id":"public/index.html","hash":"85bbfb3059a8c669064313fcd128b50a3af7d941","modified":1628922832463},{"_id":"public/tags/TypeScript/index.html","hash":"43babe5e3bf0a0d9a01f080e0008a86f55cf0aed","modified":1628922832463},{"_id":"public/tags/浏览器插件/index.html","hash":"6c511096587a5358da84160152f99a8b331383c3","modified":1628922832463},{"_id":"public/tags/Maven/index.html","hash":"95902a87d84df4df5d0a72846ae94cb9fa905385","modified":1628922832463},{"_id":"public/tags/Dubbo/index.html","hash":"feded80701ffd8eea5673bd0f9816e765caecf72","modified":1628922832463},{"_id":"public/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1628922832463},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1628922832463},{"_id":"public/2018/09/15/learn-typescript/Untitled.png","hash":"532c93921a01387e89d7d211b305eb56ec8b59d8","modified":1628922832463},{"_id":"public/2017/09/15/ChromeExtensions/Untitled 1.png","hash":"c366ae062231cb684c7fed69954cffb33c8eb1d3","modified":1628922832463},{"_id":"public/2017/09/15/ChromeExtensions/Untitled 3.png","hash":"b04a3c1f343a20a22a27b300e3fd93f8594404d8","modified":1628922832463},{"_id":"public/2019/08/13/Maven学习笔记/logo.jpeg","hash":"199493ac659f8ca42247fa55126abf0e111c5fb7","modified":1628922832463},{"_id":"public/2019/08/13/Maven学习笔记/Untitled.png","hash":"96c02d6b6f709fe9f6af03bc90fbe9790deedfb4","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/logo.jpeg","hash":"25fa06b5c3e8fe37d7ff21b497b0d0bb58800f54","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 10.png","hash":"28d00b0663fa87d3d87e7f52bab5f0d42b8b0c28","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/stub.jpg","hash":"4e3a1322da41d721abdfe3d0293926c1a27ebfc8","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 1.png","hash":"7befc59749a99948b6f20bfdb73ad59f00a3e9a4","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 2.png","hash":"9a145637147ae02e15c807892f8a555f4f7cc5f6","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 23.png","hash":"6f243a2450e06b04237984c3860496a68cb9d867","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 9.png","hash":"50958f2162ca9aea7b1c3b96ebffef31523fea79","modified":1628922832463},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"284416885e4e80e27fa4eae6fc305f4de15b914c","modified":1628922832463},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1628922832463},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1628922832463},{"_id":"public/2017/09/15/ChromeExtensions/Untitled 2.png","hash":"1e9ac08f78fbade17df618cbe226ac77b939dc6e","modified":1628922832463},{"_id":"public/2017/09/15/ChromeExtensions/Untitled 4.png","hash":"c626aedfe29b7a78b391bc7195af6e992f7eb2e5","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 11.png","hash":"07d2f0bc49d33ed53800a10d9f5462b70514ba8d","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 13.png","hash":"6cab4ec9bc6d1b7eb84a7296b6c948cdac88d849","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 16.png","hash":"e5ef349d1040c43e320dad12f4fdaf820ba1d915","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 14.png","hash":"c7f2ef824575d393fc9daa7e92dfa8fa11210fd4","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 19.png","hash":"2acb1037dfbf4db44c0affa1a9e0799c0efade57","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 15.png","hash":"3f896c65421a0459e82574c2a11a63936cd5807d","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 24.png","hash":"b7ce7dfad7447e957539fac5a9c32ece0a80bc61","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 3.png","hash":"d4f71015f06f01ae32900882c9204e47d558d186","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 4.png","hash":"b477a0dc1b010800e9b83905843281f201540db5","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 6.png","hash":"be3442333a194337f45e1c9f6d07ec23824fb629","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 7.png","hash":"b5d509b4f090fbb618e1e7732997a233c1374c42","modified":1628922832463},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"e56ad6b82caf69066de545201014291fc961635e","modified":1628922832463},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"a3b131a9a47ccc16f4dd8988fabb6d306548db2f","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 12.png","hash":"5def0f3b97d700a842bdb3f506f370c3d3b67392","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 22.png","hash":"992b3902afb411050dc32d0c051e675471bfe614","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 25.png","hash":"00405b64027d35c6f959a30e40b33f1387d354f6","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 5.png","hash":"06814e213aec05ab66a7dada1a7dbd89fb855da6","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled.png","hash":"11b2629287b91e26f85e87617568e0adcbff4825","modified":1628922832463},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1628922832463},{"_id":"public/css/index.css","hash":"f883b67afd4511cc00e230bfd6ac9ec5bbad19de","modified":1628922832463},{"_id":"public/js/utils.js","hash":"41481019ef510c74e744f4f7ec4d0a13b5ccc04c","modified":1628922832463},{"_id":"public/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1628922832463},{"_id":"public/js/search/local-search.js","hash":"459e2541afda483916d16fce4aaa56b41bcd42ba","modified":1628922832463},{"_id":"public/assets/algolia/algoliasearch.js","hash":"6948fcdf071e4983e784e8c458cf201536f77792","modified":1628922832463},{"_id":"public/js/main.js","hash":"229c8abda75ab80b47e234ab7b81dca7d655441f","modified":1628922832463},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/dubbo-服务暴露.jpg","hash":"394e76e18a043d706e634b5a2b9d22613adee5d9","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 8.png","hash":"8d1ff79d71b20cd10dd23ab057b190692018c7a4","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 29.png","hash":"dfae34d649b681a2dd6cc0ed98f9d35ea9e84529","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 20.png","hash":"f7b00b3fa2616060f6a3f3a3bb5c59c3a90d948a","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 46.png","hash":"a76530b3f3dd20765a740f6a4421441e96551048","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 18.png","hash":"bcf8c68530a8c51f9e5cf659443ae1e4344a5f11","modified":1628922832463},{"_id":"public/2017/09/15/ChromeExtensions/Untitled.png","hash":"128948df5d378b3d2d7ed68a7150620bb66cc4b1","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 17.png","hash":"8732e9322632c194a8959c167290ef2974c20da5","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 28.png","hash":"b3013955613e8545c54e0c9e20edf74b3911e6ba","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 21.png","hash":"cc77cea00d35118533d4ede40e4546435c285d31","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 26.png","hash":"731c2bb8680d7d58670e5f58fd71527d3b5f4fe5","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 27.png","hash":"148cdef1fdbb7ea72b041e3a46c4c7b3b2b5ba61","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 60.png","hash":"f05b6727508bb4efc61d4b0b7dc5040cb8f3d258","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 48.png","hash":"fae8cd6c8214e8c3e717ab7e31ab8609a2f8a164","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 44.png","hash":"7323c5aa93a4c80d4162561e7eda437a673d80a5","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 55.png","hash":"e06f538d25b0d0d38d16e681eaaf923aa298878a","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 34.png","hash":"566617f6bdc090294c4c1d1ae67b4a5afda5791c","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 32.png","hash":"dcce8e03005c050828f4d2e87cb0102dcdd358ad","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 45.png","hash":"15ebdce81d0bbcb1f861858c9aacf587e9ba5d88","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 58.png","hash":"594d720c0df5e04ea1edda0fbdd60a1cc93a20f5","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 30.png","hash":"d691147bd117fadad419445a4ef2c6f126017087","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 42.png","hash":"bdbd95abe877a94387573d2ad5346967b8f8bf4c","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 43.png","hash":"f7ab72d27bea9d59a626ddc9697610f76e495357","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 47.png","hash":"b4ddc564462b262c0f5264202f8954d6d1521824","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 52.png","hash":"2bc3fa18840f827ef8cd177a6785f6d52b8917c0","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 57.png","hash":"23914b84a570846e59fd29c24bae5be7ec5e95e2","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 33.png","hash":"08f65809d982b6d93704e337dbba4883a8ca4cb8","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 35.png","hash":"001ea507a9d7e81fd4b742f762b4c70d8281d409","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 49.png","hash":"a4f186f0f39b190f7c6edd5eb0afdb3b5bc782eb","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 59.png","hash":"29c2d1816d889fe6b9bdee876fdea7b144c43849","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 39.png","hash":"a5315beab08b7219d509d4b6a3541d52b0cf93de","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 41.png","hash":"56cf16a791bbe790c00f21f8bf629766a78843e9","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 53.png","hash":"d28bff1ef7b28d9f3c506c0c2d131e0c7732681c","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 54.png","hash":"60082f8c0df3122416add96e22519f595a34533b","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 56.png","hash":"1e1df08c03f16cb44b1298adcad67e501d1f80b8","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 37.png","hash":"1f5ea72c940bcd4bae9d3df43f216d6e7f1ead44","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 31.png","hash":"e68de8549f5c6fb60fcf53719c357eb73eb889b7","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 36.png","hash":"b9f387dc824a678168e3ebc8660b0c3e5a7edc46","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 51.png","hash":"da3557219420470d9330656db91bb44993cbe2c0","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 38.png","hash":"57a79ce1cc10c6a58c6ab29196faab9429750ffa","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 40.png","hash":"65615e78fa773e4147b0819efa29ec023c4cbf78","modified":1628922832463},{"_id":"public/2021/08/13/Dubbo学习笔记/Untitled 50.png","hash":"eabbe697603f61332c6b557b68ed1bbd0c3ba391","modified":1628922832463}],"Category":[{"name":"前端","_id":"cksbelm9l00045oucgvsw2e5h"},{"name":"插件","_id":"cksbelm9o00065ouc0eztd7no"},{"name":"后端","_id":"cksbelm9s000d5ouc0kdq2l36"}],"Data":[],"Page":[{"title":"标签","date":"2021-01-21T10:07:05.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-01-21 18:07:05\ntype: \"tags\"\n---\n","updated":"2021-07-18T08:11:54.271Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cksbelm9b00005ouc8m6fe255","content":"","site":{"data":{}},"cover":"https://ftp.bmp.ovh/imgs/2021/07/ead2f7c0f7c30335.jpg","excerpt":"","more":""},{"title":"分类","date":"2021-01-21T10:07:05.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-01-21 18:07:05\ntype: \"categories\"\n---\n","updated":"2021-07-18T08:11:45.608Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cksbelm9g00015ouc4cqu2mzd","content":"","site":{"data":{}},"cover":"https://ftp.bmp.ovh/imgs/2021/07/ead2f7c0f7c30335.jpg","excerpt":"","more":""}],"Post":[{"title":"Learn-TypeScript","date":"2018-09-15T11:00:41.000Z","comments":1,"thumbnail":"https://z3.ax1x.com/2021/07/18/W3HSDP.png","banner":"https://z3.ax1x.com/2021/07/18/W3HSDP.png","cover":"https://z3.ax1x.com/2021/07/18/W3HSDP.png","_content":"\n# learn-typescript\n\nCreated: December 14, 2020 12:34 PM\n\n![Untitled.png](Untitled.png)\n\n# **10分钟搞定TypeScript 语法**\n\n### **一、多行字符串**\n\n> 注意是Esc下面的符号\n\n```\nvar context = `aaa\nasdf\ndsaf`\n\n// ${param} 输出param变量 \nconsole.log(`hell ${context}`)\n\n```\n\n### **二、字符串模板**\n\n```\nconsole.log(`<div>\n                <span>${context}</span>\n            <div/>`\n            )\n\n```\n\n### **三、自动拆分字符串**\n\n```\nfunction test(template:any, name:string, age:Number){\n    console.log(template)\n    console.log(name)\n    console.log(age)\n}\nvar myName = \"wo\"\nvar getAge= function(){\n    return 12 \n}\ntest`hello my name is ${myName}, i'm $${getAge}`\n\n```\n\n### **四、指定参数类型**\n\n```\nvar myName2:string = \"guoyuhang\"\nmyName2 = 2     //类型不同报错\nvar alias = \"xixi\"\nalias =12       //类型推断机制\nvar tex:any = \"abc\"\ntex = 12\n\nvar age2:Number = 12\nvar flag:boolean = true\nfunction te(x:Number):Number{\n    return 12\n}\nclass Person{\n}\nvar zhangsan:Person = new Person()\n\n```\n\n### **五、参数指定默认值，给方法变量指定默认值**\n\n### **（1）默认值参数要放最后面**\n\n```\nfunction test3(a:string,b:string,c:string=\"jojo\"){\n    console.log(`${a}${b}${c}`)\n}\ntest3(\"xxx\",\"yyy\",\"zzz\")\ntest3(\"xxx\",\"yyy\")\n\n```\n\n### **六、可选参数**\n\n> 要处理可选参数，不然会在方法体里报错\n\n### **（1）可选参数必须放在必填参数后边**\n\n```\nfunction test4(a: string,b?: string,c: string=\"jojo\"){\n    console.log(`${a}${b}${c}`)\n}\ntest4(\"xxx\",\"yyy\",\"zzz\")\ntest4(\"xxx\",\"yyy\")\ntest4(\"xxx\")\n\n```\n\n### **七、函数新特性**\n\n### **1、Rest and Spread：**\n\n### **(1) 用来声明任意数量的方法参数**\n\n```\nfunction argfun(...args:any) {\n    args.forEach(\n        function (arg:any){\n            console.log(arg)\n        }\n    );\n}\nargfun(1,3,4,5,6)\n\n```\n\n### **(2) 用来生命参数数量固定的方法,typescript还不支持，但是JS支持,可运行**\n\n```\nfunction argfun2(arg1:string,arg2:string) {\n    console.log(arg1)\n    console.log(arg2)\n}\nvar argArry = [1]\nvar argArry2 = [1,2]\nargfun2(...argArry)\nargfun2(...argArry2)\n\n```\n\n### **2、generator函数，控制函数执行过程，Ts不支持, Es支持**\n\n### **(1) 简单**\n\n```\nfunction* doSomething(){\n    console.log();\n    \n    yield;          // 控制\n\n    console.log();\n}\n\n//方法必须赋值给对象\nvar func1 = doSomething();\nfunc1.next();\n\n```\n\n### **(2) 复杂**\n\n```\nfunction* getStockPrice(stock){\n    while(true){\n        yield Math.random()*100;    // 控制\n    }\n}\nvar priceGenerator = getStockPrice(\"IBM\");\nvar limit = 15;\nvar price = 100;\nwhile(price > limit){\n    price = priceGenerator.next().value;\n    console.log(`the generate return${price}`)\n}\nconsole.log(`buying stock at ${price}`)\n\n```\n\n### **3、析构表达式**\n\n> 表达式将对象或数组拆解成任意数量的变量\n\n```\nfunction getStock(){\n    return{\n        code: \"IBM\",\n        price: {\n            price1: 100,\n            price2: 200\n        }\n    }\n}\n\n// ES5:分别赋值到本地2个变量上去\nvar stock = getStock()\nvar code = stock.code\nvar price = stock.price\n\n// ES6:把code属性放到codex变量里\nvar {code:codex,price: {price1}} = getStock()\nvar array1 = [1,2,3,4]\nvar [,,n1,n2] = array1\nvar [n1,n2,...args] = array1\nfunction doSome([nu1, nu2, ...others]){\n    console.log(nu1),\n    console.log(nu2),\n    console.log(others)\n}\ndoSome(array1)\n\n```\n\n### **4、箭头表达式 : 解决this作用域范围预判的错误问题**\n\n```\nvar sum = (args1:any,args2:Number) => args1+args2\nvar myArray = [1,2,3,45,6]\nconsole.log(myArray.filter(value => value%2 == 0 ))\n\n```\n\n### **5、for of 循环**\n\n```\nvar myArray = [1,2,3,4]\nmyArray.desc = \"forc\";//ts里不能给array指定属性，js可以\nmyArray.forEach(value => console.log(value))//不支持break，忽略掉属性值\n\nfor(var n in myArray){ //for in 数组下标和属性名字，任何属性都是键值对\n    console.log(n) //key\n    console.log(myArray[n]) //value\n}\n\nfor(var nn of myArray ){ //只循环数组,忽略属性，可以break,循环字符串会循环字符\n    if(nn > 2) break\n    console.log(nn)\n}\n\n```\n\n### **6、类定义**\n\n```\nclass Person2{\n    name:any;\n\n    eat(){\n        console.log(\"i'm eating\");\n    }\n\n    private s(){\n        //只能内部访问\n    }\n\n    protected a:any;//内部和子类可以访问\n\n    //构造函数：实例化调用1次\n    //public name2 是声明了1个属性，用this调用,否则不行\n    constructor(public name2:string){\n        //内部访问\n        //new 时调用1次\n        //初始化\n    }\n}\n\nvar p1 = new Person2(\"a\")\np1.name = \"superman\"\np1.eat()\n\nvar p2 = new Person2(\"b\")\np2.name = \"superman2\"\np2.eat()\n\n```\n\n### **7、类继承 extends : 继承关系，\"的\"的关系**\n\n```\nclass Employee extends Person2{\n    //子类构造函数必须调用父类构造函数\n    constructor(name:string,code:string){\n        super(name)\n        this.code = code\n    }\n    \n    //指定新的属性和方法\n    code: string = \"\";\n    work(){\n        //super可以调父类其他方法\n        super.eat();\n        console.log(\"do work\")\n    }\n\n    doWork(){\n        console.log(\"do work\")\n    }\n}\n\nvar e1 = new Employee(\"b\",\"\")\ne1.eat()\ne1.work()\ne1.doWork()\n\n```\n\n### **8、泛型**\n\n```\nvar work:Array<Person2> = []\nwork[0] = new Person2(\"\")\nwork[1] = new Employee(\"\",\"\")\n\n//接口建立代码约定,interface生命，implements\ninterface IPerson{\n    name:string;\n    age:number;\n    eat():any;\n}\nclass Person3 implements IPerson{\n    //方法参数类型声明\n    constructor(public config:IPerson) {\n    }\n    name = \"\";\n    age =12;\n    eat(){\n        console.log()\n    }\n}\n\n```\n\n### **9、模块-决定哪些资源让外部使用**\n\n> 创建b.ts文件在同一目录下 \"export\"关键字表示导出模块中元素\n\n```\n// b.ts  \nexport var pro:any;\nvar pro2:any;\nexport function a(){\n}\nfunction b(){\n}\n\n```\n\n```\n// 导入b模块\nimport {a, pro} from './b';\nconsole.log(pro)\na()\n\n```\n\n### **10、注解**\n\n> 给程序元素加上更直观的说明，与逻辑无关，而是供给指定工具或框架使用 告诉框架，如何处理一下属性或或方法\n\n```\n// 如\n@action.object({ type: 'param' })\nexport class ActionInput {\n    @action.param({ type: 'String', required: true })\n    name: string\n\n    @action.param({ type: 'String', required: true })\n    description: string\n\n    @action.param({ type: 'String', required: true })\n    type: string\n}\n\n```\n\n### **11、类型定义文件(*.d.ts)**\n\n> 使用已有的javascript工具包","source":"_posts/learn-typescript.md","raw":"---\ntitle: Learn-TypeScript\ndate: 2018-09-15 19:00:41\ncomments: true\ntags: \n    - TypeScript\ncategories: 前端\nthumbnail: https://z3.ax1x.com/2021/07/18/W3HSDP.png\nbanner: https://z3.ax1x.com/2021/07/18/W3HSDP.png\ncover: https://z3.ax1x.com/2021/07/18/W3HSDP.png\n---\n\n# learn-typescript\n\nCreated: December 14, 2020 12:34 PM\n\n![Untitled.png](Untitled.png)\n\n# **10分钟搞定TypeScript 语法**\n\n### **一、多行字符串**\n\n> 注意是Esc下面的符号\n\n```\nvar context = `aaa\nasdf\ndsaf`\n\n// ${param} 输出param变量 \nconsole.log(`hell ${context}`)\n\n```\n\n### **二、字符串模板**\n\n```\nconsole.log(`<div>\n                <span>${context}</span>\n            <div/>`\n            )\n\n```\n\n### **三、自动拆分字符串**\n\n```\nfunction test(template:any, name:string, age:Number){\n    console.log(template)\n    console.log(name)\n    console.log(age)\n}\nvar myName = \"wo\"\nvar getAge= function(){\n    return 12 \n}\ntest`hello my name is ${myName}, i'm $${getAge}`\n\n```\n\n### **四、指定参数类型**\n\n```\nvar myName2:string = \"guoyuhang\"\nmyName2 = 2     //类型不同报错\nvar alias = \"xixi\"\nalias =12       //类型推断机制\nvar tex:any = \"abc\"\ntex = 12\n\nvar age2:Number = 12\nvar flag:boolean = true\nfunction te(x:Number):Number{\n    return 12\n}\nclass Person{\n}\nvar zhangsan:Person = new Person()\n\n```\n\n### **五、参数指定默认值，给方法变量指定默认值**\n\n### **（1）默认值参数要放最后面**\n\n```\nfunction test3(a:string,b:string,c:string=\"jojo\"){\n    console.log(`${a}${b}${c}`)\n}\ntest3(\"xxx\",\"yyy\",\"zzz\")\ntest3(\"xxx\",\"yyy\")\n\n```\n\n### **六、可选参数**\n\n> 要处理可选参数，不然会在方法体里报错\n\n### **（1）可选参数必须放在必填参数后边**\n\n```\nfunction test4(a: string,b?: string,c: string=\"jojo\"){\n    console.log(`${a}${b}${c}`)\n}\ntest4(\"xxx\",\"yyy\",\"zzz\")\ntest4(\"xxx\",\"yyy\")\ntest4(\"xxx\")\n\n```\n\n### **七、函数新特性**\n\n### **1、Rest and Spread：**\n\n### **(1) 用来声明任意数量的方法参数**\n\n```\nfunction argfun(...args:any) {\n    args.forEach(\n        function (arg:any){\n            console.log(arg)\n        }\n    );\n}\nargfun(1,3,4,5,6)\n\n```\n\n### **(2) 用来生命参数数量固定的方法,typescript还不支持，但是JS支持,可运行**\n\n```\nfunction argfun2(arg1:string,arg2:string) {\n    console.log(arg1)\n    console.log(arg2)\n}\nvar argArry = [1]\nvar argArry2 = [1,2]\nargfun2(...argArry)\nargfun2(...argArry2)\n\n```\n\n### **2、generator函数，控制函数执行过程，Ts不支持, Es支持**\n\n### **(1) 简单**\n\n```\nfunction* doSomething(){\n    console.log();\n    \n    yield;          // 控制\n\n    console.log();\n}\n\n//方法必须赋值给对象\nvar func1 = doSomething();\nfunc1.next();\n\n```\n\n### **(2) 复杂**\n\n```\nfunction* getStockPrice(stock){\n    while(true){\n        yield Math.random()*100;    // 控制\n    }\n}\nvar priceGenerator = getStockPrice(\"IBM\");\nvar limit = 15;\nvar price = 100;\nwhile(price > limit){\n    price = priceGenerator.next().value;\n    console.log(`the generate return${price}`)\n}\nconsole.log(`buying stock at ${price}`)\n\n```\n\n### **3、析构表达式**\n\n> 表达式将对象或数组拆解成任意数量的变量\n\n```\nfunction getStock(){\n    return{\n        code: \"IBM\",\n        price: {\n            price1: 100,\n            price2: 200\n        }\n    }\n}\n\n// ES5:分别赋值到本地2个变量上去\nvar stock = getStock()\nvar code = stock.code\nvar price = stock.price\n\n// ES6:把code属性放到codex变量里\nvar {code:codex,price: {price1}} = getStock()\nvar array1 = [1,2,3,4]\nvar [,,n1,n2] = array1\nvar [n1,n2,...args] = array1\nfunction doSome([nu1, nu2, ...others]){\n    console.log(nu1),\n    console.log(nu2),\n    console.log(others)\n}\ndoSome(array1)\n\n```\n\n### **4、箭头表达式 : 解决this作用域范围预判的错误问题**\n\n```\nvar sum = (args1:any,args2:Number) => args1+args2\nvar myArray = [1,2,3,45,6]\nconsole.log(myArray.filter(value => value%2 == 0 ))\n\n```\n\n### **5、for of 循环**\n\n```\nvar myArray = [1,2,3,4]\nmyArray.desc = \"forc\";//ts里不能给array指定属性，js可以\nmyArray.forEach(value => console.log(value))//不支持break，忽略掉属性值\n\nfor(var n in myArray){ //for in 数组下标和属性名字，任何属性都是键值对\n    console.log(n) //key\n    console.log(myArray[n]) //value\n}\n\nfor(var nn of myArray ){ //只循环数组,忽略属性，可以break,循环字符串会循环字符\n    if(nn > 2) break\n    console.log(nn)\n}\n\n```\n\n### **6、类定义**\n\n```\nclass Person2{\n    name:any;\n\n    eat(){\n        console.log(\"i'm eating\");\n    }\n\n    private s(){\n        //只能内部访问\n    }\n\n    protected a:any;//内部和子类可以访问\n\n    //构造函数：实例化调用1次\n    //public name2 是声明了1个属性，用this调用,否则不行\n    constructor(public name2:string){\n        //内部访问\n        //new 时调用1次\n        //初始化\n    }\n}\n\nvar p1 = new Person2(\"a\")\np1.name = \"superman\"\np1.eat()\n\nvar p2 = new Person2(\"b\")\np2.name = \"superman2\"\np2.eat()\n\n```\n\n### **7、类继承 extends : 继承关系，\"的\"的关系**\n\n```\nclass Employee extends Person2{\n    //子类构造函数必须调用父类构造函数\n    constructor(name:string,code:string){\n        super(name)\n        this.code = code\n    }\n    \n    //指定新的属性和方法\n    code: string = \"\";\n    work(){\n        //super可以调父类其他方法\n        super.eat();\n        console.log(\"do work\")\n    }\n\n    doWork(){\n        console.log(\"do work\")\n    }\n}\n\nvar e1 = new Employee(\"b\",\"\")\ne1.eat()\ne1.work()\ne1.doWork()\n\n```\n\n### **8、泛型**\n\n```\nvar work:Array<Person2> = []\nwork[0] = new Person2(\"\")\nwork[1] = new Employee(\"\",\"\")\n\n//接口建立代码约定,interface生命，implements\ninterface IPerson{\n    name:string;\n    age:number;\n    eat():any;\n}\nclass Person3 implements IPerson{\n    //方法参数类型声明\n    constructor(public config:IPerson) {\n    }\n    name = \"\";\n    age =12;\n    eat(){\n        console.log()\n    }\n}\n\n```\n\n### **9、模块-决定哪些资源让外部使用**\n\n> 创建b.ts文件在同一目录下 \"export\"关键字表示导出模块中元素\n\n```\n// b.ts  \nexport var pro:any;\nvar pro2:any;\nexport function a(){\n}\nfunction b(){\n}\n\n```\n\n```\n// 导入b模块\nimport {a, pro} from './b';\nconsole.log(pro)\na()\n\n```\n\n### **10、注解**\n\n> 给程序元素加上更直观的说明，与逻辑无关，而是供给指定工具或框架使用 告诉框架，如何处理一下属性或或方法\n\n```\n// 如\n@action.object({ type: 'param' })\nexport class ActionInput {\n    @action.param({ type: 'String', required: true })\n    name: string\n\n    @action.param({ type: 'String', required: true })\n    description: string\n\n    @action.param({ type: 'String', required: true })\n    type: string\n}\n\n```\n\n### **11、类型定义文件(*.d.ts)**\n\n> 使用已有的javascript工具包","slug":"learn-typescript","published":1,"updated":"2021-07-18T08:57:32.992Z","layout":"post","photos":[],"link":"","_id":"cksbelm9h00025ouc1mk5aopi","content":"<h1 id=\"learn-typescript\"><a href=\"#learn-typescript\" class=\"headerlink\" title=\"learn-typescript\"></a>learn-typescript</h1><p>Created: December 14, 2020 12:34 PM</p>\n<p><img src=\"Untitled.png\" alt=\"Untitled.png\"></p>\n<h1 id=\"10分钟搞定TypeScript-语法\"><a href=\"#10分钟搞定TypeScript-语法\" class=\"headerlink\" title=\"10分钟搞定TypeScript 语法\"></a><strong>10分钟搞定TypeScript 语法</strong></h1><h3 id=\"一、多行字符串\"><a href=\"#一、多行字符串\" class=\"headerlink\" title=\"一、多行字符串\"></a><strong>一、多行字符串</strong></h3><blockquote>\n<p>注意是Esc下面的符号</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var context &#x3D; &#96;aaa</span><br><span class=\"line\">asdf</span><br><span class=\"line\">dsaf&#96;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; $&#123;param&#125; 输出param变量 </span><br><span class=\"line\">console.log(&#96;hell $&#123;context&#125;&#96;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"二、字符串模板\"><a href=\"#二、字符串模板\" class=\"headerlink\" title=\"二、字符串模板\"></a><strong>二、字符串模板</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&#96;&lt;div&gt;</span><br><span class=\"line\">                &lt;span&gt;$&#123;context&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">            &lt;div&#x2F;&gt;&#96;</span><br><span class=\"line\">            )</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"三、自动拆分字符串\"><a href=\"#三、自动拆分字符串\" class=\"headerlink\" title=\"三、自动拆分字符串\"></a><strong>三、自动拆分字符串</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test(template:any, name:string, age:Number)&#123;</span><br><span class=\"line\">    console.log(template)</span><br><span class=\"line\">    console.log(name)</span><br><span class=\"line\">    console.log(age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var myName &#x3D; &quot;wo&quot;</span><br><span class=\"line\">var getAge&#x3D; function()&#123;</span><br><span class=\"line\">    return 12 </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test&#96;hello my name is $&#123;myName&#125;, i&#39;m $$&#123;getAge&#125;&#96;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"四、指定参数类型\"><a href=\"#四、指定参数类型\" class=\"headerlink\" title=\"四、指定参数类型\"></a><strong>四、指定参数类型</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var myName2:string &#x3D; &quot;guoyuhang&quot;</span><br><span class=\"line\">myName2 &#x3D; 2     &#x2F;&#x2F;类型不同报错</span><br><span class=\"line\">var alias &#x3D; &quot;xixi&quot;</span><br><span class=\"line\">alias &#x3D;12       &#x2F;&#x2F;类型推断机制</span><br><span class=\"line\">var tex:any &#x3D; &quot;abc&quot;</span><br><span class=\"line\">tex &#x3D; 12</span><br><span class=\"line\"></span><br><span class=\"line\">var age2:Number &#x3D; 12</span><br><span class=\"line\">var flag:boolean &#x3D; true</span><br><span class=\"line\">function te(x:Number):Number&#123;</span><br><span class=\"line\">    return 12</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Person&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var zhangsan:Person &#x3D; new Person()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"五、参数指定默认值，给方法变量指定默认值\"><a href=\"#五、参数指定默认值，给方法变量指定默认值\" class=\"headerlink\" title=\"五、参数指定默认值，给方法变量指定默认值\"></a><strong>五、参数指定默认值，给方法变量指定默认值</strong></h3><h3 id=\"（1）默认值参数要放最后面\"><a href=\"#（1）默认值参数要放最后面\" class=\"headerlink\" title=\"（1）默认值参数要放最后面\"></a><strong>（1）默认值参数要放最后面</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test3(a:string,b:string,c:string&#x3D;&quot;jojo&quot;)&#123;</span><br><span class=\"line\">    console.log(&#96;$&#123;a&#125;$&#123;b&#125;$&#123;c&#125;&#96;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test3(&quot;xxx&quot;,&quot;yyy&quot;,&quot;zzz&quot;)</span><br><span class=\"line\">test3(&quot;xxx&quot;,&quot;yyy&quot;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"六、可选参数\"><a href=\"#六、可选参数\" class=\"headerlink\" title=\"六、可选参数\"></a><strong>六、可选参数</strong></h3><blockquote>\n<p>要处理可选参数，不然会在方法体里报错</p>\n</blockquote>\n<h3 id=\"（1）可选参数必须放在必填参数后边\"><a href=\"#（1）可选参数必须放在必填参数后边\" class=\"headerlink\" title=\"（1）可选参数必须放在必填参数后边\"></a><strong>（1）可选参数必须放在必填参数后边</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test4(a: string,b?: string,c: string&#x3D;&quot;jojo&quot;)&#123;</span><br><span class=\"line\">    console.log(&#96;$&#123;a&#125;$&#123;b&#125;$&#123;c&#125;&#96;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test4(&quot;xxx&quot;,&quot;yyy&quot;,&quot;zzz&quot;)</span><br><span class=\"line\">test4(&quot;xxx&quot;,&quot;yyy&quot;)</span><br><span class=\"line\">test4(&quot;xxx&quot;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"七、函数新特性\"><a href=\"#七、函数新特性\" class=\"headerlink\" title=\"七、函数新特性\"></a><strong>七、函数新特性</strong></h3><h3 id=\"1、Rest-and-Spread：\"><a href=\"#1、Rest-and-Spread：\" class=\"headerlink\" title=\"1、Rest and Spread：\"></a><strong>1、Rest and Spread：</strong></h3><h3 id=\"1-用来声明任意数量的方法参数\"><a href=\"#1-用来声明任意数量的方法参数\" class=\"headerlink\" title=\"(1) 用来声明任意数量的方法参数\"></a><strong>(1) 用来声明任意数量的方法参数</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function argfun(...args:any) &#123;</span><br><span class=\"line\">    args.forEach(</span><br><span class=\"line\">        function (arg:any)&#123;</span><br><span class=\"line\">            console.log(arg)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">argfun(1,3,4,5,6)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-用来生命参数数量固定的方法-typescript还不支持，但是JS支持-可运行\"><a href=\"#2-用来生命参数数量固定的方法-typescript还不支持，但是JS支持-可运行\" class=\"headerlink\" title=\"(2) 用来生命参数数量固定的方法,typescript还不支持，但是JS支持,可运行\"></a><strong>(2) 用来生命参数数量固定的方法,typescript还不支持，但是JS支持,可运行</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function argfun2(arg1:string,arg2:string) &#123;</span><br><span class=\"line\">    console.log(arg1)</span><br><span class=\"line\">    console.log(arg2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var argArry &#x3D; [1]</span><br><span class=\"line\">var argArry2 &#x3D; [1,2]</span><br><span class=\"line\">argfun2(...argArry)</span><br><span class=\"line\">argfun2(...argArry2)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"2、generator函数，控制函数执行过程，Ts不支持-Es支持\"><a href=\"#2、generator函数，控制函数执行过程，Ts不支持-Es支持\" class=\"headerlink\" title=\"2、generator函数，控制函数执行过程，Ts不支持, Es支持\"></a><strong>2、generator函数，控制函数执行过程，Ts不支持, Es支持</strong></h3><h3 id=\"1-简单\"><a href=\"#1-简单\" class=\"headerlink\" title=\"(1) 简单\"></a><strong>(1) 简单</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* doSomething()&#123;</span><br><span class=\"line\">    console.log();</span><br><span class=\"line\">    </span><br><span class=\"line\">    yield;          &#x2F;&#x2F; 控制</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;方法必须赋值给对象</span><br><span class=\"line\">var func1 &#x3D; doSomething();</span><br><span class=\"line\">func1.next();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-复杂\"><a href=\"#2-复杂\" class=\"headerlink\" title=\"(2) 复杂\"></a><strong>(2) 复杂</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* getStockPrice(stock)&#123;</span><br><span class=\"line\">    while(true)&#123;</span><br><span class=\"line\">        yield Math.random()*100;    &#x2F;&#x2F; 控制</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var priceGenerator &#x3D; getStockPrice(&quot;IBM&quot;);</span><br><span class=\"line\">var limit &#x3D; 15;</span><br><span class=\"line\">var price &#x3D; 100;</span><br><span class=\"line\">while(price &gt; limit)&#123;</span><br><span class=\"line\">    price &#x3D; priceGenerator.next().value;</span><br><span class=\"line\">    console.log(&#96;the generate return$&#123;price&#125;&#96;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(&#96;buying stock at $&#123;price&#125;&#96;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"3、析构表达式\"><a href=\"#3、析构表达式\" class=\"headerlink\" title=\"3、析构表达式\"></a><strong>3、析构表达式</strong></h3><blockquote>\n<p>表达式将对象或数组拆解成任意数量的变量</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getStock()&#123;</span><br><span class=\"line\">    return&#123;</span><br><span class=\"line\">        code: &quot;IBM&quot;,</span><br><span class=\"line\">        price: &#123;</span><br><span class=\"line\">            price1: 100,</span><br><span class=\"line\">            price2: 200</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; ES5:分别赋值到本地2个变量上去</span><br><span class=\"line\">var stock &#x3D; getStock()</span><br><span class=\"line\">var code &#x3D; stock.code</span><br><span class=\"line\">var price &#x3D; stock.price</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; ES6:把code属性放到codex变量里</span><br><span class=\"line\">var &#123;code:codex,price: &#123;price1&#125;&#125; &#x3D; getStock()</span><br><span class=\"line\">var array1 &#x3D; [1,2,3,4]</span><br><span class=\"line\">var [,,n1,n2] &#x3D; array1</span><br><span class=\"line\">var [n1,n2,...args] &#x3D; array1</span><br><span class=\"line\">function doSome([nu1, nu2, ...others])&#123;</span><br><span class=\"line\">    console.log(nu1),</span><br><span class=\"line\">    console.log(nu2),</span><br><span class=\"line\">    console.log(others)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">doSome(array1)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"4、箭头表达式-解决this作用域范围预判的错误问题\"><a href=\"#4、箭头表达式-解决this作用域范围预判的错误问题\" class=\"headerlink\" title=\"4、箭头表达式 : 解决this作用域范围预判的错误问题\"></a><strong>4、箭头表达式 : 解决this作用域范围预判的错误问题</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sum &#x3D; (args1:any,args2:Number) &#x3D;&gt; args1+args2</span><br><span class=\"line\">var myArray &#x3D; [1,2,3,45,6]</span><br><span class=\"line\">console.log(myArray.filter(value &#x3D;&gt; value%2 &#x3D;&#x3D; 0 ))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"5、for-of-循环\"><a href=\"#5、for-of-循环\" class=\"headerlink\" title=\"5、for of 循环\"></a><strong>5、for of 循环</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var myArray &#x3D; [1,2,3,4]</span><br><span class=\"line\">myArray.desc &#x3D; &quot;forc&quot;;&#x2F;&#x2F;ts里不能给array指定属性，js可以</span><br><span class=\"line\">myArray.forEach(value &#x3D;&gt; console.log(value))&#x2F;&#x2F;不支持break，忽略掉属性值</span><br><span class=\"line\"></span><br><span class=\"line\">for(var n in myArray)&#123; &#x2F;&#x2F;for in 数组下标和属性名字，任何属性都是键值对</span><br><span class=\"line\">    console.log(n) &#x2F;&#x2F;key</span><br><span class=\"line\">    console.log(myArray[n]) &#x2F;&#x2F;value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">for(var nn of myArray )&#123; &#x2F;&#x2F;只循环数组,忽略属性，可以break,循环字符串会循环字符</span><br><span class=\"line\">    if(nn &gt; 2) break</span><br><span class=\"line\">    console.log(nn)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"6、类定义\"><a href=\"#6、类定义\" class=\"headerlink\" title=\"6、类定义\"></a><strong>6、类定义</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person2&#123;</span><br><span class=\"line\">    name:any;</span><br><span class=\"line\"></span><br><span class=\"line\">    eat()&#123;</span><br><span class=\"line\">        console.log(&quot;i&#39;m eating&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private s()&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;只能内部访问</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected a:any;&#x2F;&#x2F;内部和子类可以访问</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;构造函数：实例化调用1次</span><br><span class=\"line\">    &#x2F;&#x2F;public name2 是声明了1个属性，用this调用,否则不行</span><br><span class=\"line\">    constructor(public name2:string)&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;内部访问</span><br><span class=\"line\">        &#x2F;&#x2F;new 时调用1次</span><br><span class=\"line\">        &#x2F;&#x2F;初始化</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var p1 &#x3D; new Person2(&quot;a&quot;)</span><br><span class=\"line\">p1.name &#x3D; &quot;superman&quot;</span><br><span class=\"line\">p1.eat()</span><br><span class=\"line\"></span><br><span class=\"line\">var p2 &#x3D; new Person2(&quot;b&quot;)</span><br><span class=\"line\">p2.name &#x3D; &quot;superman2&quot;</span><br><span class=\"line\">p2.eat()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"7、类继承-extends-继承关系，”的”的关系\"><a href=\"#7、类继承-extends-继承关系，”的”的关系\" class=\"headerlink\" title=\"7、类继承 extends : 继承关系，”的”的关系\"></a><strong>7、类继承 extends : 继承关系，”的”的关系</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Employee extends Person2&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;子类构造函数必须调用父类构造函数</span><br><span class=\"line\">    constructor(name:string,code:string)&#123;</span><br><span class=\"line\">        super(name)</span><br><span class=\"line\">        this.code &#x3D; code</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;指定新的属性和方法</span><br><span class=\"line\">    code: string &#x3D; &quot;&quot;;</span><br><span class=\"line\">    work()&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;super可以调父类其他方法</span><br><span class=\"line\">        super.eat();</span><br><span class=\"line\">        console.log(&quot;do work&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    doWork()&#123;</span><br><span class=\"line\">        console.log(&quot;do work&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var e1 &#x3D; new Employee(&quot;b&quot;,&quot;&quot;)</span><br><span class=\"line\">e1.eat()</span><br><span class=\"line\">e1.work()</span><br><span class=\"line\">e1.doWork()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"8、泛型\"><a href=\"#8、泛型\" class=\"headerlink\" title=\"8、泛型\"></a><strong>8、泛型</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var work:Array&lt;Person2&gt; &#x3D; []</span><br><span class=\"line\">work[0] &#x3D; new Person2(&quot;&quot;)</span><br><span class=\"line\">work[1] &#x3D; new Employee(&quot;&quot;,&quot;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;接口建立代码约定,interface生命，implements</span><br><span class=\"line\">interface IPerson&#123;</span><br><span class=\"line\">    name:string;</span><br><span class=\"line\">    age:number;</span><br><span class=\"line\">    eat():any;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Person3 implements IPerson&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;方法参数类型声明</span><br><span class=\"line\">    constructor(public config:IPerson) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    name &#x3D; &quot;&quot;;</span><br><span class=\"line\">    age &#x3D;12;</span><br><span class=\"line\">    eat()&#123;</span><br><span class=\"line\">        console.log()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"9、模块-决定哪些资源让外部使用\"><a href=\"#9、模块-决定哪些资源让外部使用\" class=\"headerlink\" title=\"9、模块-决定哪些资源让外部使用\"></a><strong>9、模块-决定哪些资源让外部使用</strong></h3><blockquote>\n<p>创建b.ts文件在同一目录下 “export”关键字表示导出模块中元素</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; b.ts  </span><br><span class=\"line\">export var pro:any;</span><br><span class=\"line\">var pro2:any;</span><br><span class=\"line\">export function a()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function b()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 导入b模块</span><br><span class=\"line\">import &#123;a, pro&#125; from &#39;.&#x2F;b&#39;;</span><br><span class=\"line\">console.log(pro)</span><br><span class=\"line\">a()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"10、注解\"><a href=\"#10、注解\" class=\"headerlink\" title=\"10、注解\"></a><strong>10、注解</strong></h3><blockquote>\n<p>给程序元素加上更直观的说明，与逻辑无关，而是供给指定工具或框架使用 告诉框架，如何处理一下属性或或方法</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 如</span><br><span class=\"line\">@action.object(&#123; type: &#39;param&#39; &#125;)</span><br><span class=\"line\">export class ActionInput &#123;</span><br><span class=\"line\">    @action.param(&#123; type: &#39;String&#39;, required: true &#125;)</span><br><span class=\"line\">    name: string</span><br><span class=\"line\"></span><br><span class=\"line\">    @action.param(&#123; type: &#39;String&#39;, required: true &#125;)</span><br><span class=\"line\">    description: string</span><br><span class=\"line\"></span><br><span class=\"line\">    @action.param(&#123; type: &#39;String&#39;, required: true &#125;)</span><br><span class=\"line\">    type: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"11、类型定义文件-d-ts\"><a href=\"#11、类型定义文件-d-ts\" class=\"headerlink\" title=\"*11、类型定义文件(.d.ts)**\"></a>*<em>11、类型定义文件(</em>.d.ts)**</h3><blockquote>\n<p>使用已有的javascript工具包</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"learn-typescript\"><a href=\"#learn-typescript\" class=\"headerlink\" title=\"learn-typescript\"></a>learn-typescript</h1><p>Created: December 14, 2020 12:34 PM</p>\n<p><img src=\"Untitled.png\" alt=\"Untitled.png\"></p>\n<h1 id=\"10分钟搞定TypeScript-语法\"><a href=\"#10分钟搞定TypeScript-语法\" class=\"headerlink\" title=\"10分钟搞定TypeScript 语法\"></a><strong>10分钟搞定TypeScript 语法</strong></h1><h3 id=\"一、多行字符串\"><a href=\"#一、多行字符串\" class=\"headerlink\" title=\"一、多行字符串\"></a><strong>一、多行字符串</strong></h3><blockquote>\n<p>注意是Esc下面的符号</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var context &#x3D; &#96;aaa</span><br><span class=\"line\">asdf</span><br><span class=\"line\">dsaf&#96;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; $&#123;param&#125; 输出param变量 </span><br><span class=\"line\">console.log(&#96;hell $&#123;context&#125;&#96;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"二、字符串模板\"><a href=\"#二、字符串模板\" class=\"headerlink\" title=\"二、字符串模板\"></a><strong>二、字符串模板</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&#96;&lt;div&gt;</span><br><span class=\"line\">                &lt;span&gt;$&#123;context&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">            &lt;div&#x2F;&gt;&#96;</span><br><span class=\"line\">            )</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"三、自动拆分字符串\"><a href=\"#三、自动拆分字符串\" class=\"headerlink\" title=\"三、自动拆分字符串\"></a><strong>三、自动拆分字符串</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test(template:any, name:string, age:Number)&#123;</span><br><span class=\"line\">    console.log(template)</span><br><span class=\"line\">    console.log(name)</span><br><span class=\"line\">    console.log(age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var myName &#x3D; &quot;wo&quot;</span><br><span class=\"line\">var getAge&#x3D; function()&#123;</span><br><span class=\"line\">    return 12 </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test&#96;hello my name is $&#123;myName&#125;, i&#39;m $$&#123;getAge&#125;&#96;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"四、指定参数类型\"><a href=\"#四、指定参数类型\" class=\"headerlink\" title=\"四、指定参数类型\"></a><strong>四、指定参数类型</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var myName2:string &#x3D; &quot;guoyuhang&quot;</span><br><span class=\"line\">myName2 &#x3D; 2     &#x2F;&#x2F;类型不同报错</span><br><span class=\"line\">var alias &#x3D; &quot;xixi&quot;</span><br><span class=\"line\">alias &#x3D;12       &#x2F;&#x2F;类型推断机制</span><br><span class=\"line\">var tex:any &#x3D; &quot;abc&quot;</span><br><span class=\"line\">tex &#x3D; 12</span><br><span class=\"line\"></span><br><span class=\"line\">var age2:Number &#x3D; 12</span><br><span class=\"line\">var flag:boolean &#x3D; true</span><br><span class=\"line\">function te(x:Number):Number&#123;</span><br><span class=\"line\">    return 12</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Person&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var zhangsan:Person &#x3D; new Person()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"五、参数指定默认值，给方法变量指定默认值\"><a href=\"#五、参数指定默认值，给方法变量指定默认值\" class=\"headerlink\" title=\"五、参数指定默认值，给方法变量指定默认值\"></a><strong>五、参数指定默认值，给方法变量指定默认值</strong></h3><h3 id=\"（1）默认值参数要放最后面\"><a href=\"#（1）默认值参数要放最后面\" class=\"headerlink\" title=\"（1）默认值参数要放最后面\"></a><strong>（1）默认值参数要放最后面</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test3(a:string,b:string,c:string&#x3D;&quot;jojo&quot;)&#123;</span><br><span class=\"line\">    console.log(&#96;$&#123;a&#125;$&#123;b&#125;$&#123;c&#125;&#96;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test3(&quot;xxx&quot;,&quot;yyy&quot;,&quot;zzz&quot;)</span><br><span class=\"line\">test3(&quot;xxx&quot;,&quot;yyy&quot;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"六、可选参数\"><a href=\"#六、可选参数\" class=\"headerlink\" title=\"六、可选参数\"></a><strong>六、可选参数</strong></h3><blockquote>\n<p>要处理可选参数，不然会在方法体里报错</p>\n</blockquote>\n<h3 id=\"（1）可选参数必须放在必填参数后边\"><a href=\"#（1）可选参数必须放在必填参数后边\" class=\"headerlink\" title=\"（1）可选参数必须放在必填参数后边\"></a><strong>（1）可选参数必须放在必填参数后边</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test4(a: string,b?: string,c: string&#x3D;&quot;jojo&quot;)&#123;</span><br><span class=\"line\">    console.log(&#96;$&#123;a&#125;$&#123;b&#125;$&#123;c&#125;&#96;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test4(&quot;xxx&quot;,&quot;yyy&quot;,&quot;zzz&quot;)</span><br><span class=\"line\">test4(&quot;xxx&quot;,&quot;yyy&quot;)</span><br><span class=\"line\">test4(&quot;xxx&quot;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"七、函数新特性\"><a href=\"#七、函数新特性\" class=\"headerlink\" title=\"七、函数新特性\"></a><strong>七、函数新特性</strong></h3><h3 id=\"1、Rest-and-Spread：\"><a href=\"#1、Rest-and-Spread：\" class=\"headerlink\" title=\"1、Rest and Spread：\"></a><strong>1、Rest and Spread：</strong></h3><h3 id=\"1-用来声明任意数量的方法参数\"><a href=\"#1-用来声明任意数量的方法参数\" class=\"headerlink\" title=\"(1) 用来声明任意数量的方法参数\"></a><strong>(1) 用来声明任意数量的方法参数</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function argfun(...args:any) &#123;</span><br><span class=\"line\">    args.forEach(</span><br><span class=\"line\">        function (arg:any)&#123;</span><br><span class=\"line\">            console.log(arg)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">argfun(1,3,4,5,6)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-用来生命参数数量固定的方法-typescript还不支持，但是JS支持-可运行\"><a href=\"#2-用来生命参数数量固定的方法-typescript还不支持，但是JS支持-可运行\" class=\"headerlink\" title=\"(2) 用来生命参数数量固定的方法,typescript还不支持，但是JS支持,可运行\"></a><strong>(2) 用来生命参数数量固定的方法,typescript还不支持，但是JS支持,可运行</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function argfun2(arg1:string,arg2:string) &#123;</span><br><span class=\"line\">    console.log(arg1)</span><br><span class=\"line\">    console.log(arg2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var argArry &#x3D; [1]</span><br><span class=\"line\">var argArry2 &#x3D; [1,2]</span><br><span class=\"line\">argfun2(...argArry)</span><br><span class=\"line\">argfun2(...argArry2)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"2、generator函数，控制函数执行过程，Ts不支持-Es支持\"><a href=\"#2、generator函数，控制函数执行过程，Ts不支持-Es支持\" class=\"headerlink\" title=\"2、generator函数，控制函数执行过程，Ts不支持, Es支持\"></a><strong>2、generator函数，控制函数执行过程，Ts不支持, Es支持</strong></h3><h3 id=\"1-简单\"><a href=\"#1-简单\" class=\"headerlink\" title=\"(1) 简单\"></a><strong>(1) 简单</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* doSomething()&#123;</span><br><span class=\"line\">    console.log();</span><br><span class=\"line\">    </span><br><span class=\"line\">    yield;          &#x2F;&#x2F; 控制</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;方法必须赋值给对象</span><br><span class=\"line\">var func1 &#x3D; doSomething();</span><br><span class=\"line\">func1.next();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-复杂\"><a href=\"#2-复杂\" class=\"headerlink\" title=\"(2) 复杂\"></a><strong>(2) 复杂</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* getStockPrice(stock)&#123;</span><br><span class=\"line\">    while(true)&#123;</span><br><span class=\"line\">        yield Math.random()*100;    &#x2F;&#x2F; 控制</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var priceGenerator &#x3D; getStockPrice(&quot;IBM&quot;);</span><br><span class=\"line\">var limit &#x3D; 15;</span><br><span class=\"line\">var price &#x3D; 100;</span><br><span class=\"line\">while(price &gt; limit)&#123;</span><br><span class=\"line\">    price &#x3D; priceGenerator.next().value;</span><br><span class=\"line\">    console.log(&#96;the generate return$&#123;price&#125;&#96;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(&#96;buying stock at $&#123;price&#125;&#96;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"3、析构表达式\"><a href=\"#3、析构表达式\" class=\"headerlink\" title=\"3、析构表达式\"></a><strong>3、析构表达式</strong></h3><blockquote>\n<p>表达式将对象或数组拆解成任意数量的变量</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getStock()&#123;</span><br><span class=\"line\">    return&#123;</span><br><span class=\"line\">        code: &quot;IBM&quot;,</span><br><span class=\"line\">        price: &#123;</span><br><span class=\"line\">            price1: 100,</span><br><span class=\"line\">            price2: 200</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; ES5:分别赋值到本地2个变量上去</span><br><span class=\"line\">var stock &#x3D; getStock()</span><br><span class=\"line\">var code &#x3D; stock.code</span><br><span class=\"line\">var price &#x3D; stock.price</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; ES6:把code属性放到codex变量里</span><br><span class=\"line\">var &#123;code:codex,price: &#123;price1&#125;&#125; &#x3D; getStock()</span><br><span class=\"line\">var array1 &#x3D; [1,2,3,4]</span><br><span class=\"line\">var [,,n1,n2] &#x3D; array1</span><br><span class=\"line\">var [n1,n2,...args] &#x3D; array1</span><br><span class=\"line\">function doSome([nu1, nu2, ...others])&#123;</span><br><span class=\"line\">    console.log(nu1),</span><br><span class=\"line\">    console.log(nu2),</span><br><span class=\"line\">    console.log(others)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">doSome(array1)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"4、箭头表达式-解决this作用域范围预判的错误问题\"><a href=\"#4、箭头表达式-解决this作用域范围预判的错误问题\" class=\"headerlink\" title=\"4、箭头表达式 : 解决this作用域范围预判的错误问题\"></a><strong>4、箭头表达式 : 解决this作用域范围预判的错误问题</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sum &#x3D; (args1:any,args2:Number) &#x3D;&gt; args1+args2</span><br><span class=\"line\">var myArray &#x3D; [1,2,3,45,6]</span><br><span class=\"line\">console.log(myArray.filter(value &#x3D;&gt; value%2 &#x3D;&#x3D; 0 ))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"5、for-of-循环\"><a href=\"#5、for-of-循环\" class=\"headerlink\" title=\"5、for of 循环\"></a><strong>5、for of 循环</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var myArray &#x3D; [1,2,3,4]</span><br><span class=\"line\">myArray.desc &#x3D; &quot;forc&quot;;&#x2F;&#x2F;ts里不能给array指定属性，js可以</span><br><span class=\"line\">myArray.forEach(value &#x3D;&gt; console.log(value))&#x2F;&#x2F;不支持break，忽略掉属性值</span><br><span class=\"line\"></span><br><span class=\"line\">for(var n in myArray)&#123; &#x2F;&#x2F;for in 数组下标和属性名字，任何属性都是键值对</span><br><span class=\"line\">    console.log(n) &#x2F;&#x2F;key</span><br><span class=\"line\">    console.log(myArray[n]) &#x2F;&#x2F;value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">for(var nn of myArray )&#123; &#x2F;&#x2F;只循环数组,忽略属性，可以break,循环字符串会循环字符</span><br><span class=\"line\">    if(nn &gt; 2) break</span><br><span class=\"line\">    console.log(nn)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"6、类定义\"><a href=\"#6、类定义\" class=\"headerlink\" title=\"6、类定义\"></a><strong>6、类定义</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person2&#123;</span><br><span class=\"line\">    name:any;</span><br><span class=\"line\"></span><br><span class=\"line\">    eat()&#123;</span><br><span class=\"line\">        console.log(&quot;i&#39;m eating&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private s()&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;只能内部访问</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected a:any;&#x2F;&#x2F;内部和子类可以访问</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;构造函数：实例化调用1次</span><br><span class=\"line\">    &#x2F;&#x2F;public name2 是声明了1个属性，用this调用,否则不行</span><br><span class=\"line\">    constructor(public name2:string)&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;内部访问</span><br><span class=\"line\">        &#x2F;&#x2F;new 时调用1次</span><br><span class=\"line\">        &#x2F;&#x2F;初始化</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var p1 &#x3D; new Person2(&quot;a&quot;)</span><br><span class=\"line\">p1.name &#x3D; &quot;superman&quot;</span><br><span class=\"line\">p1.eat()</span><br><span class=\"line\"></span><br><span class=\"line\">var p2 &#x3D; new Person2(&quot;b&quot;)</span><br><span class=\"line\">p2.name &#x3D; &quot;superman2&quot;</span><br><span class=\"line\">p2.eat()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"7、类继承-extends-继承关系，”的”的关系\"><a href=\"#7、类继承-extends-继承关系，”的”的关系\" class=\"headerlink\" title=\"7、类继承 extends : 继承关系，”的”的关系\"></a><strong>7、类继承 extends : 继承关系，”的”的关系</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Employee extends Person2&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;子类构造函数必须调用父类构造函数</span><br><span class=\"line\">    constructor(name:string,code:string)&#123;</span><br><span class=\"line\">        super(name)</span><br><span class=\"line\">        this.code &#x3D; code</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;指定新的属性和方法</span><br><span class=\"line\">    code: string &#x3D; &quot;&quot;;</span><br><span class=\"line\">    work()&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;super可以调父类其他方法</span><br><span class=\"line\">        super.eat();</span><br><span class=\"line\">        console.log(&quot;do work&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    doWork()&#123;</span><br><span class=\"line\">        console.log(&quot;do work&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var e1 &#x3D; new Employee(&quot;b&quot;,&quot;&quot;)</span><br><span class=\"line\">e1.eat()</span><br><span class=\"line\">e1.work()</span><br><span class=\"line\">e1.doWork()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"8、泛型\"><a href=\"#8、泛型\" class=\"headerlink\" title=\"8、泛型\"></a><strong>8、泛型</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var work:Array&lt;Person2&gt; &#x3D; []</span><br><span class=\"line\">work[0] &#x3D; new Person2(&quot;&quot;)</span><br><span class=\"line\">work[1] &#x3D; new Employee(&quot;&quot;,&quot;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;接口建立代码约定,interface生命，implements</span><br><span class=\"line\">interface IPerson&#123;</span><br><span class=\"line\">    name:string;</span><br><span class=\"line\">    age:number;</span><br><span class=\"line\">    eat():any;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Person3 implements IPerson&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;方法参数类型声明</span><br><span class=\"line\">    constructor(public config:IPerson) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    name &#x3D; &quot;&quot;;</span><br><span class=\"line\">    age &#x3D;12;</span><br><span class=\"line\">    eat()&#123;</span><br><span class=\"line\">        console.log()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"9、模块-决定哪些资源让外部使用\"><a href=\"#9、模块-决定哪些资源让外部使用\" class=\"headerlink\" title=\"9、模块-决定哪些资源让外部使用\"></a><strong>9、模块-决定哪些资源让外部使用</strong></h3><blockquote>\n<p>创建b.ts文件在同一目录下 “export”关键字表示导出模块中元素</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; b.ts  </span><br><span class=\"line\">export var pro:any;</span><br><span class=\"line\">var pro2:any;</span><br><span class=\"line\">export function a()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function b()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 导入b模块</span><br><span class=\"line\">import &#123;a, pro&#125; from &#39;.&#x2F;b&#39;;</span><br><span class=\"line\">console.log(pro)</span><br><span class=\"line\">a()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"10、注解\"><a href=\"#10、注解\" class=\"headerlink\" title=\"10、注解\"></a><strong>10、注解</strong></h3><blockquote>\n<p>给程序元素加上更直观的说明，与逻辑无关，而是供给指定工具或框架使用 告诉框架，如何处理一下属性或或方法</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 如</span><br><span class=\"line\">@action.object(&#123; type: &#39;param&#39; &#125;)</span><br><span class=\"line\">export class ActionInput &#123;</span><br><span class=\"line\">    @action.param(&#123; type: &#39;String&#39;, required: true &#125;)</span><br><span class=\"line\">    name: string</span><br><span class=\"line\"></span><br><span class=\"line\">    @action.param(&#123; type: &#39;String&#39;, required: true &#125;)</span><br><span class=\"line\">    description: string</span><br><span class=\"line\"></span><br><span class=\"line\">    @action.param(&#123; type: &#39;String&#39;, required: true &#125;)</span><br><span class=\"line\">    type: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"11、类型定义文件-d-ts\"><a href=\"#11、类型定义文件-d-ts\" class=\"headerlink\" title=\"*11、类型定义文件(.d.ts)**\"></a>*<em>11、类型定义文件(</em>.d.ts)**</h3><blockquote>\n<p>使用已有的javascript工具包</p>\n</blockquote>\n"},{"title":"Chrome Extensions","date":"2017-09-15T11:00:41.000Z","comments":1,"thumbnail":"https://img0.baidu.com/it/u=1754948549,4053210497&fm=26&fmt=auto&gp=0.jpg","banner":"https://img0.baidu.com/it/u=1754948549,4053210497&fm=26&fmt=auto&gp=0.jpg","cover":"https://img0.baidu.com/it/u=1754948549,4053210497&fm=26&fmt=auto&gp=0.jpg","_content":"\n# 1. 概览:\n\n![Untitled.png](Untitled.png)\n\n# 2. **入门**\n\n首先我们看看的浏览器插件的定义:\n\n浏览器插件是基于Web技术（例如HTML，JavaScript和CSS）构建的可以定制浏览体验的小型软件程序。它们使用户可以根据个人需要或偏好来定制Chrome功能和行为。\n\n要想开发一款浏览器插件,我们只需要有一个manifest.json文件即可, 为了快速上手浏览器插件开发,我们需要把浏览器开发者工具打开, 具体步骤如下:\n\n1. **在谷歌浏览器中输入chrome://extensions/**\n2. **将开发者模式启动**\n\n![https://pic3.zhimg.com/80/v2-a557be3300d7012d25f89d00038b7e22_720w.jpg](https://pic3.zhimg.com/80/v2-a557be3300d7012d25f89d00038b7e22_720w.jpg)\n\n## 2.1 **导入自己的浏览器插件包**\n\n通过以上三个步骤我们就可以开启浏览器插件开发之旅了.浏览器插件一般放在浏览器地址栏右侧,我们可以在manifest.json文件配置插件的icon,并配置一定的规则,就能看到我们的浏览器插件图标了,如下图:\n\n![https://pic4.zhimg.com/80/v2-023f0963017950f69fee85bfaf35bd3b_720w.jpg](https://pic4.zhimg.com/80/v2-023f0963017950f69fee85bfaf35bd3b_720w.jpg)\n\n下面我们来具体讲解一下浏览器插件开发的核心概念.\n\n## 2.2 **核心知识点**\n\n浏览器插件一般涉及以下几个核心文件:\n\n- **manifest.json** 用来配置所有和插件相关的配置(必须放在根目录)\n- **background.js** 后台脚本(后台页面),生命周期和浏览器一致,一般放置全局代码\n- **content-scripts** 插件向页面注入脚本的一种形式,我们可以通过content-scripts向页面注入js和css资源,并可控制允许注入的范围\n- **popup** 点击插件图标后打开的自定义窗口, 用来处理用户交互\n\n笔者画了一张简图来大致表示一下它们之间的关系:\n\n![https://pic4.zhimg.com/80/v2-bcebb2fc6d562fefac9de971f6e0ee9f_720w.jpg](https://pic4.zhimg.com/80/v2-bcebb2fc6d562fefac9de971f6e0ee9f_720w.jpg)\n\n接下来我们来具体了解一下一上几个核心知识点.\n\n### 2**.2.1 manifest.json**\n\n谷歌官网简单的配置,如下:\n\n```docker\n{\n    \"name\": \"My Extension\",\n    \"version\": \"2.1\",\n    \"description\": \"Gets information from Google.\",\n    \"icons\": {\n      \"128\": \"icon_16.png\",\n      \"128\": \"icon_32.png\",\n      \"128\": \"icon_48.png\",\n      \"128\": \"icon_128.png\"\n    },\n    \"background\": {\n      \"persistent\": false,\n      \"scripts\": [\"background_script.js\"]\n    },\n    \"permissions\": [\"https://*.google.com/\", \"activeTab\"],\n    \"browser_action\": {\n      \"default_icon\": \"icon_16.png\",\n      \"default_popup\": \"popup.html\"\n    }\n }\n```\n\n各字段含义介绍如下:\n\n- **name** 浏览器插件名称, 将会在插件列表中显示\n- **description** 浏览器插件简介, 方便告诉开发者插件的功能和作用, 将会在插件列表中显示\n- **version** 浏览器插件版本\n- **icon** 浏览器插件图标\n\n![Untitled%201.png](Untitled%201.png)\n\n- **background** 背景页的脚本路径,一般为插件目录的相对地址\n- **permissions** 允许使用的浏览器API的权限,比如contextMenus(右键菜单), tabs(操作标签), webRequest(使用web请求), storage(允许使用本地存储), “**http://**”(可以通过executeScript或者insertCSS访问的网站)\n- **browser_action** 浏览器右上角图标设置(包括popup页面, 鼠标悬停时的标题, icon等)\n- **content_scripts** 需要直接注入页面的javascript脚本\n- **web_accessible_resources** 普通页面能够直接访问的插件资源列表，如果不设置是无法直接访问的\n- **chrome_url_overrides** 覆盖浏览器默认页面(经常用来做浏览器的自定义桌面)\n- **omnibox** 向地址栏注册一个关键字以提供搜索建议，只能设置一个关键字(多用于自定义搜索拦截)\n- **default_locale** 默认语言(比如\"zh_CN\")\n\n### 2**.2.2 background.js**\n\nbackground页面主要用来提供一些全局配置, 事件监听, 业务转发等.举几个常用案例:\n\n**1.定义右键菜单**\n\n```docker\n// background.js\nconst systems = {\n  a: '趣谈前端',\n  b: '掘金',\n  c: '微信'\n}\n\nchrome.runtime.onInstalled.addListener(function() {\n  // 上下文菜单\n  for (let key of Object.keys(systems)) {\n    chrome.contextMenus.create({\n      id: key,\n      title: systems[key],\n      type: 'normal',\n      contexts: ['selection'],\n    });\n  }\n});\n\n// manifest.json\n{\n    \"permissions\": [\"contextMenus\"]\n}\n```\n\n效果如下:\n\n![Untitled%202.png](Untitled%202.png)\n\n**2.设置只有.com后缀的页面才会激活插件**\n\n```docker\nchrome.runtime.onInstalled.addListener(function() {\n  // 类似于什么时候激活浏览器插件图标这种感觉\n  chrome.declarativeContent.onPageChanged.removeRules(undefined, function() {\n    chrome.declarativeContent.onPageChanged.addRules([{\n      conditions: [new chrome.declarativeContent.PageStateMatcher({\n        pageUrl: {hostSuffix: '.com'},\n      })\n      ],\n      actions: [new chrome.declarativeContent.ShowPageAction()]\n    }]);\n  });\n});\n```\n\n如下图所示,当页面地址的后缀不等于.com时,插件icon将不被激活:\n\n![https://pic3.zhimg.com/80/v2-e71bb0259baff0138a3ed613d3636342_720w.jpg](https://pic3.zhimg.com/80/v2-e71bb0259baff0138a3ed613d3636342_720w.jpg)\n\n**3.和content_script或者popup页面进行消息通信**\n\n```docker\nchrome.runtime.onMessage.addListener(\n\tfunction(request, sender, sendResponse) {\n\t  console.log(sender.tab ?\n\t              \"from a content script:\" + sender.tab.url :\n\t              \"from the extension\");\n\t  if (request.greeting == \"hello\")\n\t    sendResponse({farewell: \"goodbye\"});\n\t});\n```\n\n### 2.**2.3 content-scripts**\n\n内容脚本一般植入会被植入到页面中, 并且可以控制页面中的dom. 我们可以利用它实现屏蔽网页广告, 定制页面皮肤等操作. 在manifest.json中的基本配置如下:\n\n```docker\n{\n    \"content_scripts\": [{\n    \"matches\": [\n        \"http://*/*\",\n        \"https://*/*\"\n    ],\n    \"js\": [\n        \"lib/jquery3.4.min.js\",\n        \"content_script.js\"\n    ],\n    \"css\": [\"base.css\"]\n  }],\n}\n```\n\n以上代码中我们定义了content_scripts允许注入的页面范围, 插入页面的js以及css, 这样我们就能轻松改变某一个页面的样式.比如我们可以在页面中注入一个按钮:\n\n![Untitled%203.png](Untitled%203.png)\n\n后面的浏览器插件案例中会详细介绍content_scripts的用法.\n\n### **2.2.4 popup**\n\npopup是用户点击插件图标时打开的一个小窗口，当失去焦点后窗口就立即关闭，我们一般用它来处理一些简单的用户交互和插件说明。\n\n由于popup窗口也是一个网页,所以我们一般会建立一个popup.html和popup.js用来控制popup的页面展示和交互.我们在manifest.json中配置如下:\n\n```docker\n{\n    \"page_action\": {\n        \"default_title\": \"小夕图片提取插件\",\n        \"default_popup\": \"popup.html\"\n  },\n}\n```\n\n这里要注意一点的是,我们在popup.html中不能直接使用script脚本,需要用引入脚本文件的方式.如下:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>在线图片提取工具</title>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  </head>\n  <body>\n    <div class=\"pop-wrap\">\n    </div>\n    <script src=\"lib/jquery3.4.min.js\"></script>\n    <script src=\"popup.js\"></script>\n  </body>\n</html>\n```\n\n以下是笔者写的一个插件的popup页面:\n\n![Untitled%204.png](Untitled%204.png)\n\n## 2.3.通信机制\n\n对于一个相对复杂的浏览器插件来说,我们不仅仅只操作dom或者提供基本的功能就行了,我们还需要向第三方或者自己的服务器抓取有用的页面数据,这个时候就需要用到插件的通信机制了.\n\n因为content_script脚本存在于当前页面,受同源策略影响,导致我们无法将捕获到的数据传给第三方平台或者自己的服务器, 所以我们需要基于浏览器的通信API.一下是谷歌浏览器插件的通信流程:\n\n![https://pic2.zhimg.com/80/v2-5a05979498bf90fe0443290623e1c8cd_720w.jpg](https://pic2.zhimg.com/80/v2-5a05979498bf90fe0443290623e1c8cd_720w.jpg)\n\n### 2.**3.1 popup和background相互通信**\n\n由官方文档可知popup可以直接访问background页的方法,所以popup可以直接与其通信:\n\n```html\n// background.js\nvar getData = (data) => { console.log('拿到数据:' + data) }\n// popup.js\nlet bgObj = chrome.extension.getBackgroundPage();\nbgObj.getData(); // 访问bg的函数\n```\n\n### 2.**3.2 popup或者background页和content_script通信**\n\n这里我们使用chrome的tabs API,如下:\n\n```html\n// popup.js\n// 发送消息给content_script\nchrome.tabs.query({active: true, currentWindow: true}, function(tabs) {\n    chrome.tabs.sendMessage(tabs[0].id, \"activeBtn\", function(response) {\n      console.log(response);\n    });\n  });\n  \n// 接收消息\nchrome.runtime.onMessage.addListener(\n  function(request, sender, sendResponse) {\n    console.log(sender.tab ?\n                \"from a content script:\" + sender.tab.url :\n                \"from the extension\");\n    if (request.greeting == \"hello\")\n      sendResponse({farewell: \"goodbye\"});\n  });\n```\n\ncontent_script接收和发送消息:\n\n```html\n// 接收消息\nchrome.runtime.onMessage.addListener(\n  function(message, sender, sendResponse) {\n    if (message == \"activeBtn\"){\n      // ...\n      sendResponse({farewell: \"激活成功\"});\n    }\n });\n \n // 主动发送消息\n chrome.runtime.sendMessage({greeting: \"hello\"}, function(response) {\n   console.log(response, document.body);\n   // document.body.style.backgroundColor=\"orange\"\n});\n```\n\n有关消息的长连接,在谷歌官网也写的很清楚:\n\n![https://pic2.zhimg.com/80/v2-8064fff68ca7ab8e0d40631b6b7155fd_720w.jpg](https://pic2.zhimg.com/80/v2-8064fff68ca7ab8e0d40631b6b7155fd_720w.jpg)\n\n我们可以采用如下方式进行长连接:\n\n```html\n// content_script.js\nvar port = chrome.runtime.connect({name: \"徐小夕\"});\nport.postMessage({Ling: \"你好\"});\nport.onMessage.addListener(function(msg) {\n  if (msg.question == \"你是做什么滴?\")\n    port.postMessage({answer: \"搬砖\"});\n  else if (msg.question == \"搬砖有钱吗?\")\n    port.postMessage({answer: \"木有\"});\n});\n\n// popup.js\nchrome.runtime.onConnect.addListener(function(port) {\n  port.onMessage.addListener(function(msg) {\n    if (msg.Ling == \"你好\")\n      port.postMessage({question: \"你是做什么滴?\"});\n    else if (msg.answer == \"搬砖\")\n      port.postMessage({question: \"搬砖有钱吗?\"});\n    else if (msg.answer == \"木有\")\n      port.postMessage({question: \"太难了.\"});\n  });\n});\n```\n\n## **4.数据存储**\n\nchrome.storage用来针对插件全局进行数据存储,我们在任何一个页面(popup或content_script或background)下存储了数据,我们在以上三个页面都可以获取到, 具体用法如下:\n\n```html\n获取数据\nchrome.storage.sync.get('imgArr', function(data) {\n  console.log(data)\n});\n// 保存数据\nchrome.storage.sync.set({'imgArr': imgArr}, function() {\n    console.log('保存成功');\n  });\n  \n// 另一种方式\nchrome.storage.local.set({key: value}, function() {\n  console.log('Value is set to ' + value);\n});\n```\n\n## **5.应用场景**\n\n谷歌浏览器的插件应用场景很多,正如文章开头的思维导图中写的.以下是笔者总结的一些应用场景，大家感兴趣可以尝试去实现：\n\n- 谷歌浏览器自定义桌面\n- 网页性能分析工具\n- 网页爬虫\n- 埋点工具\n- 网页热力图生成工具\n- 安全拦截插件\n- 广告过滤插件\n- 网站动态换肤\n- 第三方数据导入\n- 代码格式化工具\n- 在线协作工具\n- 防作弊插件\n\n还有很多实用工具可以开发，大家可以好好把玩。接下来就来通过实现一个网页图片提取插件，来总结以下浏览器插件开发流程。\n\n## 6.开发一款抓取网站图片资源的浏览器插件\n\n首先还是按照笔者的风格，在开发任何一种工具之前都要明确需求，所以我们来看看该插件的功能点：\n\n- 能植入网页按钮，通过点击按钮捕获网页图片\n- 能在用户端展示捕获的图片\n- 点击插件能预览捕获的图片\n\n基本上就这几个功能，接下来我会展示核心代码，在介绍代码之前我们先预览一下插件的实现效果：\n\n![https://pic3.zhimg.com/80/v2-0c79ea16b92fb0619cd70248a8090462_720w.jpg](https://pic3.zhimg.com/80/v2-0c79ea16b92fb0619cd70248a8090462_720w.jpg)\n\n![https://pic2.zhimg.com/80/v2-ecee95b625f566a9595d73d55768c211_720w.jpg](https://pic2.zhimg.com/80/v2-ecee95b625f566a9595d73d55768c211_720w.jpg)\n\n插件目录结构如下：\n\n![https://pic1.zhimg.com/80/v2-79f003a0e9a21ec8566a37a3a4820e50_720w.jpg](https://pic1.zhimg.com/80/v2-79f003a0e9a21ec8566a37a3a4820e50_720w.jpg)\n\n因为插件的开发比较简单，所以我直接用jquery开发。这里我们主要关注popup.js和content_script.js, popup.js中主要用来获取从content_script页传过来的图片数据，并展示在popup.html中，另外又一个需要注意的是当页面没有注入生成按钮时，popupu需要发送信息给content页面，主动让其生成按钮，代码如下：\n\n```jsx\nchrome.storage.sync.get('imgArr', function(data) {\n  data.imgArr && data.imgArr.forEach(item => {\n    var imgWrap = $(\"<div class='img-box'></div>\")\n    var img = $(\"<img src='\" + item + \"' alt='\" + item + \"' />\")\n    imgWrap.append(img);\n    $('#content').append(imgWrap);\n    $('.empty').hide();\n  })\n});\n\n$('#activeBtn').click(function(element) {\n  chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {\n    chrome.tabs.sendMessage(tabs[0].id, \"activeBtn\", function(response) {\n      console.log(response);\n    });\n  });\n});\n```\n\n对于content页面，我们需要实现的是动态生成按钮，并且在页面中植入弹窗来展示获取到的图片，另一方面需要将图片数据传递给storage，以便popup页面可以获取图片数据。\n\n由于页面比较简单，笔者就不用过多的第三方库了，笔者先简单手写一个modal组件，代码如下：\n\n```jsx\n// 弹窗\n~function Modal() {\n  var modal;\n  \n  if(this instanceof Modal) {\n    this.init = function(opt) {\n      modal = $(\"<div class='modal'></div>\");\n      var title = $(\"<div class='modal-title'>\" + opt.title + \"</div>\");\n      var close_btn = $(\"<span class='modal-close-btn'>X</span>\");\n      var content = $(\"<div class='modal-content'></div>\");\n      var mask = $(\"<div class='modal-mask'></div>\");\n      close_btn.click(function(){\n        modal.hide()\n      })\n      title.append(close_btn);\n      content.append(title);\n      content.append(opt.content);\n      modal.append(content);\n      modal.append(mask);\n      $('body').append(modal);\n    }\n    this.show = function(opt) {\n      if(modal) {\n        modal.show();\n      }else {\n        var options = {\n          title: opt.title || '标题',\n          content: opt.content || ''\n        }\n        this.init(options)\n        modal.show();\n      }\n    }\n    this.hide = function() {\n      modal.hide();\n    }\n  }else {\n    window.Modal = new Modal()\n  }\n}()\n```\n\n**第一步，我们先批量获取页面图片数据：**\n\n```jsx\nvar imgArr = []\n$('img').each(function(i) {\n  var src = $(this).attr('src');\n  var realSrc = /^(http|https)/.test(src) ? src : location.protocol+ '//' + location.host + src;\n  imgArr.push(realSrc)\n})\n```\n\n因为图片的src路径可能是相对地址，所以笔者在这里用正则简单处理以下，当然我们可以进行更细粒度的控制。\n\n**第二步，将图片数据存储到storage中：**\n\n```jsx\nchrome.storage.sync.set({'imgArr': imgArr}, function() {\n  console.log('保存成功');\n});\n```\n\n**第三步，生成预览图片的弹窗，这里用笔者上面实现的modal组件**：\n\n```jsx\nModal.show({\n  title: '提取结果',\n  content: imgBox\n})\n```\n\n**第四步，当popup发送激活按钮的通知时，我们要在网页中动态插入生成按钮：**\n\n```jsx\nchrome.runtime.onMessage.addListener(\n  function(message, sender, sendResponse) {\n    if (message == \"activeBtn\"){\n      if(!$('.crawl-btn')) {\n        $('body').append(\"<div class='crawl-btn'>提取</div>\")\n      }else {\n        $('.crawl-btn').css(\"background-color\",\"orange\");\n        setTimeout(() => {\n          $('.crawl-btn').css(\"background-color\",\"#06c\");\n        }, 3000);\n      }\n      sendResponse({farewell: \"激活成功\"});\n    }\n });\n```\n\nsetTimeout那段纯属是为了吸引用户视线，当然我们可以用更优雅的方式来处理。插件核心代码主要是这些，当然还有很多细节要考虑，我把配置文件和一些细节放到github了，如果感兴趣的朋友可以安装感受一下。\n\ngithub地址：[https://github.com/MrXujiang/fetchImg](https://github.com/MrXujiang/fetchImg)","source":"_posts/ChromeExtensions.md","raw":"---\ntitle: Chrome Extensions\ndate: 2017-09-15 19:00:41\ncomments: true\ntags: \n    - 浏览器插件\ncategories: 插件\nthumbnail: https://img0.baidu.com/it/u=1754948549,4053210497&fm=26&fmt=auto&gp=0.jpg\nbanner: https://img0.baidu.com/it/u=1754948549,4053210497&fm=26&fmt=auto&gp=0.jpg\ncover: https://img0.baidu.com/it/u=1754948549,4053210497&fm=26&fmt=auto&gp=0.jpg\n---\n\n# 1. 概览:\n\n![Untitled.png](Untitled.png)\n\n# 2. **入门**\n\n首先我们看看的浏览器插件的定义:\n\n浏览器插件是基于Web技术（例如HTML，JavaScript和CSS）构建的可以定制浏览体验的小型软件程序。它们使用户可以根据个人需要或偏好来定制Chrome功能和行为。\n\n要想开发一款浏览器插件,我们只需要有一个manifest.json文件即可, 为了快速上手浏览器插件开发,我们需要把浏览器开发者工具打开, 具体步骤如下:\n\n1. **在谷歌浏览器中输入chrome://extensions/**\n2. **将开发者模式启动**\n\n![https://pic3.zhimg.com/80/v2-a557be3300d7012d25f89d00038b7e22_720w.jpg](https://pic3.zhimg.com/80/v2-a557be3300d7012d25f89d00038b7e22_720w.jpg)\n\n## 2.1 **导入自己的浏览器插件包**\n\n通过以上三个步骤我们就可以开启浏览器插件开发之旅了.浏览器插件一般放在浏览器地址栏右侧,我们可以在manifest.json文件配置插件的icon,并配置一定的规则,就能看到我们的浏览器插件图标了,如下图:\n\n![https://pic4.zhimg.com/80/v2-023f0963017950f69fee85bfaf35bd3b_720w.jpg](https://pic4.zhimg.com/80/v2-023f0963017950f69fee85bfaf35bd3b_720w.jpg)\n\n下面我们来具体讲解一下浏览器插件开发的核心概念.\n\n## 2.2 **核心知识点**\n\n浏览器插件一般涉及以下几个核心文件:\n\n- **manifest.json** 用来配置所有和插件相关的配置(必须放在根目录)\n- **background.js** 后台脚本(后台页面),生命周期和浏览器一致,一般放置全局代码\n- **content-scripts** 插件向页面注入脚本的一种形式,我们可以通过content-scripts向页面注入js和css资源,并可控制允许注入的范围\n- **popup** 点击插件图标后打开的自定义窗口, 用来处理用户交互\n\n笔者画了一张简图来大致表示一下它们之间的关系:\n\n![https://pic4.zhimg.com/80/v2-bcebb2fc6d562fefac9de971f6e0ee9f_720w.jpg](https://pic4.zhimg.com/80/v2-bcebb2fc6d562fefac9de971f6e0ee9f_720w.jpg)\n\n接下来我们来具体了解一下一上几个核心知识点.\n\n### 2**.2.1 manifest.json**\n\n谷歌官网简单的配置,如下:\n\n```docker\n{\n    \"name\": \"My Extension\",\n    \"version\": \"2.1\",\n    \"description\": \"Gets information from Google.\",\n    \"icons\": {\n      \"128\": \"icon_16.png\",\n      \"128\": \"icon_32.png\",\n      \"128\": \"icon_48.png\",\n      \"128\": \"icon_128.png\"\n    },\n    \"background\": {\n      \"persistent\": false,\n      \"scripts\": [\"background_script.js\"]\n    },\n    \"permissions\": [\"https://*.google.com/\", \"activeTab\"],\n    \"browser_action\": {\n      \"default_icon\": \"icon_16.png\",\n      \"default_popup\": \"popup.html\"\n    }\n }\n```\n\n各字段含义介绍如下:\n\n- **name** 浏览器插件名称, 将会在插件列表中显示\n- **description** 浏览器插件简介, 方便告诉开发者插件的功能和作用, 将会在插件列表中显示\n- **version** 浏览器插件版本\n- **icon** 浏览器插件图标\n\n![Untitled%201.png](Untitled%201.png)\n\n- **background** 背景页的脚本路径,一般为插件目录的相对地址\n- **permissions** 允许使用的浏览器API的权限,比如contextMenus(右键菜单), tabs(操作标签), webRequest(使用web请求), storage(允许使用本地存储), “**http://**”(可以通过executeScript或者insertCSS访问的网站)\n- **browser_action** 浏览器右上角图标设置(包括popup页面, 鼠标悬停时的标题, icon等)\n- **content_scripts** 需要直接注入页面的javascript脚本\n- **web_accessible_resources** 普通页面能够直接访问的插件资源列表，如果不设置是无法直接访问的\n- **chrome_url_overrides** 覆盖浏览器默认页面(经常用来做浏览器的自定义桌面)\n- **omnibox** 向地址栏注册一个关键字以提供搜索建议，只能设置一个关键字(多用于自定义搜索拦截)\n- **default_locale** 默认语言(比如\"zh_CN\")\n\n### 2**.2.2 background.js**\n\nbackground页面主要用来提供一些全局配置, 事件监听, 业务转发等.举几个常用案例:\n\n**1.定义右键菜单**\n\n```docker\n// background.js\nconst systems = {\n  a: '趣谈前端',\n  b: '掘金',\n  c: '微信'\n}\n\nchrome.runtime.onInstalled.addListener(function() {\n  // 上下文菜单\n  for (let key of Object.keys(systems)) {\n    chrome.contextMenus.create({\n      id: key,\n      title: systems[key],\n      type: 'normal',\n      contexts: ['selection'],\n    });\n  }\n});\n\n// manifest.json\n{\n    \"permissions\": [\"contextMenus\"]\n}\n```\n\n效果如下:\n\n![Untitled%202.png](Untitled%202.png)\n\n**2.设置只有.com后缀的页面才会激活插件**\n\n```docker\nchrome.runtime.onInstalled.addListener(function() {\n  // 类似于什么时候激活浏览器插件图标这种感觉\n  chrome.declarativeContent.onPageChanged.removeRules(undefined, function() {\n    chrome.declarativeContent.onPageChanged.addRules([{\n      conditions: [new chrome.declarativeContent.PageStateMatcher({\n        pageUrl: {hostSuffix: '.com'},\n      })\n      ],\n      actions: [new chrome.declarativeContent.ShowPageAction()]\n    }]);\n  });\n});\n```\n\n如下图所示,当页面地址的后缀不等于.com时,插件icon将不被激活:\n\n![https://pic3.zhimg.com/80/v2-e71bb0259baff0138a3ed613d3636342_720w.jpg](https://pic3.zhimg.com/80/v2-e71bb0259baff0138a3ed613d3636342_720w.jpg)\n\n**3.和content_script或者popup页面进行消息通信**\n\n```docker\nchrome.runtime.onMessage.addListener(\n\tfunction(request, sender, sendResponse) {\n\t  console.log(sender.tab ?\n\t              \"from a content script:\" + sender.tab.url :\n\t              \"from the extension\");\n\t  if (request.greeting == \"hello\")\n\t    sendResponse({farewell: \"goodbye\"});\n\t});\n```\n\n### 2.**2.3 content-scripts**\n\n内容脚本一般植入会被植入到页面中, 并且可以控制页面中的dom. 我们可以利用它实现屏蔽网页广告, 定制页面皮肤等操作. 在manifest.json中的基本配置如下:\n\n```docker\n{\n    \"content_scripts\": [{\n    \"matches\": [\n        \"http://*/*\",\n        \"https://*/*\"\n    ],\n    \"js\": [\n        \"lib/jquery3.4.min.js\",\n        \"content_script.js\"\n    ],\n    \"css\": [\"base.css\"]\n  }],\n}\n```\n\n以上代码中我们定义了content_scripts允许注入的页面范围, 插入页面的js以及css, 这样我们就能轻松改变某一个页面的样式.比如我们可以在页面中注入一个按钮:\n\n![Untitled%203.png](Untitled%203.png)\n\n后面的浏览器插件案例中会详细介绍content_scripts的用法.\n\n### **2.2.4 popup**\n\npopup是用户点击插件图标时打开的一个小窗口，当失去焦点后窗口就立即关闭，我们一般用它来处理一些简单的用户交互和插件说明。\n\n由于popup窗口也是一个网页,所以我们一般会建立一个popup.html和popup.js用来控制popup的页面展示和交互.我们在manifest.json中配置如下:\n\n```docker\n{\n    \"page_action\": {\n        \"default_title\": \"小夕图片提取插件\",\n        \"default_popup\": \"popup.html\"\n  },\n}\n```\n\n这里要注意一点的是,我们在popup.html中不能直接使用script脚本,需要用引入脚本文件的方式.如下:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>在线图片提取工具</title>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  </head>\n  <body>\n    <div class=\"pop-wrap\">\n    </div>\n    <script src=\"lib/jquery3.4.min.js\"></script>\n    <script src=\"popup.js\"></script>\n  </body>\n</html>\n```\n\n以下是笔者写的一个插件的popup页面:\n\n![Untitled%204.png](Untitled%204.png)\n\n## 2.3.通信机制\n\n对于一个相对复杂的浏览器插件来说,我们不仅仅只操作dom或者提供基本的功能就行了,我们还需要向第三方或者自己的服务器抓取有用的页面数据,这个时候就需要用到插件的通信机制了.\n\n因为content_script脚本存在于当前页面,受同源策略影响,导致我们无法将捕获到的数据传给第三方平台或者自己的服务器, 所以我们需要基于浏览器的通信API.一下是谷歌浏览器插件的通信流程:\n\n![https://pic2.zhimg.com/80/v2-5a05979498bf90fe0443290623e1c8cd_720w.jpg](https://pic2.zhimg.com/80/v2-5a05979498bf90fe0443290623e1c8cd_720w.jpg)\n\n### 2.**3.1 popup和background相互通信**\n\n由官方文档可知popup可以直接访问background页的方法,所以popup可以直接与其通信:\n\n```html\n// background.js\nvar getData = (data) => { console.log('拿到数据:' + data) }\n// popup.js\nlet bgObj = chrome.extension.getBackgroundPage();\nbgObj.getData(); // 访问bg的函数\n```\n\n### 2.**3.2 popup或者background页和content_script通信**\n\n这里我们使用chrome的tabs API,如下:\n\n```html\n// popup.js\n// 发送消息给content_script\nchrome.tabs.query({active: true, currentWindow: true}, function(tabs) {\n    chrome.tabs.sendMessage(tabs[0].id, \"activeBtn\", function(response) {\n      console.log(response);\n    });\n  });\n  \n// 接收消息\nchrome.runtime.onMessage.addListener(\n  function(request, sender, sendResponse) {\n    console.log(sender.tab ?\n                \"from a content script:\" + sender.tab.url :\n                \"from the extension\");\n    if (request.greeting == \"hello\")\n      sendResponse({farewell: \"goodbye\"});\n  });\n```\n\ncontent_script接收和发送消息:\n\n```html\n// 接收消息\nchrome.runtime.onMessage.addListener(\n  function(message, sender, sendResponse) {\n    if (message == \"activeBtn\"){\n      // ...\n      sendResponse({farewell: \"激活成功\"});\n    }\n });\n \n // 主动发送消息\n chrome.runtime.sendMessage({greeting: \"hello\"}, function(response) {\n   console.log(response, document.body);\n   // document.body.style.backgroundColor=\"orange\"\n});\n```\n\n有关消息的长连接,在谷歌官网也写的很清楚:\n\n![https://pic2.zhimg.com/80/v2-8064fff68ca7ab8e0d40631b6b7155fd_720w.jpg](https://pic2.zhimg.com/80/v2-8064fff68ca7ab8e0d40631b6b7155fd_720w.jpg)\n\n我们可以采用如下方式进行长连接:\n\n```html\n// content_script.js\nvar port = chrome.runtime.connect({name: \"徐小夕\"});\nport.postMessage({Ling: \"你好\"});\nport.onMessage.addListener(function(msg) {\n  if (msg.question == \"你是做什么滴?\")\n    port.postMessage({answer: \"搬砖\"});\n  else if (msg.question == \"搬砖有钱吗?\")\n    port.postMessage({answer: \"木有\"});\n});\n\n// popup.js\nchrome.runtime.onConnect.addListener(function(port) {\n  port.onMessage.addListener(function(msg) {\n    if (msg.Ling == \"你好\")\n      port.postMessage({question: \"你是做什么滴?\"});\n    else if (msg.answer == \"搬砖\")\n      port.postMessage({question: \"搬砖有钱吗?\"});\n    else if (msg.answer == \"木有\")\n      port.postMessage({question: \"太难了.\"});\n  });\n});\n```\n\n## **4.数据存储**\n\nchrome.storage用来针对插件全局进行数据存储,我们在任何一个页面(popup或content_script或background)下存储了数据,我们在以上三个页面都可以获取到, 具体用法如下:\n\n```html\n获取数据\nchrome.storage.sync.get('imgArr', function(data) {\n  console.log(data)\n});\n// 保存数据\nchrome.storage.sync.set({'imgArr': imgArr}, function() {\n    console.log('保存成功');\n  });\n  \n// 另一种方式\nchrome.storage.local.set({key: value}, function() {\n  console.log('Value is set to ' + value);\n});\n```\n\n## **5.应用场景**\n\n谷歌浏览器的插件应用场景很多,正如文章开头的思维导图中写的.以下是笔者总结的一些应用场景，大家感兴趣可以尝试去实现：\n\n- 谷歌浏览器自定义桌面\n- 网页性能分析工具\n- 网页爬虫\n- 埋点工具\n- 网页热力图生成工具\n- 安全拦截插件\n- 广告过滤插件\n- 网站动态换肤\n- 第三方数据导入\n- 代码格式化工具\n- 在线协作工具\n- 防作弊插件\n\n还有很多实用工具可以开发，大家可以好好把玩。接下来就来通过实现一个网页图片提取插件，来总结以下浏览器插件开发流程。\n\n## 6.开发一款抓取网站图片资源的浏览器插件\n\n首先还是按照笔者的风格，在开发任何一种工具之前都要明确需求，所以我们来看看该插件的功能点：\n\n- 能植入网页按钮，通过点击按钮捕获网页图片\n- 能在用户端展示捕获的图片\n- 点击插件能预览捕获的图片\n\n基本上就这几个功能，接下来我会展示核心代码，在介绍代码之前我们先预览一下插件的实现效果：\n\n![https://pic3.zhimg.com/80/v2-0c79ea16b92fb0619cd70248a8090462_720w.jpg](https://pic3.zhimg.com/80/v2-0c79ea16b92fb0619cd70248a8090462_720w.jpg)\n\n![https://pic2.zhimg.com/80/v2-ecee95b625f566a9595d73d55768c211_720w.jpg](https://pic2.zhimg.com/80/v2-ecee95b625f566a9595d73d55768c211_720w.jpg)\n\n插件目录结构如下：\n\n![https://pic1.zhimg.com/80/v2-79f003a0e9a21ec8566a37a3a4820e50_720w.jpg](https://pic1.zhimg.com/80/v2-79f003a0e9a21ec8566a37a3a4820e50_720w.jpg)\n\n因为插件的开发比较简单，所以我直接用jquery开发。这里我们主要关注popup.js和content_script.js, popup.js中主要用来获取从content_script页传过来的图片数据，并展示在popup.html中，另外又一个需要注意的是当页面没有注入生成按钮时，popupu需要发送信息给content页面，主动让其生成按钮，代码如下：\n\n```jsx\nchrome.storage.sync.get('imgArr', function(data) {\n  data.imgArr && data.imgArr.forEach(item => {\n    var imgWrap = $(\"<div class='img-box'></div>\")\n    var img = $(\"<img src='\" + item + \"' alt='\" + item + \"' />\")\n    imgWrap.append(img);\n    $('#content').append(imgWrap);\n    $('.empty').hide();\n  })\n});\n\n$('#activeBtn').click(function(element) {\n  chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {\n    chrome.tabs.sendMessage(tabs[0].id, \"activeBtn\", function(response) {\n      console.log(response);\n    });\n  });\n});\n```\n\n对于content页面，我们需要实现的是动态生成按钮，并且在页面中植入弹窗来展示获取到的图片，另一方面需要将图片数据传递给storage，以便popup页面可以获取图片数据。\n\n由于页面比较简单，笔者就不用过多的第三方库了，笔者先简单手写一个modal组件，代码如下：\n\n```jsx\n// 弹窗\n~function Modal() {\n  var modal;\n  \n  if(this instanceof Modal) {\n    this.init = function(opt) {\n      modal = $(\"<div class='modal'></div>\");\n      var title = $(\"<div class='modal-title'>\" + opt.title + \"</div>\");\n      var close_btn = $(\"<span class='modal-close-btn'>X</span>\");\n      var content = $(\"<div class='modal-content'></div>\");\n      var mask = $(\"<div class='modal-mask'></div>\");\n      close_btn.click(function(){\n        modal.hide()\n      })\n      title.append(close_btn);\n      content.append(title);\n      content.append(opt.content);\n      modal.append(content);\n      modal.append(mask);\n      $('body').append(modal);\n    }\n    this.show = function(opt) {\n      if(modal) {\n        modal.show();\n      }else {\n        var options = {\n          title: opt.title || '标题',\n          content: opt.content || ''\n        }\n        this.init(options)\n        modal.show();\n      }\n    }\n    this.hide = function() {\n      modal.hide();\n    }\n  }else {\n    window.Modal = new Modal()\n  }\n}()\n```\n\n**第一步，我们先批量获取页面图片数据：**\n\n```jsx\nvar imgArr = []\n$('img').each(function(i) {\n  var src = $(this).attr('src');\n  var realSrc = /^(http|https)/.test(src) ? src : location.protocol+ '//' + location.host + src;\n  imgArr.push(realSrc)\n})\n```\n\n因为图片的src路径可能是相对地址，所以笔者在这里用正则简单处理以下，当然我们可以进行更细粒度的控制。\n\n**第二步，将图片数据存储到storage中：**\n\n```jsx\nchrome.storage.sync.set({'imgArr': imgArr}, function() {\n  console.log('保存成功');\n});\n```\n\n**第三步，生成预览图片的弹窗，这里用笔者上面实现的modal组件**：\n\n```jsx\nModal.show({\n  title: '提取结果',\n  content: imgBox\n})\n```\n\n**第四步，当popup发送激活按钮的通知时，我们要在网页中动态插入生成按钮：**\n\n```jsx\nchrome.runtime.onMessage.addListener(\n  function(message, sender, sendResponse) {\n    if (message == \"activeBtn\"){\n      if(!$('.crawl-btn')) {\n        $('body').append(\"<div class='crawl-btn'>提取</div>\")\n      }else {\n        $('.crawl-btn').css(\"background-color\",\"orange\");\n        setTimeout(() => {\n          $('.crawl-btn').css(\"background-color\",\"#06c\");\n        }, 3000);\n      }\n      sendResponse({farewell: \"激活成功\"});\n    }\n });\n```\n\nsetTimeout那段纯属是为了吸引用户视线，当然我们可以用更优雅的方式来处理。插件核心代码主要是这些，当然还有很多细节要考虑，我把配置文件和一些细节放到github了，如果感兴趣的朋友可以安装感受一下。\n\ngithub地址：[https://github.com/MrXujiang/fetchImg](https://github.com/MrXujiang/fetchImg)","slug":"ChromeExtensions","published":1,"updated":"2021-07-18T08:46:42.430Z","layout":"post","photos":[],"link":"","_id":"cksbelm9j00035ouc3h945tkq","content":"<h1 id=\"1-概览\"><a href=\"#1-概览\" class=\"headerlink\" title=\"1. 概览:\"></a>1. 概览:</h1><p><img src=\"Untitled.png\" alt=\"Untitled.png\"></p>\n<h1 id=\"2-入门\"><a href=\"#2-入门\" class=\"headerlink\" title=\"2. 入门\"></a>2. <strong>入门</strong></h1><p>首先我们看看的浏览器插件的定义:</p>\n<p>浏览器插件是基于Web技术（例如HTML，JavaScript和CSS）构建的可以定制浏览体验的小型软件程序。它们使用户可以根据个人需要或偏好来定制Chrome功能和行为。</p>\n<p>要想开发一款浏览器插件,我们只需要有一个manifest.json文件即可, 为了快速上手浏览器插件开发,我们需要把浏览器开发者工具打开, 具体步骤如下:</p>\n<ol>\n<li><strong>在谷歌浏览器中输入chrome://extensions/</strong></li>\n<li><strong>将开发者模式启动</strong></li>\n</ol>\n<p><img src=\"https://pic3.zhimg.com/80/v2-a557be3300d7012d25f89d00038b7e22_720w.jpg\" alt=\"https://pic3.zhimg.com/80/v2-a557be3300d7012d25f89d00038b7e22_720w.jpg\"></p>\n<h2 id=\"2-1-导入自己的浏览器插件包\"><a href=\"#2-1-导入自己的浏览器插件包\" class=\"headerlink\" title=\"2.1 导入自己的浏览器插件包\"></a>2.1 <strong>导入自己的浏览器插件包</strong></h2><p>通过以上三个步骤我们就可以开启浏览器插件开发之旅了.浏览器插件一般放在浏览器地址栏右侧,我们可以在manifest.json文件配置插件的icon,并配置一定的规则,就能看到我们的浏览器插件图标了,如下图:</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-023f0963017950f69fee85bfaf35bd3b_720w.jpg\" alt=\"https://pic4.zhimg.com/80/v2-023f0963017950f69fee85bfaf35bd3b_720w.jpg\"></p>\n<p>下面我们来具体讲解一下浏览器插件开发的核心概念.</p>\n<h2 id=\"2-2-核心知识点\"><a href=\"#2-2-核心知识点\" class=\"headerlink\" title=\"2.2 核心知识点\"></a>2.2 <strong>核心知识点</strong></h2><p>浏览器插件一般涉及以下几个核心文件:</p>\n<ul>\n<li><strong>manifest.json</strong> 用来配置所有和插件相关的配置(必须放在根目录)</li>\n<li><strong>background.js</strong> 后台脚本(后台页面),生命周期和浏览器一致,一般放置全局代码</li>\n<li><strong>content-scripts</strong> 插件向页面注入脚本的一种形式,我们可以通过content-scripts向页面注入js和css资源,并可控制允许注入的范围</li>\n<li><strong>popup</strong> 点击插件图标后打开的自定义窗口, 用来处理用户交互</li>\n</ul>\n<p>笔者画了一张简图来大致表示一下它们之间的关系:</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-bcebb2fc6d562fefac9de971f6e0ee9f_720w.jpg\" alt=\"https://pic4.zhimg.com/80/v2-bcebb2fc6d562fefac9de971f6e0ee9f_720w.jpg\"></p>\n<p>接下来我们来具体了解一下一上几个核心知识点.</p>\n<h3 id=\"2-2-1-manifest-json\"><a href=\"#2-2-1-manifest-json\" class=\"headerlink\" title=\"2**.2.1 manifest.json**\"></a>2**.2.1 manifest.json**</h3><p>谷歌官网简单的配置,如下:</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;My Extension&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;version&quot;</span>: <span class=\"string\">&quot;2.1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;description&quot;</span>: <span class=\"string\">&quot;Gets information from Google.&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;icons&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;128&quot;</span>: <span class=\"string\">&quot;icon_16.png&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;128&quot;</span>: <span class=\"string\">&quot;icon_32.png&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;128&quot;</span>: <span class=\"string\">&quot;icon_48.png&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;128&quot;</span>: <span class=\"string\">&quot;icon_128.png&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;background&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;persistent&quot;</span>: false,</span><br><span class=\"line\">      <span class=\"string\">&quot;scripts&quot;</span>: [<span class=\"string\">&quot;background_script.js&quot;</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;permissions&quot;</span>: [<span class=\"string\">&quot;https://*.google.com/&quot;</span>, <span class=\"string\">&quot;activeTab&quot;</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;browser_action&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;default_icon&quot;</span>: <span class=\"string\">&quot;icon_16.png&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;default_popup&quot;</span>: <span class=\"string\">&quot;popup.html&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>各字段含义介绍如下:</p>\n<ul>\n<li><strong>name</strong> 浏览器插件名称, 将会在插件列表中显示</li>\n<li><strong>description</strong> 浏览器插件简介, 方便告诉开发者插件的功能和作用, 将会在插件列表中显示</li>\n<li><strong>version</strong> 浏览器插件版本</li>\n<li><strong>icon</strong> 浏览器插件图标</li>\n</ul>\n<p><img src=\"Untitled%201.png\" alt=\"Untitled%201.png\"></p>\n<ul>\n<li><strong>background</strong> 背景页的脚本路径,一般为插件目录的相对地址</li>\n<li><strong>permissions</strong> 允许使用的浏览器API的权限,比如contextMenus(右键菜单), tabs(操作标签), webRequest(使用web请求), storage(允许使用本地存储), “**http://**”(可以通过executeScript或者insertCSS访问的网站)</li>\n<li><strong>browser_action</strong> 浏览器右上角图标设置(包括popup页面, 鼠标悬停时的标题, icon等)</li>\n<li><strong>content_scripts</strong> 需要直接注入页面的javascript脚本</li>\n<li><strong>web_accessible_resources</strong> 普通页面能够直接访问的插件资源列表，如果不设置是无法直接访问的</li>\n<li><strong>chrome_url_overrides</strong> 覆盖浏览器默认页面(经常用来做浏览器的自定义桌面)</li>\n<li><strong>omnibox</strong> 向地址栏注册一个关键字以提供搜索建议，只能设置一个关键字(多用于自定义搜索拦截)</li>\n<li><strong>default_locale</strong> 默认语言(比如”zh_CN”)</li>\n</ul>\n<h3 id=\"2-2-2-background-js\"><a href=\"#2-2-2-background-js\" class=\"headerlink\" title=\"2**.2.2 background.js**\"></a>2**.2.2 background.js**</h3><p>background页面主要用来提供一些全局配置, 事件监听, 业务转发等.举几个常用案例:</p>\n<p><strong>1.定义右键菜单</strong></p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// background.js</span><br><span class=\"line\">const systems = &#123;</span><br><span class=\"line\">  a: <span class=\"string\">&#x27;趣谈前端&#x27;</span>,</span><br><span class=\"line\">  b: <span class=\"string\">&#x27;掘金&#x27;</span>,</span><br><span class=\"line\">  c: <span class=\"string\">&#x27;微信&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">chrome.runtime.onInstalled.addListener(function() &#123;</span><br><span class=\"line\">  // 上下文菜单</span><br><span class=\"line\">  for (let key of Object.keys(systems)) &#123;</span><br><span class=\"line\">    chrome.contextMenus.create(&#123;</span><br><span class=\"line\">      id: key,</span><br><span class=\"line\">      title: systems[key],</span><br><span class=\"line\">      type: <span class=\"string\">&#x27;normal&#x27;</span>,</span><br><span class=\"line\">      contexts: [<span class=\"string\">&#x27;selection&#x27;</span>],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// manifest.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;permissions&quot;</span>: [<span class=\"string\">&quot;contextMenus&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果如下:</p>\n<p><img src=\"Untitled%202.png\" alt=\"Untitled%202.png\"></p>\n<p><strong>2.设置只有.com后缀的页面才会激活插件</strong></p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.runtime.onInstalled.addListener(function() &#123;</span><br><span class=\"line\">  // 类似于什么时候激活浏览器插件图标这种感觉</span><br><span class=\"line\">  chrome.declarativeContent.onPageChanged.removeRules(undefined, function() &#123;</span><br><span class=\"line\">    chrome.declarativeContent.onPageChanged.addRules([&#123;</span><br><span class=\"line\">      conditions: [new chrome.declarativeContent.PageStateMatcher(&#123;</span><br><span class=\"line\">        pageUrl: &#123;hostSuffix: <span class=\"string\">&#x27;.com&#x27;</span>&#125;,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      actions: [new chrome.declarativeContent.ShowPageAction()]</span><br><span class=\"line\">    &#125;]);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如下图所示,当页面地址的后缀不等于.com时,插件icon将不被激活:</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-e71bb0259baff0138a3ed613d3636342_720w.jpg\" alt=\"https://pic3.zhimg.com/80/v2-e71bb0259baff0138a3ed613d3636342_720w.jpg\"></p>\n<p><strong>3.和content_script或者popup页面进行消息通信</strong></p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.runtime.onMessage.addListener(</span><br><span class=\"line\">\tfunction(request, sender, sendResponse) &#123;</span><br><span class=\"line\">\t  console.log(sender.tab ?</span><br><span class=\"line\">\t              <span class=\"string\">&quot;from a content script:&quot;</span> + sender.tab.url :</span><br><span class=\"line\">\t              <span class=\"string\">&quot;from the extension&quot;</span>);</span><br><span class=\"line\">\t  if (request.greeting == <span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">\t    sendResponse(&#123;farewell: <span class=\"string\">&quot;goodbye&quot;</span>&#125;);</span><br><span class=\"line\">\t&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-3-content-scripts\"><a href=\"#2-2-3-content-scripts\" class=\"headerlink\" title=\"2.2.3 content-scripts\"></a>2.<strong>2.3 content-scripts</strong></h3><p>内容脚本一般植入会被植入到页面中, 并且可以控制页面中的dom. 我们可以利用它实现屏蔽网页广告, 定制页面皮肤等操作. 在manifest.json中的基本配置如下:</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;content_scripts&quot;</span>: [&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;matches&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;http://*/*&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;https://*/*&quot;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&quot;js&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;lib/jquery3.4.min.js&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;content_script.js&quot;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&quot;css&quot;</span>: [<span class=\"string\">&quot;base.css&quot;</span>]</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码中我们定义了content_scripts允许注入的页面范围, 插入页面的js以及css, 这样我们就能轻松改变某一个页面的样式.比如我们可以在页面中注入一个按钮:</p>\n<p><img src=\"Untitled%203.png\" alt=\"Untitled%203.png\"></p>\n<p>后面的浏览器插件案例中会详细介绍content_scripts的用法.</p>\n<h3 id=\"2-2-4-popup\"><a href=\"#2-2-4-popup\" class=\"headerlink\" title=\"2.2.4 popup\"></a><strong>2.2.4 popup</strong></h3><p>popup是用户点击插件图标时打开的一个小窗口，当失去焦点后窗口就立即关闭，我们一般用它来处理一些简单的用户交互和插件说明。</p>\n<p>由于popup窗口也是一个网页,所以我们一般会建立一个popup.html和popup.js用来控制popup的页面展示和交互.我们在manifest.json中配置如下:</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;page_action&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;default_title&quot;</span>: <span class=\"string\">&quot;小夕图片提取插件&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;default_popup&quot;</span>: <span class=\"string\">&quot;popup.html&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里要注意一点的是,我们在popup.html中不能直接使用script脚本,需要用引入脚本文件的方式.如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>在线图片提取工具<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;Content-Type&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pop-wrap&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;lib/jquery3.4.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;popup.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>以下是笔者写的一个插件的popup页面:</p>\n<p><img src=\"Untitled%204.png\" alt=\"Untitled%204.png\"></p>\n<h2 id=\"2-3-通信机制\"><a href=\"#2-3-通信机制\" class=\"headerlink\" title=\"2.3.通信机制\"></a>2.3.通信机制</h2><p>对于一个相对复杂的浏览器插件来说,我们不仅仅只操作dom或者提供基本的功能就行了,我们还需要向第三方或者自己的服务器抓取有用的页面数据,这个时候就需要用到插件的通信机制了.</p>\n<p>因为content_script脚本存在于当前页面,受同源策略影响,导致我们无法将捕获到的数据传给第三方平台或者自己的服务器, 所以我们需要基于浏览器的通信API.一下是谷歌浏览器插件的通信流程:</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-5a05979498bf90fe0443290623e1c8cd_720w.jpg\" alt=\"https://pic2.zhimg.com/80/v2-5a05979498bf90fe0443290623e1c8cd_720w.jpg\"></p>\n<h3 id=\"2-3-1-popup和background相互通信\"><a href=\"#2-3-1-popup和background相互通信\" class=\"headerlink\" title=\"2.3.1 popup和background相互通信\"></a>2.<strong>3.1 popup和background相互通信</strong></h3><p>由官方文档可知popup可以直接访问background页的方法,所以popup可以直接与其通信:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// background.js</span><br><span class=\"line\">var getData = (data) =&gt; &#123; console.log(&#x27;拿到数据:&#x27; + data) &#125;</span><br><span class=\"line\">// popup.js</span><br><span class=\"line\">let bgObj = chrome.extension.getBackgroundPage();</span><br><span class=\"line\">bgObj.getData(); // 访问bg的函数</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-2-popup或者background页和content-script通信\"><a href=\"#2-3-2-popup或者background页和content-script通信\" class=\"headerlink\" title=\"2.3.2 popup或者background页和content_script通信\"></a>2.<strong>3.2 popup或者background页和content_script通信</strong></h3><p>这里我们使用chrome的tabs API,如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// popup.js</span><br><span class=\"line\">// 发送消息给content_script</span><br><span class=\"line\">chrome.tabs.query(&#123;active: true, currentWindow: true&#125;, function(tabs) &#123;</span><br><span class=\"line\">    chrome.tabs.sendMessage(tabs[0].id, &quot;activeBtn&quot;, function(response) &#123;</span><br><span class=\"line\">      console.log(response);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">// 接收消息</span><br><span class=\"line\">chrome.runtime.onMessage.addListener(</span><br><span class=\"line\">  function(request, sender, sendResponse) &#123;</span><br><span class=\"line\">    console.log(sender.tab ?</span><br><span class=\"line\">                &quot;from a content script:&quot; + sender.tab.url :</span><br><span class=\"line\">                &quot;from the extension&quot;);</span><br><span class=\"line\">    if (request.greeting == &quot;hello&quot;)</span><br><span class=\"line\">      sendResponse(&#123;farewell: &quot;goodbye&quot;&#125;);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>content_script接收和发送消息:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 接收消息</span><br><span class=\"line\">chrome.runtime.onMessage.addListener(</span><br><span class=\"line\">  function(message, sender, sendResponse) &#123;</span><br><span class=\"line\">    if (message == &quot;activeBtn&quot;)&#123;</span><br><span class=\"line\">      // ...</span><br><span class=\"line\">      sendResponse(&#123;farewell: &quot;激活成功&quot;&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"> // 主动发送消息</span><br><span class=\"line\"> chrome.runtime.sendMessage(&#123;greeting: &quot;hello&quot;&#125;, function(response) &#123;</span><br><span class=\"line\">   console.log(response, document.body);</span><br><span class=\"line\">   // document.body.style.backgroundColor=&quot;orange&quot;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>有关消息的长连接,在谷歌官网也写的很清楚:</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-8064fff68ca7ab8e0d40631b6b7155fd_720w.jpg\" alt=\"https://pic2.zhimg.com/80/v2-8064fff68ca7ab8e0d40631b6b7155fd_720w.jpg\"></p>\n<p>我们可以采用如下方式进行长连接:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// content_script.js</span><br><span class=\"line\">var port = chrome.runtime.connect(&#123;name: &quot;徐小夕&quot;&#125;);</span><br><span class=\"line\">port.postMessage(&#123;Ling: &quot;你好&quot;&#125;);</span><br><span class=\"line\">port.onMessage.addListener(function(msg) &#123;</span><br><span class=\"line\">  if (msg.question == &quot;你是做什么滴?&quot;)</span><br><span class=\"line\">    port.postMessage(&#123;answer: &quot;搬砖&quot;&#125;);</span><br><span class=\"line\">  else if (msg.question == &quot;搬砖有钱吗?&quot;)</span><br><span class=\"line\">    port.postMessage(&#123;answer: &quot;木有&quot;&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// popup.js</span><br><span class=\"line\">chrome.runtime.onConnect.addListener(function(port) &#123;</span><br><span class=\"line\">  port.onMessage.addListener(function(msg) &#123;</span><br><span class=\"line\">    if (msg.Ling == &quot;你好&quot;)</span><br><span class=\"line\">      port.postMessage(&#123;question: &quot;你是做什么滴?&quot;&#125;);</span><br><span class=\"line\">    else if (msg.answer == &quot;搬砖&quot;)</span><br><span class=\"line\">      port.postMessage(&#123;question: &quot;搬砖有钱吗?&quot;&#125;);</span><br><span class=\"line\">    else if (msg.answer == &quot;木有&quot;)</span><br><span class=\"line\">      port.postMessage(&#123;question: &quot;太难了.&quot;&#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-数据存储\"><a href=\"#4-数据存储\" class=\"headerlink\" title=\"4.数据存储\"></a><strong>4.数据存储</strong></h2><p>chrome.storage用来针对插件全局进行数据存储,我们在任何一个页面(popup或content_script或background)下存储了数据,我们在以上三个页面都可以获取到, 具体用法如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取数据</span><br><span class=\"line\">chrome.storage.sync.get(&#x27;imgArr&#x27;, function(data) &#123;</span><br><span class=\"line\">  console.log(data)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 保存数据</span><br><span class=\"line\">chrome.storage.sync.set(&#123;&#x27;imgArr&#x27;: imgArr&#125;, function() &#123;</span><br><span class=\"line\">    console.log(&#x27;保存成功&#x27;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">// 另一种方式</span><br><span class=\"line\">chrome.storage.local.set(&#123;key: value&#125;, function() &#123;</span><br><span class=\"line\">  console.log(&#x27;Value is set to &#x27; + value);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-应用场景\"><a href=\"#5-应用场景\" class=\"headerlink\" title=\"5.应用场景\"></a><strong>5.应用场景</strong></h2><p>谷歌浏览器的插件应用场景很多,正如文章开头的思维导图中写的.以下是笔者总结的一些应用场景，大家感兴趣可以尝试去实现：</p>\n<ul>\n<li>谷歌浏览器自定义桌面</li>\n<li>网页性能分析工具</li>\n<li>网页爬虫</li>\n<li>埋点工具</li>\n<li>网页热力图生成工具</li>\n<li>安全拦截插件</li>\n<li>广告过滤插件</li>\n<li>网站动态换肤</li>\n<li>第三方数据导入</li>\n<li>代码格式化工具</li>\n<li>在线协作工具</li>\n<li>防作弊插件</li>\n</ul>\n<p>还有很多实用工具可以开发，大家可以好好把玩。接下来就来通过实现一个网页图片提取插件，来总结以下浏览器插件开发流程。</p>\n<h2 id=\"6-开发一款抓取网站图片资源的浏览器插件\"><a href=\"#6-开发一款抓取网站图片资源的浏览器插件\" class=\"headerlink\" title=\"6.开发一款抓取网站图片资源的浏览器插件\"></a>6.开发一款抓取网站图片资源的浏览器插件</h2><p>首先还是按照笔者的风格，在开发任何一种工具之前都要明确需求，所以我们来看看该插件的功能点：</p>\n<ul>\n<li>能植入网页按钮，通过点击按钮捕获网页图片</li>\n<li>能在用户端展示捕获的图片</li>\n<li>点击插件能预览捕获的图片</li>\n</ul>\n<p>基本上就这几个功能，接下来我会展示核心代码，在介绍代码之前我们先预览一下插件的实现效果：</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-0c79ea16b92fb0619cd70248a8090462_720w.jpg\" alt=\"https://pic3.zhimg.com/80/v2-0c79ea16b92fb0619cd70248a8090462_720w.jpg\"></p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-ecee95b625f566a9595d73d55768c211_720w.jpg\" alt=\"https://pic2.zhimg.com/80/v2-ecee95b625f566a9595d73d55768c211_720w.jpg\"></p>\n<p>插件目录结构如下：</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-79f003a0e9a21ec8566a37a3a4820e50_720w.jpg\" alt=\"https://pic1.zhimg.com/80/v2-79f003a0e9a21ec8566a37a3a4820e50_720w.jpg\"></p>\n<p>因为插件的开发比较简单，所以我直接用jquery开发。这里我们主要关注popup.js和content_script.js, popup.js中主要用来获取从content_script页传过来的图片数据，并展示在popup.html中，另外又一个需要注意的是当页面没有注入生成按钮时，popupu需要发送信息给content页面，主动让其生成按钮，代码如下：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.storage.sync.get(<span class=\"string\">&#x27;imgArr&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  data.imgArr &amp;&amp; data.imgArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> imgWrap = $(<span class=\"string\">&quot;&lt;div class=&#x27;img-box&#x27;&gt;&lt;/div&gt;&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = $(<span class=\"string\">&quot;&lt;img src=&#x27;&quot;</span> + item + <span class=\"string\">&quot;&#x27; alt=&#x27;&quot;</span> + item + <span class=\"string\">&quot;&#x27; /&gt;&quot;</span>)</span><br><span class=\"line\">    imgWrap.append(img);</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#content&#x27;</span>).append(imgWrap);</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;.empty&#x27;</span>).hide();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#activeBtn&#x27;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">  chrome.tabs.query(&#123;<span class=\"attr\">active</span>: <span class=\"literal\">true</span>, <span class=\"attr\">currentWindow</span>: <span class=\"literal\">true</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tabs</span>) </span>&#123;</span><br><span class=\"line\">    chrome.tabs.sendMessage(tabs[<span class=\"number\">0</span>].id, <span class=\"string\">&quot;activeBtn&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(response);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>对于content页面，我们需要实现的是动态生成按钮，并且在页面中植入弹窗来展示获取到的图片，另一方面需要将图片数据传递给storage，以便popup页面可以获取图片数据。</p>\n<p>由于页面比较简单，笔者就不用过多的第三方库了，笔者先简单手写一个modal组件，代码如下：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 弹窗</span></span><br><span class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Modal</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> modal;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">this</span> <span class=\"keyword\">instanceof</span> Modal) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">opt</span>) </span>&#123;</span><br><span class=\"line\">      modal = $(<span class=\"string\">&quot;&lt;div class=&#x27;modal&#x27;&gt;&lt;/div&gt;&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> title = $(<span class=\"string\">&quot;&lt;div class=&#x27;modal-title&#x27;&gt;&quot;</span> + opt.title + <span class=\"string\">&quot;&lt;/div&gt;&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> close_btn = $(<span class=\"string\">&quot;&lt;span class=&#x27;modal-close-btn&#x27;&gt;X&lt;/span&gt;&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> content = $(<span class=\"string\">&quot;&lt;div class=&#x27;modal-content&#x27;&gt;&lt;/div&gt;&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> mask = $(<span class=\"string\">&quot;&lt;div class=&#x27;modal-mask&#x27;&gt;&lt;/div&gt;&quot;</span>);</span><br><span class=\"line\">      close_btn.click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        modal.hide()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      title.append(close_btn);</span><br><span class=\"line\">      content.append(title);</span><br><span class=\"line\">      content.append(opt.content);</span><br><span class=\"line\">      modal.append(content);</span><br><span class=\"line\">      modal.append(mask);</span><br><span class=\"line\">      $(<span class=\"string\">&#x27;body&#x27;</span>).append(modal);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.show = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">opt</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(modal) &#123;</span><br><span class=\"line\">        modal.show();</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\">          title: opt.title || <span class=\"string\">&#x27;标题&#x27;</span>,</span><br><span class=\"line\">          content: opt.content || <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.init(options)</span><br><span class=\"line\">        modal.show();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.hide = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      modal.hide();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.Modal = <span class=\"keyword\">new</span> Modal()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p><strong>第一步，我们先批量获取页面图片数据：</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> imgArr = []</span><br><span class=\"line\">$(<span class=\"string\">&#x27;img&#x27;</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> src = $(<span class=\"built_in\">this</span>).attr(<span class=\"string\">&#x27;src&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> realSrc = <span class=\"regexp\">/^(http|https)/</span>.test(src) ? src : location.protocol+ <span class=\"string\">&#x27;//&#x27;</span> + location.host + src;</span><br><span class=\"line\">  imgArr.push(realSrc)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>因为图片的src路径可能是相对地址，所以笔者在这里用正则简单处理以下，当然我们可以进行更细粒度的控制。</p>\n<p><strong>第二步，将图片数据存储到storage中：</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.storage.sync.set(&#123;<span class=\"string\">&#x27;imgArr&#x27;</span>: imgArr&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;保存成功&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>第三步，生成预览图片的弹窗，这里用笔者上面实现的modal组件</strong>：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Modal.show(&#123;</span><br><span class=\"line\">  title: <span class=\"string\">&#x27;提取结果&#x27;</span>,</span><br><span class=\"line\">  content: imgBox</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>第四步，当popup发送激活按钮的通知时，我们要在网页中动态插入生成按钮：</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.runtime.onMessage.addListener(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">message, sender, sendResponse</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (message == <span class=\"string\">&quot;activeBtn&quot;</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!$(<span class=\"string\">&#x27;.crawl-btn&#x27;</span>)) &#123;</span><br><span class=\"line\">        $(<span class=\"string\">&#x27;body&#x27;</span>).append(<span class=\"string\">&quot;&lt;div class=&#x27;crawl-btn&#x27;&gt;提取&lt;/div&gt;&quot;</span>)</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        $(<span class=\"string\">&#x27;.crawl-btn&#x27;</span>).css(<span class=\"string\">&quot;background-color&quot;</span>,<span class=\"string\">&quot;orange&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          $(<span class=\"string\">&#x27;.crawl-btn&#x27;</span>).css(<span class=\"string\">&quot;background-color&quot;</span>,<span class=\"string\">&quot;#06c&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      sendResponse(&#123;<span class=\"attr\">farewell</span>: <span class=\"string\">&quot;激活成功&quot;</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n<p>setTimeout那段纯属是为了吸引用户视线，当然我们可以用更优雅的方式来处理。插件核心代码主要是这些，当然还有很多细节要考虑，我把配置文件和一些细节放到github了，如果感兴趣的朋友可以安装感受一下。</p>\n<p>github地址：<a href=\"https://github.com/MrXujiang/fetchImg\">https://github.com/MrXujiang/fetchImg</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-概览\"><a href=\"#1-概览\" class=\"headerlink\" title=\"1. 概览:\"></a>1. 概览:</h1><p><img src=\"Untitled.png\" alt=\"Untitled.png\"></p>\n<h1 id=\"2-入门\"><a href=\"#2-入门\" class=\"headerlink\" title=\"2. 入门\"></a>2. <strong>入门</strong></h1><p>首先我们看看的浏览器插件的定义:</p>\n<p>浏览器插件是基于Web技术（例如HTML，JavaScript和CSS）构建的可以定制浏览体验的小型软件程序。它们使用户可以根据个人需要或偏好来定制Chrome功能和行为。</p>\n<p>要想开发一款浏览器插件,我们只需要有一个manifest.json文件即可, 为了快速上手浏览器插件开发,我们需要把浏览器开发者工具打开, 具体步骤如下:</p>\n<ol>\n<li><strong>在谷歌浏览器中输入chrome://extensions/</strong></li>\n<li><strong>将开发者模式启动</strong></li>\n</ol>\n<p><img src=\"https://pic3.zhimg.com/80/v2-a557be3300d7012d25f89d00038b7e22_720w.jpg\" alt=\"https://pic3.zhimg.com/80/v2-a557be3300d7012d25f89d00038b7e22_720w.jpg\"></p>\n<h2 id=\"2-1-导入自己的浏览器插件包\"><a href=\"#2-1-导入自己的浏览器插件包\" class=\"headerlink\" title=\"2.1 导入自己的浏览器插件包\"></a>2.1 <strong>导入自己的浏览器插件包</strong></h2><p>通过以上三个步骤我们就可以开启浏览器插件开发之旅了.浏览器插件一般放在浏览器地址栏右侧,我们可以在manifest.json文件配置插件的icon,并配置一定的规则,就能看到我们的浏览器插件图标了,如下图:</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-023f0963017950f69fee85bfaf35bd3b_720w.jpg\" alt=\"https://pic4.zhimg.com/80/v2-023f0963017950f69fee85bfaf35bd3b_720w.jpg\"></p>\n<p>下面我们来具体讲解一下浏览器插件开发的核心概念.</p>\n<h2 id=\"2-2-核心知识点\"><a href=\"#2-2-核心知识点\" class=\"headerlink\" title=\"2.2 核心知识点\"></a>2.2 <strong>核心知识点</strong></h2><p>浏览器插件一般涉及以下几个核心文件:</p>\n<ul>\n<li><strong>manifest.json</strong> 用来配置所有和插件相关的配置(必须放在根目录)</li>\n<li><strong>background.js</strong> 后台脚本(后台页面),生命周期和浏览器一致,一般放置全局代码</li>\n<li><strong>content-scripts</strong> 插件向页面注入脚本的一种形式,我们可以通过content-scripts向页面注入js和css资源,并可控制允许注入的范围</li>\n<li><strong>popup</strong> 点击插件图标后打开的自定义窗口, 用来处理用户交互</li>\n</ul>\n<p>笔者画了一张简图来大致表示一下它们之间的关系:</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-bcebb2fc6d562fefac9de971f6e0ee9f_720w.jpg\" alt=\"https://pic4.zhimg.com/80/v2-bcebb2fc6d562fefac9de971f6e0ee9f_720w.jpg\"></p>\n<p>接下来我们来具体了解一下一上几个核心知识点.</p>\n<h3 id=\"2-2-1-manifest-json\"><a href=\"#2-2-1-manifest-json\" class=\"headerlink\" title=\"2**.2.1 manifest.json**\"></a>2**.2.1 manifest.json**</h3><p>谷歌官网简单的配置,如下:</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;My Extension&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;version&quot;</span>: <span class=\"string\">&quot;2.1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;description&quot;</span>: <span class=\"string\">&quot;Gets information from Google.&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;icons&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;128&quot;</span>: <span class=\"string\">&quot;icon_16.png&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;128&quot;</span>: <span class=\"string\">&quot;icon_32.png&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;128&quot;</span>: <span class=\"string\">&quot;icon_48.png&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;128&quot;</span>: <span class=\"string\">&quot;icon_128.png&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;background&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;persistent&quot;</span>: false,</span><br><span class=\"line\">      <span class=\"string\">&quot;scripts&quot;</span>: [<span class=\"string\">&quot;background_script.js&quot;</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;permissions&quot;</span>: [<span class=\"string\">&quot;https://*.google.com/&quot;</span>, <span class=\"string\">&quot;activeTab&quot;</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;browser_action&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;default_icon&quot;</span>: <span class=\"string\">&quot;icon_16.png&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;default_popup&quot;</span>: <span class=\"string\">&quot;popup.html&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>各字段含义介绍如下:</p>\n<ul>\n<li><strong>name</strong> 浏览器插件名称, 将会在插件列表中显示</li>\n<li><strong>description</strong> 浏览器插件简介, 方便告诉开发者插件的功能和作用, 将会在插件列表中显示</li>\n<li><strong>version</strong> 浏览器插件版本</li>\n<li><strong>icon</strong> 浏览器插件图标</li>\n</ul>\n<p><img src=\"Untitled%201.png\" alt=\"Untitled%201.png\"></p>\n<ul>\n<li><strong>background</strong> 背景页的脚本路径,一般为插件目录的相对地址</li>\n<li><strong>permissions</strong> 允许使用的浏览器API的权限,比如contextMenus(右键菜单), tabs(操作标签), webRequest(使用web请求), storage(允许使用本地存储), “**http://**”(可以通过executeScript或者insertCSS访问的网站)</li>\n<li><strong>browser_action</strong> 浏览器右上角图标设置(包括popup页面, 鼠标悬停时的标题, icon等)</li>\n<li><strong>content_scripts</strong> 需要直接注入页面的javascript脚本</li>\n<li><strong>web_accessible_resources</strong> 普通页面能够直接访问的插件资源列表，如果不设置是无法直接访问的</li>\n<li><strong>chrome_url_overrides</strong> 覆盖浏览器默认页面(经常用来做浏览器的自定义桌面)</li>\n<li><strong>omnibox</strong> 向地址栏注册一个关键字以提供搜索建议，只能设置一个关键字(多用于自定义搜索拦截)</li>\n<li><strong>default_locale</strong> 默认语言(比如”zh_CN”)</li>\n</ul>\n<h3 id=\"2-2-2-background-js\"><a href=\"#2-2-2-background-js\" class=\"headerlink\" title=\"2**.2.2 background.js**\"></a>2**.2.2 background.js**</h3><p>background页面主要用来提供一些全局配置, 事件监听, 业务转发等.举几个常用案例:</p>\n<p><strong>1.定义右键菜单</strong></p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// background.js</span><br><span class=\"line\">const systems = &#123;</span><br><span class=\"line\">  a: <span class=\"string\">&#x27;趣谈前端&#x27;</span>,</span><br><span class=\"line\">  b: <span class=\"string\">&#x27;掘金&#x27;</span>,</span><br><span class=\"line\">  c: <span class=\"string\">&#x27;微信&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">chrome.runtime.onInstalled.addListener(function() &#123;</span><br><span class=\"line\">  // 上下文菜单</span><br><span class=\"line\">  for (let key of Object.keys(systems)) &#123;</span><br><span class=\"line\">    chrome.contextMenus.create(&#123;</span><br><span class=\"line\">      id: key,</span><br><span class=\"line\">      title: systems[key],</span><br><span class=\"line\">      type: <span class=\"string\">&#x27;normal&#x27;</span>,</span><br><span class=\"line\">      contexts: [<span class=\"string\">&#x27;selection&#x27;</span>],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// manifest.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;permissions&quot;</span>: [<span class=\"string\">&quot;contextMenus&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果如下:</p>\n<p><img src=\"Untitled%202.png\" alt=\"Untitled%202.png\"></p>\n<p><strong>2.设置只有.com后缀的页面才会激活插件</strong></p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.runtime.onInstalled.addListener(function() &#123;</span><br><span class=\"line\">  // 类似于什么时候激活浏览器插件图标这种感觉</span><br><span class=\"line\">  chrome.declarativeContent.onPageChanged.removeRules(undefined, function() &#123;</span><br><span class=\"line\">    chrome.declarativeContent.onPageChanged.addRules([&#123;</span><br><span class=\"line\">      conditions: [new chrome.declarativeContent.PageStateMatcher(&#123;</span><br><span class=\"line\">        pageUrl: &#123;hostSuffix: <span class=\"string\">&#x27;.com&#x27;</span>&#125;,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      actions: [new chrome.declarativeContent.ShowPageAction()]</span><br><span class=\"line\">    &#125;]);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如下图所示,当页面地址的后缀不等于.com时,插件icon将不被激活:</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-e71bb0259baff0138a3ed613d3636342_720w.jpg\" alt=\"https://pic3.zhimg.com/80/v2-e71bb0259baff0138a3ed613d3636342_720w.jpg\"></p>\n<p><strong>3.和content_script或者popup页面进行消息通信</strong></p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.runtime.onMessage.addListener(</span><br><span class=\"line\">\tfunction(request, sender, sendResponse) &#123;</span><br><span class=\"line\">\t  console.log(sender.tab ?</span><br><span class=\"line\">\t              <span class=\"string\">&quot;from a content script:&quot;</span> + sender.tab.url :</span><br><span class=\"line\">\t              <span class=\"string\">&quot;from the extension&quot;</span>);</span><br><span class=\"line\">\t  if (request.greeting == <span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">\t    sendResponse(&#123;farewell: <span class=\"string\">&quot;goodbye&quot;</span>&#125;);</span><br><span class=\"line\">\t&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-3-content-scripts\"><a href=\"#2-2-3-content-scripts\" class=\"headerlink\" title=\"2.2.3 content-scripts\"></a>2.<strong>2.3 content-scripts</strong></h3><p>内容脚本一般植入会被植入到页面中, 并且可以控制页面中的dom. 我们可以利用它实现屏蔽网页广告, 定制页面皮肤等操作. 在manifest.json中的基本配置如下:</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;content_scripts&quot;</span>: [&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;matches&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;http://*/*&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;https://*/*&quot;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&quot;js&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;lib/jquery3.4.min.js&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;content_script.js&quot;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&quot;css&quot;</span>: [<span class=\"string\">&quot;base.css&quot;</span>]</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码中我们定义了content_scripts允许注入的页面范围, 插入页面的js以及css, 这样我们就能轻松改变某一个页面的样式.比如我们可以在页面中注入一个按钮:</p>\n<p><img src=\"Untitled%203.png\" alt=\"Untitled%203.png\"></p>\n<p>后面的浏览器插件案例中会详细介绍content_scripts的用法.</p>\n<h3 id=\"2-2-4-popup\"><a href=\"#2-2-4-popup\" class=\"headerlink\" title=\"2.2.4 popup\"></a><strong>2.2.4 popup</strong></h3><p>popup是用户点击插件图标时打开的一个小窗口，当失去焦点后窗口就立即关闭，我们一般用它来处理一些简单的用户交互和插件说明。</p>\n<p>由于popup窗口也是一个网页,所以我们一般会建立一个popup.html和popup.js用来控制popup的页面展示和交互.我们在manifest.json中配置如下:</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;page_action&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;default_title&quot;</span>: <span class=\"string\">&quot;小夕图片提取插件&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;default_popup&quot;</span>: <span class=\"string\">&quot;popup.html&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里要注意一点的是,我们在popup.html中不能直接使用script脚本,需要用引入脚本文件的方式.如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>在线图片提取工具<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;Content-Type&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pop-wrap&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;lib/jquery3.4.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;popup.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>以下是笔者写的一个插件的popup页面:</p>\n<p><img src=\"Untitled%204.png\" alt=\"Untitled%204.png\"></p>\n<h2 id=\"2-3-通信机制\"><a href=\"#2-3-通信机制\" class=\"headerlink\" title=\"2.3.通信机制\"></a>2.3.通信机制</h2><p>对于一个相对复杂的浏览器插件来说,我们不仅仅只操作dom或者提供基本的功能就行了,我们还需要向第三方或者自己的服务器抓取有用的页面数据,这个时候就需要用到插件的通信机制了.</p>\n<p>因为content_script脚本存在于当前页面,受同源策略影响,导致我们无法将捕获到的数据传给第三方平台或者自己的服务器, 所以我们需要基于浏览器的通信API.一下是谷歌浏览器插件的通信流程:</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-5a05979498bf90fe0443290623e1c8cd_720w.jpg\" alt=\"https://pic2.zhimg.com/80/v2-5a05979498bf90fe0443290623e1c8cd_720w.jpg\"></p>\n<h3 id=\"2-3-1-popup和background相互通信\"><a href=\"#2-3-1-popup和background相互通信\" class=\"headerlink\" title=\"2.3.1 popup和background相互通信\"></a>2.<strong>3.1 popup和background相互通信</strong></h3><p>由官方文档可知popup可以直接访问background页的方法,所以popup可以直接与其通信:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// background.js</span><br><span class=\"line\">var getData = (data) =&gt; &#123; console.log(&#x27;拿到数据:&#x27; + data) &#125;</span><br><span class=\"line\">// popup.js</span><br><span class=\"line\">let bgObj = chrome.extension.getBackgroundPage();</span><br><span class=\"line\">bgObj.getData(); // 访问bg的函数</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-2-popup或者background页和content-script通信\"><a href=\"#2-3-2-popup或者background页和content-script通信\" class=\"headerlink\" title=\"2.3.2 popup或者background页和content_script通信\"></a>2.<strong>3.2 popup或者background页和content_script通信</strong></h3><p>这里我们使用chrome的tabs API,如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// popup.js</span><br><span class=\"line\">// 发送消息给content_script</span><br><span class=\"line\">chrome.tabs.query(&#123;active: true, currentWindow: true&#125;, function(tabs) &#123;</span><br><span class=\"line\">    chrome.tabs.sendMessage(tabs[0].id, &quot;activeBtn&quot;, function(response) &#123;</span><br><span class=\"line\">      console.log(response);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">// 接收消息</span><br><span class=\"line\">chrome.runtime.onMessage.addListener(</span><br><span class=\"line\">  function(request, sender, sendResponse) &#123;</span><br><span class=\"line\">    console.log(sender.tab ?</span><br><span class=\"line\">                &quot;from a content script:&quot; + sender.tab.url :</span><br><span class=\"line\">                &quot;from the extension&quot;);</span><br><span class=\"line\">    if (request.greeting == &quot;hello&quot;)</span><br><span class=\"line\">      sendResponse(&#123;farewell: &quot;goodbye&quot;&#125;);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>content_script接收和发送消息:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 接收消息</span><br><span class=\"line\">chrome.runtime.onMessage.addListener(</span><br><span class=\"line\">  function(message, sender, sendResponse) &#123;</span><br><span class=\"line\">    if (message == &quot;activeBtn&quot;)&#123;</span><br><span class=\"line\">      // ...</span><br><span class=\"line\">      sendResponse(&#123;farewell: &quot;激活成功&quot;&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"> // 主动发送消息</span><br><span class=\"line\"> chrome.runtime.sendMessage(&#123;greeting: &quot;hello&quot;&#125;, function(response) &#123;</span><br><span class=\"line\">   console.log(response, document.body);</span><br><span class=\"line\">   // document.body.style.backgroundColor=&quot;orange&quot;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>有关消息的长连接,在谷歌官网也写的很清楚:</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-8064fff68ca7ab8e0d40631b6b7155fd_720w.jpg\" alt=\"https://pic2.zhimg.com/80/v2-8064fff68ca7ab8e0d40631b6b7155fd_720w.jpg\"></p>\n<p>我们可以采用如下方式进行长连接:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// content_script.js</span><br><span class=\"line\">var port = chrome.runtime.connect(&#123;name: &quot;徐小夕&quot;&#125;);</span><br><span class=\"line\">port.postMessage(&#123;Ling: &quot;你好&quot;&#125;);</span><br><span class=\"line\">port.onMessage.addListener(function(msg) &#123;</span><br><span class=\"line\">  if (msg.question == &quot;你是做什么滴?&quot;)</span><br><span class=\"line\">    port.postMessage(&#123;answer: &quot;搬砖&quot;&#125;);</span><br><span class=\"line\">  else if (msg.question == &quot;搬砖有钱吗?&quot;)</span><br><span class=\"line\">    port.postMessage(&#123;answer: &quot;木有&quot;&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// popup.js</span><br><span class=\"line\">chrome.runtime.onConnect.addListener(function(port) &#123;</span><br><span class=\"line\">  port.onMessage.addListener(function(msg) &#123;</span><br><span class=\"line\">    if (msg.Ling == &quot;你好&quot;)</span><br><span class=\"line\">      port.postMessage(&#123;question: &quot;你是做什么滴?&quot;&#125;);</span><br><span class=\"line\">    else if (msg.answer == &quot;搬砖&quot;)</span><br><span class=\"line\">      port.postMessage(&#123;question: &quot;搬砖有钱吗?&quot;&#125;);</span><br><span class=\"line\">    else if (msg.answer == &quot;木有&quot;)</span><br><span class=\"line\">      port.postMessage(&#123;question: &quot;太难了.&quot;&#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-数据存储\"><a href=\"#4-数据存储\" class=\"headerlink\" title=\"4.数据存储\"></a><strong>4.数据存储</strong></h2><p>chrome.storage用来针对插件全局进行数据存储,我们在任何一个页面(popup或content_script或background)下存储了数据,我们在以上三个页面都可以获取到, 具体用法如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取数据</span><br><span class=\"line\">chrome.storage.sync.get(&#x27;imgArr&#x27;, function(data) &#123;</span><br><span class=\"line\">  console.log(data)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 保存数据</span><br><span class=\"line\">chrome.storage.sync.set(&#123;&#x27;imgArr&#x27;: imgArr&#125;, function() &#123;</span><br><span class=\"line\">    console.log(&#x27;保存成功&#x27;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">// 另一种方式</span><br><span class=\"line\">chrome.storage.local.set(&#123;key: value&#125;, function() &#123;</span><br><span class=\"line\">  console.log(&#x27;Value is set to &#x27; + value);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-应用场景\"><a href=\"#5-应用场景\" class=\"headerlink\" title=\"5.应用场景\"></a><strong>5.应用场景</strong></h2><p>谷歌浏览器的插件应用场景很多,正如文章开头的思维导图中写的.以下是笔者总结的一些应用场景，大家感兴趣可以尝试去实现：</p>\n<ul>\n<li>谷歌浏览器自定义桌面</li>\n<li>网页性能分析工具</li>\n<li>网页爬虫</li>\n<li>埋点工具</li>\n<li>网页热力图生成工具</li>\n<li>安全拦截插件</li>\n<li>广告过滤插件</li>\n<li>网站动态换肤</li>\n<li>第三方数据导入</li>\n<li>代码格式化工具</li>\n<li>在线协作工具</li>\n<li>防作弊插件</li>\n</ul>\n<p>还有很多实用工具可以开发，大家可以好好把玩。接下来就来通过实现一个网页图片提取插件，来总结以下浏览器插件开发流程。</p>\n<h2 id=\"6-开发一款抓取网站图片资源的浏览器插件\"><a href=\"#6-开发一款抓取网站图片资源的浏览器插件\" class=\"headerlink\" title=\"6.开发一款抓取网站图片资源的浏览器插件\"></a>6.开发一款抓取网站图片资源的浏览器插件</h2><p>首先还是按照笔者的风格，在开发任何一种工具之前都要明确需求，所以我们来看看该插件的功能点：</p>\n<ul>\n<li>能植入网页按钮，通过点击按钮捕获网页图片</li>\n<li>能在用户端展示捕获的图片</li>\n<li>点击插件能预览捕获的图片</li>\n</ul>\n<p>基本上就这几个功能，接下来我会展示核心代码，在介绍代码之前我们先预览一下插件的实现效果：</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-0c79ea16b92fb0619cd70248a8090462_720w.jpg\" alt=\"https://pic3.zhimg.com/80/v2-0c79ea16b92fb0619cd70248a8090462_720w.jpg\"></p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-ecee95b625f566a9595d73d55768c211_720w.jpg\" alt=\"https://pic2.zhimg.com/80/v2-ecee95b625f566a9595d73d55768c211_720w.jpg\"></p>\n<p>插件目录结构如下：</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-79f003a0e9a21ec8566a37a3a4820e50_720w.jpg\" alt=\"https://pic1.zhimg.com/80/v2-79f003a0e9a21ec8566a37a3a4820e50_720w.jpg\"></p>\n<p>因为插件的开发比较简单，所以我直接用jquery开发。这里我们主要关注popup.js和content_script.js, popup.js中主要用来获取从content_script页传过来的图片数据，并展示在popup.html中，另外又一个需要注意的是当页面没有注入生成按钮时，popupu需要发送信息给content页面，主动让其生成按钮，代码如下：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.storage.sync.get(<span class=\"string\">&#x27;imgArr&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  data.imgArr &amp;&amp; data.imgArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> imgWrap = $(<span class=\"string\">&quot;&lt;div class=&#x27;img-box&#x27;&gt;&lt;/div&gt;&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = $(<span class=\"string\">&quot;&lt;img src=&#x27;&quot;</span> + item + <span class=\"string\">&quot;&#x27; alt=&#x27;&quot;</span> + item + <span class=\"string\">&quot;&#x27; /&gt;&quot;</span>)</span><br><span class=\"line\">    imgWrap.append(img);</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#content&#x27;</span>).append(imgWrap);</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;.empty&#x27;</span>).hide();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#activeBtn&#x27;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">  chrome.tabs.query(&#123;<span class=\"attr\">active</span>: <span class=\"literal\">true</span>, <span class=\"attr\">currentWindow</span>: <span class=\"literal\">true</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tabs</span>) </span>&#123;</span><br><span class=\"line\">    chrome.tabs.sendMessage(tabs[<span class=\"number\">0</span>].id, <span class=\"string\">&quot;activeBtn&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(response);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>对于content页面，我们需要实现的是动态生成按钮，并且在页面中植入弹窗来展示获取到的图片，另一方面需要将图片数据传递给storage，以便popup页面可以获取图片数据。</p>\n<p>由于页面比较简单，笔者就不用过多的第三方库了，笔者先简单手写一个modal组件，代码如下：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 弹窗</span></span><br><span class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Modal</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> modal;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">this</span> <span class=\"keyword\">instanceof</span> Modal) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">opt</span>) </span>&#123;</span><br><span class=\"line\">      modal = $(<span class=\"string\">&quot;&lt;div class=&#x27;modal&#x27;&gt;&lt;/div&gt;&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> title = $(<span class=\"string\">&quot;&lt;div class=&#x27;modal-title&#x27;&gt;&quot;</span> + opt.title + <span class=\"string\">&quot;&lt;/div&gt;&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> close_btn = $(<span class=\"string\">&quot;&lt;span class=&#x27;modal-close-btn&#x27;&gt;X&lt;/span&gt;&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> content = $(<span class=\"string\">&quot;&lt;div class=&#x27;modal-content&#x27;&gt;&lt;/div&gt;&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> mask = $(<span class=\"string\">&quot;&lt;div class=&#x27;modal-mask&#x27;&gt;&lt;/div&gt;&quot;</span>);</span><br><span class=\"line\">      close_btn.click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        modal.hide()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      title.append(close_btn);</span><br><span class=\"line\">      content.append(title);</span><br><span class=\"line\">      content.append(opt.content);</span><br><span class=\"line\">      modal.append(content);</span><br><span class=\"line\">      modal.append(mask);</span><br><span class=\"line\">      $(<span class=\"string\">&#x27;body&#x27;</span>).append(modal);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.show = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">opt</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(modal) &#123;</span><br><span class=\"line\">        modal.show();</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\">          title: opt.title || <span class=\"string\">&#x27;标题&#x27;</span>,</span><br><span class=\"line\">          content: opt.content || <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.init(options)</span><br><span class=\"line\">        modal.show();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.hide = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      modal.hide();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.Modal = <span class=\"keyword\">new</span> Modal()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p><strong>第一步，我们先批量获取页面图片数据：</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> imgArr = []</span><br><span class=\"line\">$(<span class=\"string\">&#x27;img&#x27;</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> src = $(<span class=\"built_in\">this</span>).attr(<span class=\"string\">&#x27;src&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> realSrc = <span class=\"regexp\">/^(http|https)/</span>.test(src) ? src : location.protocol+ <span class=\"string\">&#x27;//&#x27;</span> + location.host + src;</span><br><span class=\"line\">  imgArr.push(realSrc)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>因为图片的src路径可能是相对地址，所以笔者在这里用正则简单处理以下，当然我们可以进行更细粒度的控制。</p>\n<p><strong>第二步，将图片数据存储到storage中：</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.storage.sync.set(&#123;<span class=\"string\">&#x27;imgArr&#x27;</span>: imgArr&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;保存成功&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>第三步，生成预览图片的弹窗，这里用笔者上面实现的modal组件</strong>：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Modal.show(&#123;</span><br><span class=\"line\">  title: <span class=\"string\">&#x27;提取结果&#x27;</span>,</span><br><span class=\"line\">  content: imgBox</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>第四步，当popup发送激活按钮的通知时，我们要在网页中动态插入生成按钮：</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome.runtime.onMessage.addListener(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">message, sender, sendResponse</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (message == <span class=\"string\">&quot;activeBtn&quot;</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!$(<span class=\"string\">&#x27;.crawl-btn&#x27;</span>)) &#123;</span><br><span class=\"line\">        $(<span class=\"string\">&#x27;body&#x27;</span>).append(<span class=\"string\">&quot;&lt;div class=&#x27;crawl-btn&#x27;&gt;提取&lt;/div&gt;&quot;</span>)</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        $(<span class=\"string\">&#x27;.crawl-btn&#x27;</span>).css(<span class=\"string\">&quot;background-color&quot;</span>,<span class=\"string\">&quot;orange&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          $(<span class=\"string\">&#x27;.crawl-btn&#x27;</span>).css(<span class=\"string\">&quot;background-color&quot;</span>,<span class=\"string\">&quot;#06c&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      sendResponse(&#123;<span class=\"attr\">farewell</span>: <span class=\"string\">&quot;激活成功&quot;</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n<p>setTimeout那段纯属是为了吸引用户视线，当然我们可以用更优雅的方式来处理。插件核心代码主要是这些，当然还有很多细节要考虑，我把配置文件和一些细节放到github了，如果感兴趣的朋友可以安装感受一下。</p>\n<p>github地址：<a href=\"https://github.com/MrXujiang/fetchImg\">https://github.com/MrXujiang/fetchImg</a></p>\n"},{"title":"Maven学习笔记","date":"2019-08-13T02:00:41.000Z","comments":1,"thumbnail":"logo.jpeg","banner":"logo.jpeg","cover":"2019/08/13/Maven学习笔记/logo.jpeg","_content":"\n## Maven介绍:\n\nMaven就是是专门为Java项目打造的管理和构建工具，它的主要功能有：\n\n- 提供了一套标准化的项目结构；\n- 提供了一套标准化的构建流程（编译，测试，打包，发布……）；\n- 提供了一套依赖管理机制。\n\n### Maven项目结构\n\n一个使用Maven管理的普通的Java项目，它的目录结构默认如下：\n\n```\na-maven-project\n├── pom.xml\n├── src\n│   ├── main\n│   │   ├── java\n│   │   └── resources\n│   └── test\n│       ├── java\n│       └── resources\n└── target\n\n```\n\n项目的根目录`a-maven-project`是项目名，它有一个项目描述文件`pom.xml`，存放Java源码的目录是`src/main/java`，存放资源文件的目录是`src/main/resources`，存放测试源码的目录是`src/test/java`，存放测试资源的目录是`src/test/resources`，最后，所有编译、打包生成的文件都放在`target`目录里。这些就是一个Maven项目的标准目录结构。\n\n所有的目录结构都是约定好的标准结构，我们千万不要随意修改目录结构。使用标准结构不需要做任何配置，Maven就可以正常使用。\n\n我们再来看最关键的一个项目描述文件`pom.xml`，它的内容长得像下面：\n\n```\n<project ...>\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>com.itranswarp.learnjava</groupId>\n\t<artifactId>hello</artifactId>\n\t<version>1.0</version>\n\t<packaging>jar</packaging>\n\t<properties>\n        ...\n\t</properties>\n\t<dependencies>\n        <dependency>\n            <groupId>commons-logging</groupId>\n            <artifactId>commons-logging</artifactId>\n            <version>1.2</version>\n        </dependency>\n\t</dependencies>\n</project>\n\n```\n\n其中，`groupId`类似于Java的包名，通常是公司或组织名称，`artifactId`类似于Java的类名，通常是项目名称，再加上`version`，一个Maven工程就是由`groupId`，`artifactId`和`version`作为唯一标识。我们在引用其他第三方库的时候，也是通过这3个变量确定。例如，依赖`commons-logging`：\n\n```\n<dependency>\n    <groupId>commons-logging</groupId>\n    <artifactId>commons-logging</artifactId>\n    <version>1.2</version>\n</dependency>\n\n```\n\n使用`<dependency>`声明一个依赖后，Maven就会自动下载这个依赖包并把它放到classpath中。\n\n### 安装Maven\n\n要安装Maven，可以从[Maven官网](https://maven.apache.org/)下载最新的Maven 3.6.x，然后在本地解压，设置几个环境变量：\n\n```\nM2_HOME=/path/to/maven-3.6.xPATH=$PATH:$M2_HOME/bin\n```\n\n## 依赖管理:\n\n如果我们的项目依赖第三方的jar包，例如commons logging，那么问题来了：commons logging发布的jar包在哪下载？\n\n如果我们还希望依赖log4j，那么使用log4j需要哪些jar包？\n\n类似的依赖还包括：JUnit，JavaMail，MySQL驱动等等，一个可行的方法是通过搜索引擎搜索到项目的官网，然后手动下载zip包，解压，放入classpath。但是，这个过程非常繁琐。\n\nMaven解决了依赖管理问题。例如，我们的项目依赖`abc`这个jar包，而`abc`又依赖`xyz`这个jar包：\n\n```\n┌──────────────┐\n│Sample Project│\n└──────────────┘\n        │\n        ▼\n┌──────────────┐\n│     abc      │\n└──────────────┘\n        │\n        ▼\n┌──────────────┐\n│     xyz      │\n└──────────────┘\n\n```\n\n当我们声明了`abc`的依赖时，Maven自动把`abc`和`xyz`都加入了我们的项目依赖，不需要我们自己去研究`abc`是否需要依赖`xyz`。\n\n因此，Maven的第一个作用就是解决依赖管理。我们声明了自己的项目需要`abc`，Maven会自动导入`abc`的jar包，再判断出`abc`需要`xyz`，又会自动导入`xyz`的jar包，这样，最终我们的项目会依赖`abc`和`xyz`两个jar包。\n\n我们来看一个复杂依赖示例：\n\n```\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    <version>1.4.2.RELEASE</version>\n</dependency>\n\n```\n\n当我们声明一个`spring-boot-starter-web`依赖时，Maven会自动解析并判断最终需要大概二三十个其他依赖：\n\n```\nspring-boot-starter-web\n  spring-boot-starter\n    spring-boot\n    sprint-boot-autoconfigure\n    spring-boot-starter-logging\n      logback-classic\n        logback-core\n        slf4j-api\n      jcl-over-slf4j\n        slf4j-api\n      jul-to-slf4j\n        slf4j-api\n      log4j-over-slf4j\n        slf4j-api\n    spring-core\n    snakeyaml\n  spring-boot-starter-tomcat\n    tomcat-embed-core\n    tomcat-embed-el\n    tomcat-embed-websocket\n      tomcat-embed-core\n  jackson-databind\n  ...\n\n```\n\n如果我们自己去手动管理这些依赖是非常费时费力的，而且出错的概率很大。\n\n### 依赖关系:\n\nMaven定义了几种依赖关系，分别是`compile`、`test`、`runtime`和`provided`：\n\n[Untitled](https://www.notion.so/6247453f8f38404c9e697d1c7283ff04)\n\n其中，默认的`compile`是最常用的，Maven会把这种类型的依赖直接放入classpath。\n\n`test`依赖表示仅在测试时使用，正常运行时并不需要。最常用的`test`依赖就是JUnit：\n\n```\n<dependency>\n    <groupId>org.junit.jupiter</groupId>\n    <artifactId>junit-jupiter-api</artifactId>\n    <version>5.3.2</version>\n    <scope>test</scope>\n</dependency>\n\n```\n\n`runtime`依赖表示编译时不需要，但运行时需要。最典型的`runtime`依赖是JDBC驱动，例如MySQL驱动：\n\n```\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>5.1.48</version>\n    <scope>runtime</scope>\n</dependency>\n\n```\n\n`provided`依赖表示编译时需要，但运行时不需要。最典型的`provided`依赖是Servlet API，编译的时候需要，但是运行时，Servlet服务器内置了相关的jar，所以运行期不需要：\n\n```\n<dependency>\n    <groupId>javax.servlet</groupId>\n    <artifactId>javax.servlet-api</artifactId>\n    <version>4.0.0</version>\n    <scope>provided</scope>\n</dependency>\n\n```\n\n最后一个问题是，Maven如何知道从何处下载所需的依赖？也就是相关的jar包？答案是Maven维护了一个中央仓库（[repo1.maven.org](https://repo1.maven.org/)），所有第三方库将自身的jar以及相关信息上传至中央仓库，Maven就可以从中央仓库把所需依赖下载到本地。\n\nMaven并不会每次都从中央仓库下载jar包。一个jar包一旦被下载过，就会被Maven自动缓存在本地目录（用户主目录的`.m2`目录），所以，除了第一次编译时因为下载需要时间会比较慢，后续过程因为有本地缓存，并不会重复下载相同的jar包。\n\n### 唯一ID\n\n对于某个依赖，Maven只需要3个变量即可唯一确定某个jar包：\n\n- groupId：属于组织的名称，类似Java的包名；\n- artifactId：该jar包自身的名称，类似Java的类名；\n- version：该jar包的版本。\n\n通过上述3个变量，即可唯一确定某个jar包。Maven通过对jar包进行PGP签名确保任何一个jar包一经发布就无法修改。修改已发布jar包的唯一方法是发布一个新版本。\n\n因此，某个jar包一旦被Maven下载过，即可永久地安全缓存在本地。\n\n注：只有以`-SNAPSHOT`结尾的版本号会被Maven视为开发版本，开发版本每次都会重复下载，这种SNAPSHOT版本只能用于内部私有的Maven repo，公开发布的版本不允许出现SNAPSHOT。\n\n### Maven镜像\n\n除了可以从Maven的中央仓库下载外，还可以从Maven的镜像仓库下载。如果访问Maven的中央仓库非常慢，我们可以选择一个速度较快的Maven的镜像仓库。Maven镜像仓库定期从中央仓库同步：\n\n```\n           slow    ┌───────────────────┐\n    ┌─────────────>│Maven Central Repo.│\n    │              └───────────────────┘\n    │                        │\n    │                        │sync\n    │                        ▼\n┌───────┐  fast    ┌───────────────────┐\n│ User  │─────────>│Maven Mirror Repo. │\n└───────┘          └───────────────────┘\n\n```\n\n中国区用户可以使用阿里云提供的Maven镜像仓库。使用Maven镜像仓库需要一个配置，在用户主目录下进入`.m2`目录，创建一个`settings.xml`配置文件，内容如下：\n\n```\n<settings>\n    <mirrors>\n        <mirror>\n            <id>aliyun</id>\n            <name>aliyun</name>\n            <mirrorOf>central</mirrorOf>\n<!-- 国内推荐阿里云的Maven镜像 --><url>https://maven.aliyun.com/repository/central</url>\n        </mirror>\n    </mirrors>\n</settings>\n\n```\n\n配置镜像仓库后，Maven的下载速度就会非常快。\n\n### 搜索第三方组件\n\n最后一个问题：如果我们要引用一个第三方组件，比如`okhttp`，如何确切地获得它的`groupId`、`artifactId`和`version`？方法是通过[search.maven.org](https://search.maven.org/)搜索关键字，找到对应的组件后，直接复制：\n\n[https://www.liaoxuefeng.com/files/attachments/1322179230695490/l](https://www.liaoxuefeng.com/files/attachments/1322179230695490/l)\n\n### 命令行编译\n\n在命令中，进入到`pom.xml`所在目录，输入以下命令：\n\n```\n$ mvn clean package\n```\n\n## 构建流程:\n\n### 构建流程\n\nMaven不但有标准化的项目结构，而且还有一套标准化的构建流程，可以自动化实现编译，打包，发布，等等。\n\n### Lifecycle和Phase\n\n使用Maven时，我们首先要了解什么是Maven的生命周期（lifecycle）。\n\nMaven的生命周期由一系列阶段（phase）构成，以内置的生命周期`default`为例，它包含以下phase：\n\n- validate\n- initialize\n- generate-sources\n- process-sources\n- generate-resources\n- process-resources\n- compile\n- process-classes\n- generate-test-sources\n- process-test-sources\n- generate-test-resources\n- process-test-resources\n- test-compile\n- process-test-classes\n- test\n- prepare-package\n- package\n- pre-integration-test\n- integration-test\n- post-integration-test\n- verify\n- install\n- deploy\n\n如果我们运行`mvn package`，Maven就会执行`default`生命周期，它会从开始一直运行到`package`这个phase为止：\n\n- validate\n- ...\n- package\n\n如果我们运行`mvn compile`，Maven也会执行`default`生命周期，但这次它只会运行到`compile`，即以下几个phase：\n\n- validate\n- ...\n- compile\n\nMaven另一个常用的生命周期是`clean`，它会执行3个phase：\n\n- pre-clean\n- clean （注意这个clean不是lifecycle而是phase）\n- post-clean\n\n所以，我们使用`mvn`这个命令时，后面的参数是phase，Maven自动根据生命周期运行到指定的phase。\n\n更复杂的例子是指定多个phase，例如，运行`mvn clean package`，Maven先执行`clean`生命周期并运行到`clean`这个phase，然后执行`default`生命周期并运行到`package`这个phase，实际执行的phase如下：\n\n- pre-clean\n- clean （注意这个clean是phase）\n- validate\n- ...\n- package\n\n在实际开发过程中，经常使用的命令有：\n\n`mvn clean`：清理所有生成的class和jar；\n\n`mvn clean compile`：先清理，再执行到`compile`；\n\n`mvn clean test`：先清理，再执行到`test`，因为执行`test`前必须执行`compile`，所以这里不必指定`compile`；\n\n`mvn clean package`：先清理，再执行到`package`。\n\n大多数phase在执行过程中，因为我们通常没有在`pom.xml`中配置相关的设置，所以这些phase什么事情都不做。\n\n经常用到的phase其实只有几个：\n\n- clean：清理\n- compile：编译\n- test：运行测试\n- package：打包\n\n### Goal\n\n执行一个phase又会触发一个或多个goal：\n\n[Untitled](https://www.notion.so/a20188a3e0174e87a895099f07ad5bf6)\n\ngoal的命名总是`abc:xyz`这种形式。\n\n看到这里，相信大家对lifecycle、phase和goal已经明白了吧？\n\n## 使用插件:\n\n我们在前面介绍了Maven的lifecycle，phase和goal：使用Maven构建项目就是执行lifecycle，执行到指定的phase为止。每个phase会执行自己默认的一个或多个goal。goal是最小任务单元。\n\n我们以`compile`这个phase为例，如果执行：\n\n```\nmvn compile\n\n```\n\nMaven将执行`compile`这个phase，这个phase会调用`compiler`插件执行关联的`compiler:compile`这个goal。\n\n实际上，执行每个phase，都是通过某个插件（plugin）来执行的，Maven本身其实并不知道如何执行`compile`，它只是负责找到对应的`compiler`插件，然后执行默认的`compiler:compile`这个goal来完成编译。\n\n所以，使用Maven，实际上就是配置好需要使用的插件，然后通过phase调用它们。\n\nMaven已经内置了一些常用的标准插件：\n\n[Untitled](https://www.notion.so/885e77e11f2d4d69af41315dd443f44f)\n\n如果标准插件无法满足需求，我们还可以使用自定义插件。使用自定义插件的时候，需要声明。例如，使用`maven-shade-plugin`可以创建一个可执行的jar，要使用这个插件，需要在`pom.xml`中声明它：\n\n```\n<project>\n    ...\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-shade-plugin</artifactId>\n                <version>3.2.1</version>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<phase>package</phase>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>shade</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<configuration>\n                            ...\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n</project>\n\n```\n\n自定义插件往往需要一些配置，例如，`maven-shade-plugin`需要指定Java程序的入口，它的配置是：\n\n```\n<configuration>\n    <transformers>\n        <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n            <mainClass>com.itranswarp.learnjava.Main</mainClass>\n        </transformer>\n    </transformers>\n</configuration>\n\n```\n\n注意，Maven自带的标准插件例如`compiler`是无需声明的，只有引入其它的插件才需要声明。\n\n下面列举了一些常用的插件：\n\n- maven-shade-plugin：打包所有依赖包并生成可执行jar；\n- cobertura-maven-plugin：生成单元测试覆盖率报告；\n- findbugs-maven-plugin：对Java源码进行静态分析以找出潜在问题。\n\n## 模块管理:\n\n在软件开发中，把一个大项目分拆为多个模块是降低软件复杂度的有效方法：\n\n```\n                        ┌ ─ ─ ─ ─ ─ ─ ┐\n                          ┌─────────┐\n                        │ │Module A │ │\n                          └─────────┘\n┌──────────────┐ split  │ ┌─────────┐ │\n│Single Project│───────>  │Module B │\n└──────────────┘        │ └─────────┘ │\n                          ┌─────────┐\n                        │ │Module C │ │\n                          └─────────┘\n                        └ ─ ─ ─ ─ ─ ─ ┘\n\n```\n\n对于Maven工程来说，原来是一个大项目：\n\n```\nsingle-project\n├── pom.xml\n└── src\n\n```\n\n现在可以分拆成3个模块：\n\n```\nmutiple-project\n├── module-a\n│   ├── pom.xml\n│   └── src\n├── module-b\n│   ├── pom.xml\n│   └── src\n└── module-c\n    ├── pom.xml\n    └── src\n\n```\n\nMaven可以有效地管理多个模块，我们只需要把每个模块当作一个独立的Maven项目，它们有各自独立的`pom.xml`。例如，模块A的`pom.xml`：\n\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.itranswarp.learnjava</groupId>\n    <artifactId>module-a</artifactId>\n    <version>1.0</version>\n    <packaging>jar</packaging>\n\n    <name>module-a</name>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <maven.compiler.source>11</maven.compiler.source>\n        <maven.compiler.target>11</maven.compiler.target>\n        <java.version>11</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>1.7.28</version>\n        </dependency>\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>1.2.3</version>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-engine</artifactId>\n            <version>5.5.2</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n</project>\n\n```\n\n模块B的`pom.xml`：\n\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.itranswarp.learnjava</groupId>\n    <artifactId>module-b</artifactId>\n    <version>1.0</version>\n    <packaging>jar</packaging>\n\n    <name>module-b</name>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <maven.compiler.source>11</maven.compiler.source>\n        <maven.compiler.target>11</maven.compiler.target>\n        <java.version>11</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>1.7.28</version>\n        </dependency>\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>1.2.3</version>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-engine</artifactId>\n            <version>5.5.2</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n</project>\n\n```\n\n可以看出来，模块A和模块B的`pom.xml`高度相似，因此，我们可以提取出共同部分作为`parent`：\n\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.itranswarp.learnjava</groupId>\n    <artifactId>parent</artifactId>\n    <version>1.0</version>\n    <packaging>pom</packaging>\n\n    <name>parent</name>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <maven.compiler.source>11</maven.compiler.source>\n        <maven.compiler.target>11</maven.compiler.target>\n        <java.version>11</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>1.7.28</version>\n        </dependency>\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>1.2.3</version>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-engine</artifactId>\n            <version>5.5.2</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n</project>\n\n```\n\n注意到parent的`<packaging>`是`pom`而不是`jar`，因为`parent`本身不含任何Java代码。编写`parent`的`pom.xml`只是为了在各个模块中减少重复的配置。现在我们的整个工程结构如下：\n\n```\nmultiple-project\n├── pom.xml\n├── parent\n│   └── pom.xml\n├── module-a\n│   ├── pom.xml\n│   └── src\n├── module-b\n│   ├── pom.xml\n│   └── src\n└── module-c\n    ├── pom.xml\n    └── src\n\n```\n\n这样模块A就可以简化为：\n\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <parent>\n        <groupId>com.itranswarp.learnjava</groupId>\n        <artifactId>parent</artifactId>\n        <version>1.0</version>\n        <relativePath>../parent/pom.xml</relativePath>\n    </parent>\n\n    <artifactId>module-a</artifactId>\n    <packaging>jar</packaging>\n    <name>module-a</name>\n</project>\n\n```\n\n模块B、模块C都可以直接从`parent`继承，大幅简化了`pom.xml`的编写。\n\n如果模块A依赖模块B，则模块A需要模块B的jar包才能正常编译，我们需要在模块A中引入模块B：\n\n```\n    ...\n    <dependencies>\n        <dependency>\n            <groupId>com.itranswarp.learnjava</groupId>\n            <artifactId>module-b</artifactId>\n            <version>1.0</version>\n        </dependency>\n    </dependencies>\n\n```\n\n最后，在编译的时候，需要在根目录创建一个`pom.xml`统一编译：\n\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.itranswarp.learnjava</groupId>\n    <artifactId>build</artifactId>\n    <version>1.0</version>\n    <packaging>pom</packaging>\n    <name>build</name>\n\n    <modules>\n        <module>parent</module>\n        <module>module-a</module>\n        <module>module-b</module>\n        <module>module-c</module>\n    </modules>\n</project>\n\n```\n\n这样，在根目录执行`mvn clean package`时，Maven根据根目录的`pom.xml`找到包括`parent`在内的共4个`<module>`，一次性全部编译。\n\n### 中央仓库\n\n其实我们使用的大多数第三方模块都是这个用法，例如，我们使用commons logging、log4j这些第三方模块，就是第三方模块的开发者自己把编译好的jar包发布到Maven的中央仓库中。\n\n### 私有仓库\n\n私有仓库是指公司内部如果不希望把源码和jar包放到公网上，那么可以搭建私有仓库。私有仓库总是在公司内部使用，它只需要在本地的`~/.m2/settings.xml`中配置好，使用方式和中央仓位没有任何区别。\n\n### 本地仓库\n\n本地仓库是指把本地开发的项目“发布”在本地，这样其他项目可以通过本地仓库引用它。但是我们不推荐把自己的模块安装到Maven的本地仓库，因为每次修改某个模块的源码，都需要重新安装，非常容易出现版本不一致的情况。更好的方法是使用模块化编译，在编译的时候，告诉Maven几个模块之间存在依赖关系，需要一块编译，Maven就会自动按依赖顺序编译这些模块。\n\n## 使用mvnw:\n\n我们使用Maven时，基本上只会用到`mvn`这一个命令。有些童鞋可能听说过`mvnw`，这个是啥？\n\n`mvnw`是Maven Wrapper的缩写。因为我们安装Maven时，默认情况下，系统所有项目都会使用全局安装的这个Maven版本。但是，对于某些项目来说，它可能必须使用某个特定的Maven版本，这个时候，就可以使用Maven Wrapper，它可以负责给这个特定的项目安装指定版本的Maven，而其他项目不受影响。\n\n简单地说，Maven Wrapper就是给一个项目提供一个独立的，指定版本的Maven给它使用。\n\n### 安装Maven Wrapper\n\n安装Maven Wrapper最简单的方式是在项目的根目录（即`pom.xml`所在的目录）下运行安装命令：\n\n```\nmvn -N io.takari:maven:0.7.6:wrapper\n\n```\n\n它会自动使用最新版本的Maven。注意`0.7.6`是Maven Wrapper的版本。最新的Maven Wrapper版本可以去[官方网站](https://github.com/takari/maven-wrapper)查看。\n\n如果要指定使用的Maven版本，使用下面的安装命令指定版本，例如`3.3.3`：\n\n```\nmvn -N io.takari:maven:0.7.6:wrapper -Dmaven=3.3.3\n```\n\n安装后，查看项目结构：\n\n```\nmy-project\n├── .mvn\n│   └── wrapper\n│       ├── MavenWrapperDownloader.java\n│       ├── maven-wrapper.jar\n│       └── maven-wrapper.properties\n├── mvnw\n├── mvnw.cmd\n├── pom.xml\n└── src\n    ├── main\n    │   ├── java\n    │   └── resources\n    └── test\n        ├── java\n        └── resources\n\n```\n\n发现多了`mvnw`、`mvnw.cmd`和`.mvn`目录，我们只需要把`mvn`命令改成`mvnw`就可以使用跟项目关联的Maven。例如：\n\n```\nmvnw cleanpackage\n```\n\n在Linux或macOS下运行时需要加上`./`：\n\n```\n./mvnw cleanpackage\n```\n\nMaven Wrapper的另一个作用是把项目的`mvnw`、`mvnw.cmd`和`.mvn`提交到版本库中，可以使所有开发人员使用统一的Maven版本。\n\n## 发布Artifact:\n\n当我们使用`commons-logging`这些第三方开源库的时候，我们实际上是通过Maven自动下载它的jar包，并根据其`pom.xml`解析依赖，自动把相关依赖包都下载后加入到classpath。\n\n那么问题来了：当我们自己写了一个牛逼的开源库时，非常希望别人也能使用，总不能直接放个jar包的链接让别人下载吧？\n\n如果我们把自己的开源库放到Maven的repo中，那么，别人只需按标准引用`groupId:artifactId:version`，即可自动下载jar包以及相关依赖。因此，本节我们介绍如何发布一个库到Maven的repo中。\n\n把自己的库发布到Maven的repo中有好几种方法，我们介绍3种最常用的方法。\n\n### 以静态文件发布\n\n如果我们观察一个中央仓库的Artifact结构，例如[Commons Math](https://commons.apache.org/proper/commons-math/)，它的groupId是`org.apache.commons`，artifactId是`commons-math3`，以版本`3.6.1`为例，发布在中央仓库的文件夹路径就是[https://repo1.maven.org/maven2/org/apache/commons/commons-math3/3.6.1/](https://repo1.maven.org/maven2/org/apache/commons/commons-math3/3.6.1/)，在此文件夹下，`commons-math3-3.6.1.jar`就是发布的jar包，`commons-math3-3.6.1.pom`就是它的`pom.xml`描述文件，`commons-math3-3.6.1-sources.jar`是源代码，`commons-math3-3.6.1-javadoc.jar`是文档。其它以`.asc`、`.md5`、`.sha1`结尾的文件分别是GPG签名、MD5摘要和SHA-1摘要。\n\n我们只要按照这种目录结构组织文件，它就是一个有效的Maven仓库。\n\n我们以广受好评的开源项目[how-to-become-rich](https://github.com/michaelliao/how-to-become-rich)为例，先创建Maven工程目录结构如下：\n\n```\nhow-to-become-rich\n├── maven-repo        <-- Maven本地文件仓库\n├── pom.xml           <-- 项目文件\n├── src\n│   ├── main\n│   │   ├── java      <-- 源码目录\n│   │   └── resources <-- 资源目录\n│   └── test\n│       ├── java      <-- 测试源码目录\n│       └── resources <-- 测试资源目录\n└── target            <-- 编译输出目录\n\n```\n\n在`pom.xml`中添加如下内容：\n\n```\n<project ...>\n    ...\n    <distributionManagement>\n        <repository>\n            <id>local-repo-release</id>\n            <name>GitHub Release</name>\n            <url>file://${project.basedir}/maven-repo</url>\n        </repository>\n    </distributionManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <artifactId>maven-source-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>attach-sources</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>jar-no-fork</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>attach-javadocs</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>jar</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n\n```\n\n注意到`<distributionManagement>`，它指示了发布的软件包的位置，这里的`<url>`是项目根目录下的`maven-repo`目录，在`<build>`中定义的两个插件`maven-source-plugin`和`maven-javadoc-plugin`分别用来创建源码和javadoc，如果不想发布源码，可以把对应的插件去掉。\n\n我们直接在项目根目录下运行Maven命令`mvn clean package deploy`，如果一切顺利，我们就可以在`maven-repo`目录下找到部署后的所有文件如下：\n\n```\nmaven-repo\n└── com\n    └── itranswarp\n        └── rich\n            └── how-to-become-rich\n                ├── 1.0.0\n                │   ├── how-to-become-rich-1.0.0-javadoc.jar\n                │   ├── how-to-become-rich-1.0.0-javadoc.jar.md5\n                │   ├── how-to-become-rich-1.0.0-javadoc.jar.sha1\n                │   ├── how-to-become-rich-1.0.0-sources.jar\n                │   ├── how-to-become-rich-1.0.0-sources.jar.md5\n                │   ├── how-to-become-rich-1.0.0-sources.jar.sha1\n                │   ├── how-to-become-rich-1.0.0.jar\n                │   ├── how-to-become-rich-1.0.0.jar.md5\n                │   ├── how-to-become-rich-1.0.0.jar.sha1\n                │   ├── how-to-become-rich-1.0.0.pom\n                │   ├── how-to-become-rich-1.0.0.pom.md5\n                │   └── how-to-become-rich-1.0.0.pom.sha1\n                ├── maven-metadata.xml\n                ├── maven-metadata.xml.md5\n                └── maven-metadata.xml.sha1\n\n```\n\n最后一步，是把这个工程推到GitHub上，并选择`Settings`-`GitHub Pages`，选择`master branch`启用Pages服务：\n\n![learn-maven%20eb9d5ffa7bae4b5bb1e0874b7f871af4/Untitled.png](learn-maven%20eb9d5ffa7bae4b5bb1e0874b7f871af4/Untitled.png)\n\n这样，把全部内容推送至GitHub后，即可作为静态网站访问Maven的repo，它的地址是[https://michaelliao.github.io/how-to-become-rich/maven-repo/](https://michaelliao.github.io/how-to-become-rich/maven-repo/)。版本`1.0.0`对应的jar包地址是：\n\n```\nhttps://michaelliao.github.io/how-to-become-rich/maven-repo/com/itranswarp/rich/how-to-become-rich/1.0.0/how-to-become-rich-1.0.0.jar\n\n```\n\n现在，如果其他人希望引用这个Maven包，我们可以告知如下依赖即可：\n\n```\n<dependency>\n    <groupId>com.itranswarp.rich</groupId>\n    <artifactId>how-to-become-rich</artifactId>\n    <version>1.0.0</version>\n</dependency>\n\n```\n\n但是，除了正常导入依赖外，对方还需要再添加一个`<repository>`的声明，即使用方完整的`pom.xml`如下：\n\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>example</groupId>\n    <artifactId>how-to-become-rich-usage</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <properties>\n        <maven.compiler.source>11</maven.compiler.source>\n        <maven.compiler.target>11</maven.compiler.target>\n        <java.version>11</java.version>\n    </properties>\n\n    <repositories>\n        <repository>\n            <id>github-rich-repo</id>\n            <name>The Maven Repository on Github</name>\n            <url>https://michaelliao.github.io/how-to-become-rich/maven-repo/</url>\n        </repository>\n    </repositories>\n\n    <dependencies>\n        <dependency>\n            <groupId>com.itranswarp.rich</groupId>\n            <artifactId>how-to-become-rich</artifactId>\n            <version>1.0.0</version>\n        </dependency>\n    </dependencies>\n</project>\n\n```\n\n在`<repository>`中，我们必须声明发布的Maven的repo地址，其中`<id>`和`<name>`可以任意填写，`<url>`填入GitHub Pages提供的地址+`/maven-repo/`后缀。现在，即可正常引用这个库并编写代码如下：\n\n```\nMillionaire millionaire =new Millionaire();\nSystem.out.println(millionaire.howToBecomeRich());\n\n```\n\n有的童鞋会问，为什么使用`commons-logging`等第三方库时，并不需要声明repo地址？这是因为这些库都是发布到Maven中央仓库的，发布到中央仓库后，不需要告诉Maven仓库地址，因为它知道中央仓库的地址默认是[https://repo1.maven.org/maven2/](https://repo1.maven.org/maven2/)，也可以通过`~/.m2/settings.xml`指定一个代理仓库地址以替代中央仓库来提高速度（参考[依赖管理](https://www.liaoxuefeng.com/wiki/1252599548343744/1309301178105890)的Maven镜像）。\n\n因为GitHub Pages并不会把我们发布的Maven包同步到中央仓库，所以自然使用方必须手动添加一个我们提供的仓库地址。\n\n此外，通过GitHub Pages发布Maven repo时需要注意一点，即不要改动已发布的版本。因为Maven的仓库是不允许修改任何版本的，对一个库进行修改的唯一方法是发布一个新版本。但是通过静态文件的方式发布repo，实际上我们是可以修改jar文件的，但最好遵守规范，不要修改已发布版本。\n\n### 通过Nexus发布到中央仓库\n\n有的童鞋会问，能不能把自己的开源库发布到Maven的中央仓库，这样用户就不需要声明repo地址，可以直接引用，显得更专业。\n\n当然可以，但我们不能直接发布到Maven中央仓库，而是通过曲线救国的方式，发布到[central.sonatype.org](https://central.sonatype.org/)，它会定期自动同步到Maven的中央仓库。[Nexus](https://www.sonatype.com/nexus-repository-oss)是一个支持Maven仓库的软件，由Sonatype开发，有免费版和专业版两个版本，很多大公司内部都使用Nexus作为自己的私有Maven仓库，而这个[central.sonatype.org](https://central.sonatype.org/)相当于面向开源的一个Nexus公共服务。\n\n所以，第一步是在[central.sonatype.org](https://central.sonatype.org/)上注册一个账号，注册链接非常隐蔽，可以自己先找找，找半小时没找到点这里查看攻略。\n\n如果注册顺利并审核通过，会得到一个登录账号，然后，通过[这个页面](https://central.sonatype.org/pages/apache-maven.html)一步一步操作就可以成功地将自己的Artifact发布到Nexus上，再耐心等待几个小时后，你的Artifact就会出现在Maven的中央仓库中。\n\n这里简单提一下发布重点与难点：\n\n- 必须正确创建GPG签名，Linux和Mac下推荐使用gnupg2；\n- 必须在`~/.m2/settings.xml`中配置好登录用户名和口令，以及GPG口令：\n\n```\n<settings ...>\n    ...\n    <servers>\n        <server>\n            <id>ossrh</id>\n            <username>OSSRH-USERNAME</username>\n            <password>OSSRH-PASSWORD</password>\n        </server>\n    </servers>\n    <profiles>\n        <profile>\n            <id>ossrh</id>\n            <activation>\n                <activeByDefault>true</activeByDefault>\n            </activation>\n            <properties>\n                <gpg.executable>gpg2</gpg.executable>\n                <gpg.passphrase>GPG-PASSWORD</gpg.passphrase>\n            </properties>\n        </profile>\n    </profiles>\n</settings>\n\n```\n\n在待发布的Artifact的`pom.xml`中添加OSS的Maven repo地址，以及`maven-jar-plugin`、`maven-source-plugin`、`maven-javadoc-plugin`、`maven-gpg-plugin`、`nexus-staging-maven-plugin`：\n\n```\n<project ...>\n    ...\n    <distributionManagement>\n        <snapshotRepository>\n            <id>ossrh</id>\n            <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n        </snapshotRepository>\n\n        <repository>\n            <id>ossrh</id>\n            <name>Nexus Release Repository</name>\n            <url>http://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n        </repository>\n    </distributionManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>jar</goal>\n                            <goal>test-jar</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-source-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>attach-sources</id>\n                        <goals>\n                            <goal>jar-no-fork</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>attach-javadocs</id>\n                        <goals>\n                            <goal>jar</goal>\n                        </goals>\n                        <configuration>\n                            <additionalOption>\n                                <additionalOption>-Xdoclint:none</additionalOption>\n                            </additionalOption>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-gpg-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>sign-artifacts</id>\n                        <phase>verify</phase>\n                        <goals>\n                            <goal>sign</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.sonatype.plugins</groupId>\n                <artifactId>nexus-staging-maven-plugin</artifactId>\n                <version>1.6.3</version>\n                <extensions>true</extensions>\n                <configuration>\n                    <serverId>ossrh</serverId>\n                    <nexusUrl>https://oss.sonatype.org/</nexusUrl>\n                    <autoReleaseAfterClose>true</autoReleaseAfterClose>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n\n```\n\n最后执行命令`mvn clean package deploy`即可发布至[central.sonatype.org](https://central.sonatype.org/)。\n\n此方法前期需要复杂的申请账号和项目的流程，后期需要安装调试GPG，但只要跑通流程，后续发布都只需要一行命令。\n\n### 发布到私有仓库\n\n通过`nexus-staging-maven-plugin`除了可以发布到[central.sonatype.org](https://central.sonatype.org/)外，也可以发布到私有仓库，例如，公司内部自己搭建的Nexus服务器。\n\n如果没有私有Nexus服务器，还可以发布到[GitHub Packages](https://github.com/features/packages)。GitHub Packages是GitHub提供的仓库服务，支持Maven、NPM、Docker等。使用GitHub Packages时，无论是发布Artifact，还是引用已发布的Artifact，都需要明确的授权Token，因此，GitHub Packages只能作为私有仓库使用。\n\n在发布前，我们必须首先登录后在用户的`Settings`-`Developer settings`-`Personal access tokens`中创建两个Token，一个用于发布，一个用于使用。发布Artifact的Token必须有`repo`、`write:packages`和`read:packages`权限：\n\n[https://www.liaoxuefeng.com/files/attachments/1347999282233410/l](https://www.liaoxuefeng.com/files/attachments/1347999282233410/l)\n\n使用Artifact的Token只需要`read:packages`权限。\n\n在发布端，把GitHub的用户名和发布Token写入`~/.m2/settings.xml`配置中：\n\n```\n<settings ...>\n    ...\n    <servers>\n        <server>\n            <id>github-release</id>\n            <username>GITHUB-USERNAME</username>\n            <password>f052...c21f</password>\n        </server>\n    </servers>\n</settings>\n\n```\n\n然后，在需要发布的Artifact的`pom.xml`中，添加一个`<repository>`声明：\n\n```\n<project ...>\n    ...\n    <distributionManagement>\n        <repository>\n            <id>github-release</id>\n            <name>GitHub Release</name>\n            <url>https://maven.pkg.github.com/michaelliao/complex</url>\n        </repository>\n    </distributionManagement>\n</project>\n\n```\n\n注意到`<id>`和`~/.m2/settings.xml`配置中的`<id>`要保持一致，因为发布时Maven根据id找到用于登录的用户名和Token，才能成功上传文件到GitHub。我们直接通过命令`mvn clean package deploy`部署，成功后，在GitHub用户页面可以看到该Artifact：\n\n[https://www.liaoxuefeng.com/files/attachments/1348000710393922/l](https://www.liaoxuefeng.com/files/attachments/1348000710393922/l)\n\n完整的配置请参考[complex](https://github.com/michaelliao/complex/)项目，这是一个非常简单的支持复数运算的库。\n\n使用该Artifact时，因为GitHub的Package只能作为私有仓库使用，所以除了在使用方的`pom.xml`中声明`<repository>`外：\n\n```\n<project ...>\n    ...\n    <repositories>\n        <repository>\n            <id>github-release</id>\n            <name>GitHub Release</name>\n            <url>https://maven.pkg.github.com/michaelliao/complex</url>\n        </repository>\n    </repositories>\n\n    <dependencies>\n        <dependency>\n            <groupId>com.itranswarp</groupId>\n            <artifactId>complex</artifactId>\n            <version>1.0.0</version>\n        </dependency>\n    </dependencies>\n    ...\n</project>\n\n```\n\n还需要把有读权限的Token配置到`~/.m2/settings.xml`文件中。","source":"_posts/Maven学习笔记.md","raw":"---\ntitle: Maven学习笔记\ndate: 2019-08-13 10:00:41\ncomments: true\ntags: \n    - Maven\ncategories: 后端\nthumbnail: logo.jpeg\nbanner: logo.jpeg\ncover: logo.jpeg\n---\n\n## Maven介绍:\n\nMaven就是是专门为Java项目打造的管理和构建工具，它的主要功能有：\n\n- 提供了一套标准化的项目结构；\n- 提供了一套标准化的构建流程（编译，测试，打包，发布……）；\n- 提供了一套依赖管理机制。\n\n### Maven项目结构\n\n一个使用Maven管理的普通的Java项目，它的目录结构默认如下：\n\n```\na-maven-project\n├── pom.xml\n├── src\n│   ├── main\n│   │   ├── java\n│   │   └── resources\n│   └── test\n│       ├── java\n│       └── resources\n└── target\n\n```\n\n项目的根目录`a-maven-project`是项目名，它有一个项目描述文件`pom.xml`，存放Java源码的目录是`src/main/java`，存放资源文件的目录是`src/main/resources`，存放测试源码的目录是`src/test/java`，存放测试资源的目录是`src/test/resources`，最后，所有编译、打包生成的文件都放在`target`目录里。这些就是一个Maven项目的标准目录结构。\n\n所有的目录结构都是约定好的标准结构，我们千万不要随意修改目录结构。使用标准结构不需要做任何配置，Maven就可以正常使用。\n\n我们再来看最关键的一个项目描述文件`pom.xml`，它的内容长得像下面：\n\n```\n<project ...>\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>com.itranswarp.learnjava</groupId>\n\t<artifactId>hello</artifactId>\n\t<version>1.0</version>\n\t<packaging>jar</packaging>\n\t<properties>\n        ...\n\t</properties>\n\t<dependencies>\n        <dependency>\n            <groupId>commons-logging</groupId>\n            <artifactId>commons-logging</artifactId>\n            <version>1.2</version>\n        </dependency>\n\t</dependencies>\n</project>\n\n```\n\n其中，`groupId`类似于Java的包名，通常是公司或组织名称，`artifactId`类似于Java的类名，通常是项目名称，再加上`version`，一个Maven工程就是由`groupId`，`artifactId`和`version`作为唯一标识。我们在引用其他第三方库的时候，也是通过这3个变量确定。例如，依赖`commons-logging`：\n\n```\n<dependency>\n    <groupId>commons-logging</groupId>\n    <artifactId>commons-logging</artifactId>\n    <version>1.2</version>\n</dependency>\n\n```\n\n使用`<dependency>`声明一个依赖后，Maven就会自动下载这个依赖包并把它放到classpath中。\n\n### 安装Maven\n\n要安装Maven，可以从[Maven官网](https://maven.apache.org/)下载最新的Maven 3.6.x，然后在本地解压，设置几个环境变量：\n\n```\nM2_HOME=/path/to/maven-3.6.xPATH=$PATH:$M2_HOME/bin\n```\n\n## 依赖管理:\n\n如果我们的项目依赖第三方的jar包，例如commons logging，那么问题来了：commons logging发布的jar包在哪下载？\n\n如果我们还希望依赖log4j，那么使用log4j需要哪些jar包？\n\n类似的依赖还包括：JUnit，JavaMail，MySQL驱动等等，一个可行的方法是通过搜索引擎搜索到项目的官网，然后手动下载zip包，解压，放入classpath。但是，这个过程非常繁琐。\n\nMaven解决了依赖管理问题。例如，我们的项目依赖`abc`这个jar包，而`abc`又依赖`xyz`这个jar包：\n\n```\n┌──────────────┐\n│Sample Project│\n└──────────────┘\n        │\n        ▼\n┌──────────────┐\n│     abc      │\n└──────────────┘\n        │\n        ▼\n┌──────────────┐\n│     xyz      │\n└──────────────┘\n\n```\n\n当我们声明了`abc`的依赖时，Maven自动把`abc`和`xyz`都加入了我们的项目依赖，不需要我们自己去研究`abc`是否需要依赖`xyz`。\n\n因此，Maven的第一个作用就是解决依赖管理。我们声明了自己的项目需要`abc`，Maven会自动导入`abc`的jar包，再判断出`abc`需要`xyz`，又会自动导入`xyz`的jar包，这样，最终我们的项目会依赖`abc`和`xyz`两个jar包。\n\n我们来看一个复杂依赖示例：\n\n```\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    <version>1.4.2.RELEASE</version>\n</dependency>\n\n```\n\n当我们声明一个`spring-boot-starter-web`依赖时，Maven会自动解析并判断最终需要大概二三十个其他依赖：\n\n```\nspring-boot-starter-web\n  spring-boot-starter\n    spring-boot\n    sprint-boot-autoconfigure\n    spring-boot-starter-logging\n      logback-classic\n        logback-core\n        slf4j-api\n      jcl-over-slf4j\n        slf4j-api\n      jul-to-slf4j\n        slf4j-api\n      log4j-over-slf4j\n        slf4j-api\n    spring-core\n    snakeyaml\n  spring-boot-starter-tomcat\n    tomcat-embed-core\n    tomcat-embed-el\n    tomcat-embed-websocket\n      tomcat-embed-core\n  jackson-databind\n  ...\n\n```\n\n如果我们自己去手动管理这些依赖是非常费时费力的，而且出错的概率很大。\n\n### 依赖关系:\n\nMaven定义了几种依赖关系，分别是`compile`、`test`、`runtime`和`provided`：\n\n[Untitled](https://www.notion.so/6247453f8f38404c9e697d1c7283ff04)\n\n其中，默认的`compile`是最常用的，Maven会把这种类型的依赖直接放入classpath。\n\n`test`依赖表示仅在测试时使用，正常运行时并不需要。最常用的`test`依赖就是JUnit：\n\n```\n<dependency>\n    <groupId>org.junit.jupiter</groupId>\n    <artifactId>junit-jupiter-api</artifactId>\n    <version>5.3.2</version>\n    <scope>test</scope>\n</dependency>\n\n```\n\n`runtime`依赖表示编译时不需要，但运行时需要。最典型的`runtime`依赖是JDBC驱动，例如MySQL驱动：\n\n```\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>5.1.48</version>\n    <scope>runtime</scope>\n</dependency>\n\n```\n\n`provided`依赖表示编译时需要，但运行时不需要。最典型的`provided`依赖是Servlet API，编译的时候需要，但是运行时，Servlet服务器内置了相关的jar，所以运行期不需要：\n\n```\n<dependency>\n    <groupId>javax.servlet</groupId>\n    <artifactId>javax.servlet-api</artifactId>\n    <version>4.0.0</version>\n    <scope>provided</scope>\n</dependency>\n\n```\n\n最后一个问题是，Maven如何知道从何处下载所需的依赖？也就是相关的jar包？答案是Maven维护了一个中央仓库（[repo1.maven.org](https://repo1.maven.org/)），所有第三方库将自身的jar以及相关信息上传至中央仓库，Maven就可以从中央仓库把所需依赖下载到本地。\n\nMaven并不会每次都从中央仓库下载jar包。一个jar包一旦被下载过，就会被Maven自动缓存在本地目录（用户主目录的`.m2`目录），所以，除了第一次编译时因为下载需要时间会比较慢，后续过程因为有本地缓存，并不会重复下载相同的jar包。\n\n### 唯一ID\n\n对于某个依赖，Maven只需要3个变量即可唯一确定某个jar包：\n\n- groupId：属于组织的名称，类似Java的包名；\n- artifactId：该jar包自身的名称，类似Java的类名；\n- version：该jar包的版本。\n\n通过上述3个变量，即可唯一确定某个jar包。Maven通过对jar包进行PGP签名确保任何一个jar包一经发布就无法修改。修改已发布jar包的唯一方法是发布一个新版本。\n\n因此，某个jar包一旦被Maven下载过，即可永久地安全缓存在本地。\n\n注：只有以`-SNAPSHOT`结尾的版本号会被Maven视为开发版本，开发版本每次都会重复下载，这种SNAPSHOT版本只能用于内部私有的Maven repo，公开发布的版本不允许出现SNAPSHOT。\n\n### Maven镜像\n\n除了可以从Maven的中央仓库下载外，还可以从Maven的镜像仓库下载。如果访问Maven的中央仓库非常慢，我们可以选择一个速度较快的Maven的镜像仓库。Maven镜像仓库定期从中央仓库同步：\n\n```\n           slow    ┌───────────────────┐\n    ┌─────────────>│Maven Central Repo.│\n    │              └───────────────────┘\n    │                        │\n    │                        │sync\n    │                        ▼\n┌───────┐  fast    ┌───────────────────┐\n│ User  │─────────>│Maven Mirror Repo. │\n└───────┘          └───────────────────┘\n\n```\n\n中国区用户可以使用阿里云提供的Maven镜像仓库。使用Maven镜像仓库需要一个配置，在用户主目录下进入`.m2`目录，创建一个`settings.xml`配置文件，内容如下：\n\n```\n<settings>\n    <mirrors>\n        <mirror>\n            <id>aliyun</id>\n            <name>aliyun</name>\n            <mirrorOf>central</mirrorOf>\n<!-- 国内推荐阿里云的Maven镜像 --><url>https://maven.aliyun.com/repository/central</url>\n        </mirror>\n    </mirrors>\n</settings>\n\n```\n\n配置镜像仓库后，Maven的下载速度就会非常快。\n\n### 搜索第三方组件\n\n最后一个问题：如果我们要引用一个第三方组件，比如`okhttp`，如何确切地获得它的`groupId`、`artifactId`和`version`？方法是通过[search.maven.org](https://search.maven.org/)搜索关键字，找到对应的组件后，直接复制：\n\n[https://www.liaoxuefeng.com/files/attachments/1322179230695490/l](https://www.liaoxuefeng.com/files/attachments/1322179230695490/l)\n\n### 命令行编译\n\n在命令中，进入到`pom.xml`所在目录，输入以下命令：\n\n```\n$ mvn clean package\n```\n\n## 构建流程:\n\n### 构建流程\n\nMaven不但有标准化的项目结构，而且还有一套标准化的构建流程，可以自动化实现编译，打包，发布，等等。\n\n### Lifecycle和Phase\n\n使用Maven时，我们首先要了解什么是Maven的生命周期（lifecycle）。\n\nMaven的生命周期由一系列阶段（phase）构成，以内置的生命周期`default`为例，它包含以下phase：\n\n- validate\n- initialize\n- generate-sources\n- process-sources\n- generate-resources\n- process-resources\n- compile\n- process-classes\n- generate-test-sources\n- process-test-sources\n- generate-test-resources\n- process-test-resources\n- test-compile\n- process-test-classes\n- test\n- prepare-package\n- package\n- pre-integration-test\n- integration-test\n- post-integration-test\n- verify\n- install\n- deploy\n\n如果我们运行`mvn package`，Maven就会执行`default`生命周期，它会从开始一直运行到`package`这个phase为止：\n\n- validate\n- ...\n- package\n\n如果我们运行`mvn compile`，Maven也会执行`default`生命周期，但这次它只会运行到`compile`，即以下几个phase：\n\n- validate\n- ...\n- compile\n\nMaven另一个常用的生命周期是`clean`，它会执行3个phase：\n\n- pre-clean\n- clean （注意这个clean不是lifecycle而是phase）\n- post-clean\n\n所以，我们使用`mvn`这个命令时，后面的参数是phase，Maven自动根据生命周期运行到指定的phase。\n\n更复杂的例子是指定多个phase，例如，运行`mvn clean package`，Maven先执行`clean`生命周期并运行到`clean`这个phase，然后执行`default`生命周期并运行到`package`这个phase，实际执行的phase如下：\n\n- pre-clean\n- clean （注意这个clean是phase）\n- validate\n- ...\n- package\n\n在实际开发过程中，经常使用的命令有：\n\n`mvn clean`：清理所有生成的class和jar；\n\n`mvn clean compile`：先清理，再执行到`compile`；\n\n`mvn clean test`：先清理，再执行到`test`，因为执行`test`前必须执行`compile`，所以这里不必指定`compile`；\n\n`mvn clean package`：先清理，再执行到`package`。\n\n大多数phase在执行过程中，因为我们通常没有在`pom.xml`中配置相关的设置，所以这些phase什么事情都不做。\n\n经常用到的phase其实只有几个：\n\n- clean：清理\n- compile：编译\n- test：运行测试\n- package：打包\n\n### Goal\n\n执行一个phase又会触发一个或多个goal：\n\n[Untitled](https://www.notion.so/a20188a3e0174e87a895099f07ad5bf6)\n\ngoal的命名总是`abc:xyz`这种形式。\n\n看到这里，相信大家对lifecycle、phase和goal已经明白了吧？\n\n## 使用插件:\n\n我们在前面介绍了Maven的lifecycle，phase和goal：使用Maven构建项目就是执行lifecycle，执行到指定的phase为止。每个phase会执行自己默认的一个或多个goal。goal是最小任务单元。\n\n我们以`compile`这个phase为例，如果执行：\n\n```\nmvn compile\n\n```\n\nMaven将执行`compile`这个phase，这个phase会调用`compiler`插件执行关联的`compiler:compile`这个goal。\n\n实际上，执行每个phase，都是通过某个插件（plugin）来执行的，Maven本身其实并不知道如何执行`compile`，它只是负责找到对应的`compiler`插件，然后执行默认的`compiler:compile`这个goal来完成编译。\n\n所以，使用Maven，实际上就是配置好需要使用的插件，然后通过phase调用它们。\n\nMaven已经内置了一些常用的标准插件：\n\n[Untitled](https://www.notion.so/885e77e11f2d4d69af41315dd443f44f)\n\n如果标准插件无法满足需求，我们还可以使用自定义插件。使用自定义插件的时候，需要声明。例如，使用`maven-shade-plugin`可以创建一个可执行的jar，要使用这个插件，需要在`pom.xml`中声明它：\n\n```\n<project>\n    ...\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-shade-plugin</artifactId>\n                <version>3.2.1</version>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<phase>package</phase>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>shade</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<configuration>\n                            ...\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n</project>\n\n```\n\n自定义插件往往需要一些配置，例如，`maven-shade-plugin`需要指定Java程序的入口，它的配置是：\n\n```\n<configuration>\n    <transformers>\n        <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n            <mainClass>com.itranswarp.learnjava.Main</mainClass>\n        </transformer>\n    </transformers>\n</configuration>\n\n```\n\n注意，Maven自带的标准插件例如`compiler`是无需声明的，只有引入其它的插件才需要声明。\n\n下面列举了一些常用的插件：\n\n- maven-shade-plugin：打包所有依赖包并生成可执行jar；\n- cobertura-maven-plugin：生成单元测试覆盖率报告；\n- findbugs-maven-plugin：对Java源码进行静态分析以找出潜在问题。\n\n## 模块管理:\n\n在软件开发中，把一个大项目分拆为多个模块是降低软件复杂度的有效方法：\n\n```\n                        ┌ ─ ─ ─ ─ ─ ─ ┐\n                          ┌─────────┐\n                        │ │Module A │ │\n                          └─────────┘\n┌──────────────┐ split  │ ┌─────────┐ │\n│Single Project│───────>  │Module B │\n└──────────────┘        │ └─────────┘ │\n                          ┌─────────┐\n                        │ │Module C │ │\n                          └─────────┘\n                        └ ─ ─ ─ ─ ─ ─ ┘\n\n```\n\n对于Maven工程来说，原来是一个大项目：\n\n```\nsingle-project\n├── pom.xml\n└── src\n\n```\n\n现在可以分拆成3个模块：\n\n```\nmutiple-project\n├── module-a\n│   ├── pom.xml\n│   └── src\n├── module-b\n│   ├── pom.xml\n│   └── src\n└── module-c\n    ├── pom.xml\n    └── src\n\n```\n\nMaven可以有效地管理多个模块，我们只需要把每个模块当作一个独立的Maven项目，它们有各自独立的`pom.xml`。例如，模块A的`pom.xml`：\n\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.itranswarp.learnjava</groupId>\n    <artifactId>module-a</artifactId>\n    <version>1.0</version>\n    <packaging>jar</packaging>\n\n    <name>module-a</name>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <maven.compiler.source>11</maven.compiler.source>\n        <maven.compiler.target>11</maven.compiler.target>\n        <java.version>11</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>1.7.28</version>\n        </dependency>\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>1.2.3</version>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-engine</artifactId>\n            <version>5.5.2</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n</project>\n\n```\n\n模块B的`pom.xml`：\n\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.itranswarp.learnjava</groupId>\n    <artifactId>module-b</artifactId>\n    <version>1.0</version>\n    <packaging>jar</packaging>\n\n    <name>module-b</name>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <maven.compiler.source>11</maven.compiler.source>\n        <maven.compiler.target>11</maven.compiler.target>\n        <java.version>11</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>1.7.28</version>\n        </dependency>\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>1.2.3</version>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-engine</artifactId>\n            <version>5.5.2</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n</project>\n\n```\n\n可以看出来，模块A和模块B的`pom.xml`高度相似，因此，我们可以提取出共同部分作为`parent`：\n\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.itranswarp.learnjava</groupId>\n    <artifactId>parent</artifactId>\n    <version>1.0</version>\n    <packaging>pom</packaging>\n\n    <name>parent</name>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <maven.compiler.source>11</maven.compiler.source>\n        <maven.compiler.target>11</maven.compiler.target>\n        <java.version>11</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>1.7.28</version>\n        </dependency>\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>1.2.3</version>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-engine</artifactId>\n            <version>5.5.2</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n</project>\n\n```\n\n注意到parent的`<packaging>`是`pom`而不是`jar`，因为`parent`本身不含任何Java代码。编写`parent`的`pom.xml`只是为了在各个模块中减少重复的配置。现在我们的整个工程结构如下：\n\n```\nmultiple-project\n├── pom.xml\n├── parent\n│   └── pom.xml\n├── module-a\n│   ├── pom.xml\n│   └── src\n├── module-b\n│   ├── pom.xml\n│   └── src\n└── module-c\n    ├── pom.xml\n    └── src\n\n```\n\n这样模块A就可以简化为：\n\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <parent>\n        <groupId>com.itranswarp.learnjava</groupId>\n        <artifactId>parent</artifactId>\n        <version>1.0</version>\n        <relativePath>../parent/pom.xml</relativePath>\n    </parent>\n\n    <artifactId>module-a</artifactId>\n    <packaging>jar</packaging>\n    <name>module-a</name>\n</project>\n\n```\n\n模块B、模块C都可以直接从`parent`继承，大幅简化了`pom.xml`的编写。\n\n如果模块A依赖模块B，则模块A需要模块B的jar包才能正常编译，我们需要在模块A中引入模块B：\n\n```\n    ...\n    <dependencies>\n        <dependency>\n            <groupId>com.itranswarp.learnjava</groupId>\n            <artifactId>module-b</artifactId>\n            <version>1.0</version>\n        </dependency>\n    </dependencies>\n\n```\n\n最后，在编译的时候，需要在根目录创建一个`pom.xml`统一编译：\n\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.itranswarp.learnjava</groupId>\n    <artifactId>build</artifactId>\n    <version>1.0</version>\n    <packaging>pom</packaging>\n    <name>build</name>\n\n    <modules>\n        <module>parent</module>\n        <module>module-a</module>\n        <module>module-b</module>\n        <module>module-c</module>\n    </modules>\n</project>\n\n```\n\n这样，在根目录执行`mvn clean package`时，Maven根据根目录的`pom.xml`找到包括`parent`在内的共4个`<module>`，一次性全部编译。\n\n### 中央仓库\n\n其实我们使用的大多数第三方模块都是这个用法，例如，我们使用commons logging、log4j这些第三方模块，就是第三方模块的开发者自己把编译好的jar包发布到Maven的中央仓库中。\n\n### 私有仓库\n\n私有仓库是指公司内部如果不希望把源码和jar包放到公网上，那么可以搭建私有仓库。私有仓库总是在公司内部使用，它只需要在本地的`~/.m2/settings.xml`中配置好，使用方式和中央仓位没有任何区别。\n\n### 本地仓库\n\n本地仓库是指把本地开发的项目“发布”在本地，这样其他项目可以通过本地仓库引用它。但是我们不推荐把自己的模块安装到Maven的本地仓库，因为每次修改某个模块的源码，都需要重新安装，非常容易出现版本不一致的情况。更好的方法是使用模块化编译，在编译的时候，告诉Maven几个模块之间存在依赖关系，需要一块编译，Maven就会自动按依赖顺序编译这些模块。\n\n## 使用mvnw:\n\n我们使用Maven时，基本上只会用到`mvn`这一个命令。有些童鞋可能听说过`mvnw`，这个是啥？\n\n`mvnw`是Maven Wrapper的缩写。因为我们安装Maven时，默认情况下，系统所有项目都会使用全局安装的这个Maven版本。但是，对于某些项目来说，它可能必须使用某个特定的Maven版本，这个时候，就可以使用Maven Wrapper，它可以负责给这个特定的项目安装指定版本的Maven，而其他项目不受影响。\n\n简单地说，Maven Wrapper就是给一个项目提供一个独立的，指定版本的Maven给它使用。\n\n### 安装Maven Wrapper\n\n安装Maven Wrapper最简单的方式是在项目的根目录（即`pom.xml`所在的目录）下运行安装命令：\n\n```\nmvn -N io.takari:maven:0.7.6:wrapper\n\n```\n\n它会自动使用最新版本的Maven。注意`0.7.6`是Maven Wrapper的版本。最新的Maven Wrapper版本可以去[官方网站](https://github.com/takari/maven-wrapper)查看。\n\n如果要指定使用的Maven版本，使用下面的安装命令指定版本，例如`3.3.3`：\n\n```\nmvn -N io.takari:maven:0.7.6:wrapper -Dmaven=3.3.3\n```\n\n安装后，查看项目结构：\n\n```\nmy-project\n├── .mvn\n│   └── wrapper\n│       ├── MavenWrapperDownloader.java\n│       ├── maven-wrapper.jar\n│       └── maven-wrapper.properties\n├── mvnw\n├── mvnw.cmd\n├── pom.xml\n└── src\n    ├── main\n    │   ├── java\n    │   └── resources\n    └── test\n        ├── java\n        └── resources\n\n```\n\n发现多了`mvnw`、`mvnw.cmd`和`.mvn`目录，我们只需要把`mvn`命令改成`mvnw`就可以使用跟项目关联的Maven。例如：\n\n```\nmvnw cleanpackage\n```\n\n在Linux或macOS下运行时需要加上`./`：\n\n```\n./mvnw cleanpackage\n```\n\nMaven Wrapper的另一个作用是把项目的`mvnw`、`mvnw.cmd`和`.mvn`提交到版本库中，可以使所有开发人员使用统一的Maven版本。\n\n## 发布Artifact:\n\n当我们使用`commons-logging`这些第三方开源库的时候，我们实际上是通过Maven自动下载它的jar包，并根据其`pom.xml`解析依赖，自动把相关依赖包都下载后加入到classpath。\n\n那么问题来了：当我们自己写了一个牛逼的开源库时，非常希望别人也能使用，总不能直接放个jar包的链接让别人下载吧？\n\n如果我们把自己的开源库放到Maven的repo中，那么，别人只需按标准引用`groupId:artifactId:version`，即可自动下载jar包以及相关依赖。因此，本节我们介绍如何发布一个库到Maven的repo中。\n\n把自己的库发布到Maven的repo中有好几种方法，我们介绍3种最常用的方法。\n\n### 以静态文件发布\n\n如果我们观察一个中央仓库的Artifact结构，例如[Commons Math](https://commons.apache.org/proper/commons-math/)，它的groupId是`org.apache.commons`，artifactId是`commons-math3`，以版本`3.6.1`为例，发布在中央仓库的文件夹路径就是[https://repo1.maven.org/maven2/org/apache/commons/commons-math3/3.6.1/](https://repo1.maven.org/maven2/org/apache/commons/commons-math3/3.6.1/)，在此文件夹下，`commons-math3-3.6.1.jar`就是发布的jar包，`commons-math3-3.6.1.pom`就是它的`pom.xml`描述文件，`commons-math3-3.6.1-sources.jar`是源代码，`commons-math3-3.6.1-javadoc.jar`是文档。其它以`.asc`、`.md5`、`.sha1`结尾的文件分别是GPG签名、MD5摘要和SHA-1摘要。\n\n我们只要按照这种目录结构组织文件，它就是一个有效的Maven仓库。\n\n我们以广受好评的开源项目[how-to-become-rich](https://github.com/michaelliao/how-to-become-rich)为例，先创建Maven工程目录结构如下：\n\n```\nhow-to-become-rich\n├── maven-repo        <-- Maven本地文件仓库\n├── pom.xml           <-- 项目文件\n├── src\n│   ├── main\n│   │   ├── java      <-- 源码目录\n│   │   └── resources <-- 资源目录\n│   └── test\n│       ├── java      <-- 测试源码目录\n│       └── resources <-- 测试资源目录\n└── target            <-- 编译输出目录\n\n```\n\n在`pom.xml`中添加如下内容：\n\n```\n<project ...>\n    ...\n    <distributionManagement>\n        <repository>\n            <id>local-repo-release</id>\n            <name>GitHub Release</name>\n            <url>file://${project.basedir}/maven-repo</url>\n        </repository>\n    </distributionManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <artifactId>maven-source-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>attach-sources</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>jar-no-fork</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>attach-javadocs</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>jar</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n\n```\n\n注意到`<distributionManagement>`，它指示了发布的软件包的位置，这里的`<url>`是项目根目录下的`maven-repo`目录，在`<build>`中定义的两个插件`maven-source-plugin`和`maven-javadoc-plugin`分别用来创建源码和javadoc，如果不想发布源码，可以把对应的插件去掉。\n\n我们直接在项目根目录下运行Maven命令`mvn clean package deploy`，如果一切顺利，我们就可以在`maven-repo`目录下找到部署后的所有文件如下：\n\n```\nmaven-repo\n└── com\n    └── itranswarp\n        └── rich\n            └── how-to-become-rich\n                ├── 1.0.0\n                │   ├── how-to-become-rich-1.0.0-javadoc.jar\n                │   ├── how-to-become-rich-1.0.0-javadoc.jar.md5\n                │   ├── how-to-become-rich-1.0.0-javadoc.jar.sha1\n                │   ├── how-to-become-rich-1.0.0-sources.jar\n                │   ├── how-to-become-rich-1.0.0-sources.jar.md5\n                │   ├── how-to-become-rich-1.0.0-sources.jar.sha1\n                │   ├── how-to-become-rich-1.0.0.jar\n                │   ├── how-to-become-rich-1.0.0.jar.md5\n                │   ├── how-to-become-rich-1.0.0.jar.sha1\n                │   ├── how-to-become-rich-1.0.0.pom\n                │   ├── how-to-become-rich-1.0.0.pom.md5\n                │   └── how-to-become-rich-1.0.0.pom.sha1\n                ├── maven-metadata.xml\n                ├── maven-metadata.xml.md5\n                └── maven-metadata.xml.sha1\n\n```\n\n最后一步，是把这个工程推到GitHub上，并选择`Settings`-`GitHub Pages`，选择`master branch`启用Pages服务：\n\n![learn-maven%20eb9d5ffa7bae4b5bb1e0874b7f871af4/Untitled.png](learn-maven%20eb9d5ffa7bae4b5bb1e0874b7f871af4/Untitled.png)\n\n这样，把全部内容推送至GitHub后，即可作为静态网站访问Maven的repo，它的地址是[https://michaelliao.github.io/how-to-become-rich/maven-repo/](https://michaelliao.github.io/how-to-become-rich/maven-repo/)。版本`1.0.0`对应的jar包地址是：\n\n```\nhttps://michaelliao.github.io/how-to-become-rich/maven-repo/com/itranswarp/rich/how-to-become-rich/1.0.0/how-to-become-rich-1.0.0.jar\n\n```\n\n现在，如果其他人希望引用这个Maven包，我们可以告知如下依赖即可：\n\n```\n<dependency>\n    <groupId>com.itranswarp.rich</groupId>\n    <artifactId>how-to-become-rich</artifactId>\n    <version>1.0.0</version>\n</dependency>\n\n```\n\n但是，除了正常导入依赖外，对方还需要再添加一个`<repository>`的声明，即使用方完整的`pom.xml`如下：\n\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>example</groupId>\n    <artifactId>how-to-become-rich-usage</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <properties>\n        <maven.compiler.source>11</maven.compiler.source>\n        <maven.compiler.target>11</maven.compiler.target>\n        <java.version>11</java.version>\n    </properties>\n\n    <repositories>\n        <repository>\n            <id>github-rich-repo</id>\n            <name>The Maven Repository on Github</name>\n            <url>https://michaelliao.github.io/how-to-become-rich/maven-repo/</url>\n        </repository>\n    </repositories>\n\n    <dependencies>\n        <dependency>\n            <groupId>com.itranswarp.rich</groupId>\n            <artifactId>how-to-become-rich</artifactId>\n            <version>1.0.0</version>\n        </dependency>\n    </dependencies>\n</project>\n\n```\n\n在`<repository>`中，我们必须声明发布的Maven的repo地址，其中`<id>`和`<name>`可以任意填写，`<url>`填入GitHub Pages提供的地址+`/maven-repo/`后缀。现在，即可正常引用这个库并编写代码如下：\n\n```\nMillionaire millionaire =new Millionaire();\nSystem.out.println(millionaire.howToBecomeRich());\n\n```\n\n有的童鞋会问，为什么使用`commons-logging`等第三方库时，并不需要声明repo地址？这是因为这些库都是发布到Maven中央仓库的，发布到中央仓库后，不需要告诉Maven仓库地址，因为它知道中央仓库的地址默认是[https://repo1.maven.org/maven2/](https://repo1.maven.org/maven2/)，也可以通过`~/.m2/settings.xml`指定一个代理仓库地址以替代中央仓库来提高速度（参考[依赖管理](https://www.liaoxuefeng.com/wiki/1252599548343744/1309301178105890)的Maven镜像）。\n\n因为GitHub Pages并不会把我们发布的Maven包同步到中央仓库，所以自然使用方必须手动添加一个我们提供的仓库地址。\n\n此外，通过GitHub Pages发布Maven repo时需要注意一点，即不要改动已发布的版本。因为Maven的仓库是不允许修改任何版本的，对一个库进行修改的唯一方法是发布一个新版本。但是通过静态文件的方式发布repo，实际上我们是可以修改jar文件的，但最好遵守规范，不要修改已发布版本。\n\n### 通过Nexus发布到中央仓库\n\n有的童鞋会问，能不能把自己的开源库发布到Maven的中央仓库，这样用户就不需要声明repo地址，可以直接引用，显得更专业。\n\n当然可以，但我们不能直接发布到Maven中央仓库，而是通过曲线救国的方式，发布到[central.sonatype.org](https://central.sonatype.org/)，它会定期自动同步到Maven的中央仓库。[Nexus](https://www.sonatype.com/nexus-repository-oss)是一个支持Maven仓库的软件，由Sonatype开发，有免费版和专业版两个版本，很多大公司内部都使用Nexus作为自己的私有Maven仓库，而这个[central.sonatype.org](https://central.sonatype.org/)相当于面向开源的一个Nexus公共服务。\n\n所以，第一步是在[central.sonatype.org](https://central.sonatype.org/)上注册一个账号，注册链接非常隐蔽，可以自己先找找，找半小时没找到点这里查看攻略。\n\n如果注册顺利并审核通过，会得到一个登录账号，然后，通过[这个页面](https://central.sonatype.org/pages/apache-maven.html)一步一步操作就可以成功地将自己的Artifact发布到Nexus上，再耐心等待几个小时后，你的Artifact就会出现在Maven的中央仓库中。\n\n这里简单提一下发布重点与难点：\n\n- 必须正确创建GPG签名，Linux和Mac下推荐使用gnupg2；\n- 必须在`~/.m2/settings.xml`中配置好登录用户名和口令，以及GPG口令：\n\n```\n<settings ...>\n    ...\n    <servers>\n        <server>\n            <id>ossrh</id>\n            <username>OSSRH-USERNAME</username>\n            <password>OSSRH-PASSWORD</password>\n        </server>\n    </servers>\n    <profiles>\n        <profile>\n            <id>ossrh</id>\n            <activation>\n                <activeByDefault>true</activeByDefault>\n            </activation>\n            <properties>\n                <gpg.executable>gpg2</gpg.executable>\n                <gpg.passphrase>GPG-PASSWORD</gpg.passphrase>\n            </properties>\n        </profile>\n    </profiles>\n</settings>\n\n```\n\n在待发布的Artifact的`pom.xml`中添加OSS的Maven repo地址，以及`maven-jar-plugin`、`maven-source-plugin`、`maven-javadoc-plugin`、`maven-gpg-plugin`、`nexus-staging-maven-plugin`：\n\n```\n<project ...>\n    ...\n    <distributionManagement>\n        <snapshotRepository>\n            <id>ossrh</id>\n            <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n        </snapshotRepository>\n\n        <repository>\n            <id>ossrh</id>\n            <name>Nexus Release Repository</name>\n            <url>http://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n        </repository>\n    </distributionManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>jar</goal>\n                            <goal>test-jar</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-source-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>attach-sources</id>\n                        <goals>\n                            <goal>jar-no-fork</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>attach-javadocs</id>\n                        <goals>\n                            <goal>jar</goal>\n                        </goals>\n                        <configuration>\n                            <additionalOption>\n                                <additionalOption>-Xdoclint:none</additionalOption>\n                            </additionalOption>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-gpg-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>sign-artifacts</id>\n                        <phase>verify</phase>\n                        <goals>\n                            <goal>sign</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.sonatype.plugins</groupId>\n                <artifactId>nexus-staging-maven-plugin</artifactId>\n                <version>1.6.3</version>\n                <extensions>true</extensions>\n                <configuration>\n                    <serverId>ossrh</serverId>\n                    <nexusUrl>https://oss.sonatype.org/</nexusUrl>\n                    <autoReleaseAfterClose>true</autoReleaseAfterClose>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n\n```\n\n最后执行命令`mvn clean package deploy`即可发布至[central.sonatype.org](https://central.sonatype.org/)。\n\n此方法前期需要复杂的申请账号和项目的流程，后期需要安装调试GPG，但只要跑通流程，后续发布都只需要一行命令。\n\n### 发布到私有仓库\n\n通过`nexus-staging-maven-plugin`除了可以发布到[central.sonatype.org](https://central.sonatype.org/)外，也可以发布到私有仓库，例如，公司内部自己搭建的Nexus服务器。\n\n如果没有私有Nexus服务器，还可以发布到[GitHub Packages](https://github.com/features/packages)。GitHub Packages是GitHub提供的仓库服务，支持Maven、NPM、Docker等。使用GitHub Packages时，无论是发布Artifact，还是引用已发布的Artifact，都需要明确的授权Token，因此，GitHub Packages只能作为私有仓库使用。\n\n在发布前，我们必须首先登录后在用户的`Settings`-`Developer settings`-`Personal access tokens`中创建两个Token，一个用于发布，一个用于使用。发布Artifact的Token必须有`repo`、`write:packages`和`read:packages`权限：\n\n[https://www.liaoxuefeng.com/files/attachments/1347999282233410/l](https://www.liaoxuefeng.com/files/attachments/1347999282233410/l)\n\n使用Artifact的Token只需要`read:packages`权限。\n\n在发布端，把GitHub的用户名和发布Token写入`~/.m2/settings.xml`配置中：\n\n```\n<settings ...>\n    ...\n    <servers>\n        <server>\n            <id>github-release</id>\n            <username>GITHUB-USERNAME</username>\n            <password>f052...c21f</password>\n        </server>\n    </servers>\n</settings>\n\n```\n\n然后，在需要发布的Artifact的`pom.xml`中，添加一个`<repository>`声明：\n\n```\n<project ...>\n    ...\n    <distributionManagement>\n        <repository>\n            <id>github-release</id>\n            <name>GitHub Release</name>\n            <url>https://maven.pkg.github.com/michaelliao/complex</url>\n        </repository>\n    </distributionManagement>\n</project>\n\n```\n\n注意到`<id>`和`~/.m2/settings.xml`配置中的`<id>`要保持一致，因为发布时Maven根据id找到用于登录的用户名和Token，才能成功上传文件到GitHub。我们直接通过命令`mvn clean package deploy`部署，成功后，在GitHub用户页面可以看到该Artifact：\n\n[https://www.liaoxuefeng.com/files/attachments/1348000710393922/l](https://www.liaoxuefeng.com/files/attachments/1348000710393922/l)\n\n完整的配置请参考[complex](https://github.com/michaelliao/complex/)项目，这是一个非常简单的支持复数运算的库。\n\n使用该Artifact时，因为GitHub的Package只能作为私有仓库使用，所以除了在使用方的`pom.xml`中声明`<repository>`外：\n\n```\n<project ...>\n    ...\n    <repositories>\n        <repository>\n            <id>github-release</id>\n            <name>GitHub Release</name>\n            <url>https://maven.pkg.github.com/michaelliao/complex</url>\n        </repository>\n    </repositories>\n\n    <dependencies>\n        <dependency>\n            <groupId>com.itranswarp</groupId>\n            <artifactId>complex</artifactId>\n            <version>1.0.0</version>\n        </dependency>\n    </dependencies>\n    ...\n</project>\n\n```\n\n还需要把有读权限的Token配置到`~/.m2/settings.xml`文件中。","slug":"Maven学习笔记","published":1,"updated":"2021-08-14T06:26:29.810Z","layout":"post","photos":[],"link":"","_id":"cksbelm9r000c5ouch6hqdsib","content":"<h2 id=\"Maven介绍\"><a href=\"#Maven介绍\" class=\"headerlink\" title=\"Maven介绍:\"></a>Maven介绍:</h2><p>Maven就是是专门为Java项目打造的管理和构建工具，它的主要功能有：</p>\n<ul>\n<li>提供了一套标准化的项目结构；</li>\n<li>提供了一套标准化的构建流程（编译，测试，打包，发布……）；</li>\n<li>提供了一套依赖管理机制。</li>\n</ul>\n<h3 id=\"Maven项目结构\"><a href=\"#Maven项目结构\" class=\"headerlink\" title=\"Maven项目结构\"></a>Maven项目结构</h3><p>一个使用Maven管理的普通的Java项目，它的目录结构默认如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a-maven-project</span><br><span class=\"line\">├── pom.xml</span><br><span class=\"line\">├── src</span><br><span class=\"line\">│   ├── main</span><br><span class=\"line\">│   │   ├── java</span><br><span class=\"line\">│   │   └── resources</span><br><span class=\"line\">│   └── test</span><br><span class=\"line\">│       ├── java</span><br><span class=\"line\">│       └── resources</span><br><span class=\"line\">└── target</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>项目的根目录<code>a-maven-project</code>是项目名，它有一个项目描述文件<code>pom.xml</code>，存放Java源码的目录是<code>src/main/java</code>，存放资源文件的目录是<code>src/main/resources</code>，存放测试源码的目录是<code>src/test/java</code>，存放测试资源的目录是<code>src/test/resources</code>，最后，所有编译、打包生成的文件都放在<code>target</code>目录里。这些就是一个Maven项目的标准目录结构。</p>\n<p>所有的目录结构都是约定好的标准结构，我们千万不要随意修改目录结构。使用标准结构不需要做任何配置，Maven就可以正常使用。</p>\n<p>我们再来看最关键的一个项目描述文件<code>pom.xml</code>，它的内容长得像下面：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project ...&gt;</span><br><span class=\"line\">\t&lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.itranswarp.learnjava&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;hello&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">\t&lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class=\"line\">\t&lt;properties&gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">\t&lt;&#x2F;properties&gt;</span><br><span class=\"line\">\t&lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;commons-logging&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;commons-logging&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.2&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">\t&lt;&#x2F;dependencies&gt;</span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>其中，<code>groupId</code>类似于Java的包名，通常是公司或组织名称，<code>artifactId</code>类似于Java的类名，通常是项目名称，再加上<code>version</code>，一个Maven工程就是由<code>groupId</code>，<code>artifactId</code>和<code>version</code>作为唯一标识。我们在引用其他第三方库的时候，也是通过这3个变量确定。例如，依赖<code>commons-logging</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;commons-logging&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;commons-logging&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>使用<code>&lt;dependency&gt;</code>声明一个依赖后，Maven就会自动下载这个依赖包并把它放到classpath中。</p>\n<h3 id=\"安装Maven\"><a href=\"#安装Maven\" class=\"headerlink\" title=\"安装Maven\"></a>安装Maven</h3><p>要安装Maven，可以从<a href=\"https://maven.apache.org/\">Maven官网</a>下载最新的Maven 3.6.x，然后在本地解压，设置几个环境变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">M2_HOME&#x3D;&#x2F;path&#x2F;to&#x2F;maven-3.6.xPATH&#x3D;$PATH:$M2_HOME&#x2F;bin</span><br></pre></td></tr></table></figure>\n<h2 id=\"依赖管理\"><a href=\"#依赖管理\" class=\"headerlink\" title=\"依赖管理:\"></a>依赖管理:</h2><p>如果我们的项目依赖第三方的jar包，例如commons logging，那么问题来了：commons logging发布的jar包在哪下载？</p>\n<p>如果我们还希望依赖log4j，那么使用log4j需要哪些jar包？</p>\n<p>类似的依赖还包括：JUnit，JavaMail，MySQL驱动等等，一个可行的方法是通过搜索引擎搜索到项目的官网，然后手动下载zip包，解压，放入classpath。但是，这个过程非常繁琐。</p>\n<p>Maven解决了依赖管理问题。例如，我们的项目依赖<code>abc</code>这个jar包，而<code>abc</code>又依赖<code>xyz</code>这个jar包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┌──────────────┐</span><br><span class=\"line\">│Sample Project│</span><br><span class=\"line\">└──────────────┘</span><br><span class=\"line\">        │</span><br><span class=\"line\">        ▼</span><br><span class=\"line\">┌──────────────┐</span><br><span class=\"line\">│     abc      │</span><br><span class=\"line\">└──────────────┘</span><br><span class=\"line\">        │</span><br><span class=\"line\">        ▼</span><br><span class=\"line\">┌──────────────┐</span><br><span class=\"line\">│     xyz      │</span><br><span class=\"line\">└──────────────┘</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>当我们声明了<code>abc</code>的依赖时，Maven自动把<code>abc</code>和<code>xyz</code>都加入了我们的项目依赖，不需要我们自己去研究<code>abc</code>是否需要依赖<code>xyz</code>。</p>\n<p>因此，Maven的第一个作用就是解决依赖管理。我们声明了自己的项目需要<code>abc</code>，Maven会自动导入<code>abc</code>的jar包，再判断出<code>abc</code>需要<code>xyz</code>，又会自动导入<code>xyz</code>的jar包，这样，最终我们的项目会依赖<code>abc</code>和<code>xyz</code>两个jar包。</p>\n<p>我们来看一个复杂依赖示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.4.2.RELEASE&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>当我们声明一个<code>spring-boot-starter-web</code>依赖时，Maven会自动解析并判断最终需要大概二三十个其他依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring-boot-starter-web</span><br><span class=\"line\">  spring-boot-starter</span><br><span class=\"line\">    spring-boot</span><br><span class=\"line\">    sprint-boot-autoconfigure</span><br><span class=\"line\">    spring-boot-starter-logging</span><br><span class=\"line\">      logback-classic</span><br><span class=\"line\">        logback-core</span><br><span class=\"line\">        slf4j-api</span><br><span class=\"line\">      jcl-over-slf4j</span><br><span class=\"line\">        slf4j-api</span><br><span class=\"line\">      jul-to-slf4j</span><br><span class=\"line\">        slf4j-api</span><br><span class=\"line\">      log4j-over-slf4j</span><br><span class=\"line\">        slf4j-api</span><br><span class=\"line\">    spring-core</span><br><span class=\"line\">    snakeyaml</span><br><span class=\"line\">  spring-boot-starter-tomcat</span><br><span class=\"line\">    tomcat-embed-core</span><br><span class=\"line\">    tomcat-embed-el</span><br><span class=\"line\">    tomcat-embed-websocket</span><br><span class=\"line\">      tomcat-embed-core</span><br><span class=\"line\">  jackson-databind</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>如果我们自己去手动管理这些依赖是非常费时费力的，而且出错的概率很大。</p>\n<h3 id=\"依赖关系\"><a href=\"#依赖关系\" class=\"headerlink\" title=\"依赖关系:\"></a>依赖关系:</h3><p>Maven定义了几种依赖关系，分别是<code>compile</code>、<code>test</code>、<code>runtime</code>和<code>provided</code>：</p>\n<p><a href=\"https://www.notion.so/6247453f8f38404c9e697d1c7283ff04\">Untitled</a></p>\n<p>其中，默认的<code>compile</code>是最常用的，Maven会把这种类型的依赖直接放入classpath。</p>\n<p><code>test</code>依赖表示仅在测试时使用，正常运行时并不需要。最常用的<code>test</code>依赖就是JUnit：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.junit.jupiter&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;junit-jupiter-api&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;5.3.2&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>runtime</code>依赖表示编译时不需要，但运行时需要。最典型的<code>runtime</code>依赖是JDBC驱动，例如MySQL驱动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;5.1.48&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>provided</code>依赖表示编译时需要，但运行时不需要。最典型的<code>provided</code>依赖是Servlet API，编译的时候需要，但是运行时，Servlet服务器内置了相关的jar，所以运行期不需要：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;javax.servlet-api&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;4.0.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;scope&gt;provided&lt;&#x2F;scope&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>最后一个问题是，Maven如何知道从何处下载所需的依赖？也就是相关的jar包？答案是Maven维护了一个中央仓库（<a href=\"https://repo1.maven.org/\">repo1.maven.org</a>），所有第三方库将自身的jar以及相关信息上传至中央仓库，Maven就可以从中央仓库把所需依赖下载到本地。</p>\n<p>Maven并不会每次都从中央仓库下载jar包。一个jar包一旦被下载过，就会被Maven自动缓存在本地目录（用户主目录的<code>.m2</code>目录），所以，除了第一次编译时因为下载需要时间会比较慢，后续过程因为有本地缓存，并不会重复下载相同的jar包。</p>\n<h3 id=\"唯一ID\"><a href=\"#唯一ID\" class=\"headerlink\" title=\"唯一ID\"></a>唯一ID</h3><p>对于某个依赖，Maven只需要3个变量即可唯一确定某个jar包：</p>\n<ul>\n<li>groupId：属于组织的名称，类似Java的包名；</li>\n<li>artifactId：该jar包自身的名称，类似Java的类名；</li>\n<li>version：该jar包的版本。</li>\n</ul>\n<p>通过上述3个变量，即可唯一确定某个jar包。Maven通过对jar包进行PGP签名确保任何一个jar包一经发布就无法修改。修改已发布jar包的唯一方法是发布一个新版本。</p>\n<p>因此，某个jar包一旦被Maven下载过，即可永久地安全缓存在本地。</p>\n<p>注：只有以<code>-SNAPSHOT</code>结尾的版本号会被Maven视为开发版本，开发版本每次都会重复下载，这种SNAPSHOT版本只能用于内部私有的Maven repo，公开发布的版本不允许出现SNAPSHOT。</p>\n<h3 id=\"Maven镜像\"><a href=\"#Maven镜像\" class=\"headerlink\" title=\"Maven镜像\"></a>Maven镜像</h3><p>除了可以从Maven的中央仓库下载外，还可以从Maven的镜像仓库下载。如果访问Maven的中央仓库非常慢，我们可以选择一个速度较快的Maven的镜像仓库。Maven镜像仓库定期从中央仓库同步：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">           slow    ┌───────────────────┐</span><br><span class=\"line\">    ┌─────────────&gt;│Maven Central Repo.│</span><br><span class=\"line\">    │              └───────────────────┘</span><br><span class=\"line\">    │                        │</span><br><span class=\"line\">    │                        │sync</span><br><span class=\"line\">    │                        ▼</span><br><span class=\"line\">┌───────┐  fast    ┌───────────────────┐</span><br><span class=\"line\">│ User  │─────────&gt;│Maven Mirror Repo. │</span><br><span class=\"line\">└───────┘          └───────────────────┘</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>中国区用户可以使用阿里云提供的Maven镜像仓库。使用Maven镜像仓库需要一个配置，在用户主目录下进入<code>.m2</code>目录，创建一个<code>settings.xml</code>配置文件，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;settings&gt;</span><br><span class=\"line\">    &lt;mirrors&gt;</span><br><span class=\"line\">        &lt;mirror&gt;</span><br><span class=\"line\">            &lt;id&gt;aliyun&lt;&#x2F;id&gt;</span><br><span class=\"line\">            &lt;name&gt;aliyun&lt;&#x2F;name&gt;</span><br><span class=\"line\">            &lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;</span><br><span class=\"line\">&lt;!-- 国内推荐阿里云的Maven镜像 --&gt;&lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;central&lt;&#x2F;url&gt;</span><br><span class=\"line\">        &lt;&#x2F;mirror&gt;</span><br><span class=\"line\">    &lt;&#x2F;mirrors&gt;</span><br><span class=\"line\">&lt;&#x2F;settings&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>配置镜像仓库后，Maven的下载速度就会非常快。</p>\n<h3 id=\"搜索第三方组件\"><a href=\"#搜索第三方组件\" class=\"headerlink\" title=\"搜索第三方组件\"></a>搜索第三方组件</h3><p>最后一个问题：如果我们要引用一个第三方组件，比如<code>okhttp</code>，如何确切地获得它的<code>groupId</code>、<code>artifactId</code>和<code>version</code>？方法是通过<a href=\"https://search.maven.org/\">search.maven.org</a>搜索关键字，找到对应的组件后，直接复制：</p>\n<p><a href=\"https://www.liaoxuefeng.com/files/attachments/1322179230695490/l\">https://www.liaoxuefeng.com/files/attachments/1322179230695490/l</a></p>\n<h3 id=\"命令行编译\"><a href=\"#命令行编译\" class=\"headerlink\" title=\"命令行编译\"></a>命令行编译</h3><p>在命令中，进入到<code>pom.xml</code>所在目录，输入以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mvn clean package</span><br></pre></td></tr></table></figure>\n<h2 id=\"构建流程\"><a href=\"#构建流程\" class=\"headerlink\" title=\"构建流程:\"></a>构建流程:</h2><h3 id=\"构建流程-1\"><a href=\"#构建流程-1\" class=\"headerlink\" title=\"构建流程\"></a>构建流程</h3><p>Maven不但有标准化的项目结构，而且还有一套标准化的构建流程，可以自动化实现编译，打包，发布，等等。</p>\n<h3 id=\"Lifecycle和Phase\"><a href=\"#Lifecycle和Phase\" class=\"headerlink\" title=\"Lifecycle和Phase\"></a>Lifecycle和Phase</h3><p>使用Maven时，我们首先要了解什么是Maven的生命周期（lifecycle）。</p>\n<p>Maven的生命周期由一系列阶段（phase）构成，以内置的生命周期<code>default</code>为例，它包含以下phase：</p>\n<ul>\n<li>validate</li>\n<li>initialize</li>\n<li>generate-sources</li>\n<li>process-sources</li>\n<li>generate-resources</li>\n<li>process-resources</li>\n<li>compile</li>\n<li>process-classes</li>\n<li>generate-test-sources</li>\n<li>process-test-sources</li>\n<li>generate-test-resources</li>\n<li>process-test-resources</li>\n<li>test-compile</li>\n<li>process-test-classes</li>\n<li>test</li>\n<li>prepare-package</li>\n<li>package</li>\n<li>pre-integration-test</li>\n<li>integration-test</li>\n<li>post-integration-test</li>\n<li>verify</li>\n<li>install</li>\n<li>deploy</li>\n</ul>\n<p>如果我们运行<code>mvn package</code>，Maven就会执行<code>default</code>生命周期，它会从开始一直运行到<code>package</code>这个phase为止：</p>\n<ul>\n<li>validate</li>\n<li>…</li>\n<li>package</li>\n</ul>\n<p>如果我们运行<code>mvn compile</code>，Maven也会执行<code>default</code>生命周期，但这次它只会运行到<code>compile</code>，即以下几个phase：</p>\n<ul>\n<li>validate</li>\n<li>…</li>\n<li>compile</li>\n</ul>\n<p>Maven另一个常用的生命周期是<code>clean</code>，它会执行3个phase：</p>\n<ul>\n<li>pre-clean</li>\n<li>clean （注意这个clean不是lifecycle而是phase）</li>\n<li>post-clean</li>\n</ul>\n<p>所以，我们使用<code>mvn</code>这个命令时，后面的参数是phase，Maven自动根据生命周期运行到指定的phase。</p>\n<p>更复杂的例子是指定多个phase，例如，运行<code>mvn clean package</code>，Maven先执行<code>clean</code>生命周期并运行到<code>clean</code>这个phase，然后执行<code>default</code>生命周期并运行到<code>package</code>这个phase，实际执行的phase如下：</p>\n<ul>\n<li>pre-clean</li>\n<li>clean （注意这个clean是phase）</li>\n<li>validate</li>\n<li>…</li>\n<li>package</li>\n</ul>\n<p>在实际开发过程中，经常使用的命令有：</p>\n<p><code>mvn clean</code>：清理所有生成的class和jar；</p>\n<p><code>mvn clean compile</code>：先清理，再执行到<code>compile</code>；</p>\n<p><code>mvn clean test</code>：先清理，再执行到<code>test</code>，因为执行<code>test</code>前必须执行<code>compile</code>，所以这里不必指定<code>compile</code>；</p>\n<p><code>mvn clean package</code>：先清理，再执行到<code>package</code>。</p>\n<p>大多数phase在执行过程中，因为我们通常没有在<code>pom.xml</code>中配置相关的设置，所以这些phase什么事情都不做。</p>\n<p>经常用到的phase其实只有几个：</p>\n<ul>\n<li>clean：清理</li>\n<li>compile：编译</li>\n<li>test：运行测试</li>\n<li>package：打包</li>\n</ul>\n<h3 id=\"Goal\"><a href=\"#Goal\" class=\"headerlink\" title=\"Goal\"></a>Goal</h3><p>执行一个phase又会触发一个或多个goal：</p>\n<p><a href=\"https://www.notion.so/a20188a3e0174e87a895099f07ad5bf6\">Untitled</a></p>\n<p>goal的命名总是<code>abc:xyz</code>这种形式。</p>\n<p>看到这里，相信大家对lifecycle、phase和goal已经明白了吧？</p>\n<h2 id=\"使用插件\"><a href=\"#使用插件\" class=\"headerlink\" title=\"使用插件:\"></a>使用插件:</h2><p>我们在前面介绍了Maven的lifecycle，phase和goal：使用Maven构建项目就是执行lifecycle，执行到指定的phase为止。每个phase会执行自己默认的一个或多个goal。goal是最小任务单元。</p>\n<p>我们以<code>compile</code>这个phase为例，如果执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn compile</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Maven将执行<code>compile</code>这个phase，这个phase会调用<code>compiler</code>插件执行关联的<code>compiler:compile</code>这个goal。</p>\n<p>实际上，执行每个phase，都是通过某个插件（plugin）来执行的，Maven本身其实并不知道如何执行<code>compile</code>，它只是负责找到对应的<code>compiler</code>插件，然后执行默认的<code>compiler:compile</code>这个goal来完成编译。</p>\n<p>所以，使用Maven，实际上就是配置好需要使用的插件，然后通过phase调用它们。</p>\n<p>Maven已经内置了一些常用的标准插件：</p>\n<p><a href=\"https://www.notion.so/885e77e11f2d4d69af41315dd443f44f\">Untitled</a></p>\n<p>如果标准插件无法满足需求，我们还可以使用自定义插件。使用自定义插件的时候，需要声明。例如，使用<code>maven-shade-plugin</code>可以创建一个可执行的jar，要使用这个插件，需要在<code>pom.xml</code>中声明它：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">\t&lt;build&gt;</span><br><span class=\"line\">\t\t&lt;plugins&gt;</span><br><span class=\"line\">\t\t\t&lt;plugin&gt;</span><br><span class=\"line\">\t\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;artifactId&gt;maven-shade-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;3.2.1&lt;&#x2F;version&gt;</span><br><span class=\"line\">\t\t\t\t&lt;executions&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;execution&gt;</span><br><span class=\"line\">\t\t\t\t\t\t&lt;phase&gt;package&lt;&#x2F;phase&gt;</span><br><span class=\"line\">\t\t\t\t\t\t&lt;goals&gt;</span><br><span class=\"line\">\t\t\t\t\t\t\t&lt;goal&gt;shade&lt;&#x2F;goal&gt;</span><br><span class=\"line\">\t\t\t\t\t\t&lt;&#x2F;goals&gt;</span><br><span class=\"line\">\t\t\t\t\t\t&lt;configuration&gt;</span><br><span class=\"line\">                            ...</span><br><span class=\"line\">\t\t\t\t\t\t&lt;&#x2F;configuration&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;&#x2F;execution&gt;</span><br><span class=\"line\">\t\t\t\t&lt;&#x2F;executions&gt;</span><br><span class=\"line\">\t\t\t&lt;&#x2F;plugin&gt;</span><br><span class=\"line\">\t\t&lt;&#x2F;plugins&gt;</span><br><span class=\"line\">\t&lt;&#x2F;build&gt;</span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>自定义插件往往需要一些配置，例如，<code>maven-shade-plugin</code>需要指定Java程序的入口，它的配置是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;transformers&gt;</span><br><span class=\"line\">        &lt;transformer implementation&#x3D;&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;&gt;</span><br><span class=\"line\">            &lt;mainClass&gt;com.itranswarp.learnjava.Main&lt;&#x2F;mainClass&gt;</span><br><span class=\"line\">        &lt;&#x2F;transformer&gt;</span><br><span class=\"line\">    &lt;&#x2F;transformers&gt;</span><br><span class=\"line\">&lt;&#x2F;configuration&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>注意，Maven自带的标准插件例如<code>compiler</code>是无需声明的，只有引入其它的插件才需要声明。</p>\n<p>下面列举了一些常用的插件：</p>\n<ul>\n<li>maven-shade-plugin：打包所有依赖包并生成可执行jar；</li>\n<li>cobertura-maven-plugin：生成单元测试覆盖率报告；</li>\n<li>findbugs-maven-plugin：对Java源码进行静态分析以找出潜在问题。</li>\n</ul>\n<h2 id=\"模块管理\"><a href=\"#模块管理\" class=\"headerlink\" title=\"模块管理:\"></a>模块管理:</h2><p>在软件开发中，把一个大项目分拆为多个模块是降低软件复杂度的有效方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                        ┌ ─ ─ ─ ─ ─ ─ ┐</span><br><span class=\"line\">                          ┌─────────┐</span><br><span class=\"line\">                        │ │Module A │ │</span><br><span class=\"line\">                          └─────────┘</span><br><span class=\"line\">┌──────────────┐ split  │ ┌─────────┐ │</span><br><span class=\"line\">│Single Project│───────&gt;  │Module B │</span><br><span class=\"line\">└──────────────┘        │ └─────────┘ │</span><br><span class=\"line\">                          ┌─────────┐</span><br><span class=\"line\">                        │ │Module C │ │</span><br><span class=\"line\">                          └─────────┘</span><br><span class=\"line\">                        └ ─ ─ ─ ─ ─ ─ ┘</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>对于Maven工程来说，原来是一个大项目：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">single-project</span><br><span class=\"line\">├── pom.xml</span><br><span class=\"line\">└── src</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>现在可以分拆成3个模块：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutiple-project</span><br><span class=\"line\">├── module-a</span><br><span class=\"line\">│   ├── pom.xml</span><br><span class=\"line\">│   └── src</span><br><span class=\"line\">├── module-b</span><br><span class=\"line\">│   ├── pom.xml</span><br><span class=\"line\">│   └── src</span><br><span class=\"line\">└── module-c</span><br><span class=\"line\">    ├── pom.xml</span><br><span class=\"line\">    └── src</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Maven可以有效地管理多个模块，我们只需要把每个模块当作一个独立的Maven项目，它们有各自独立的<code>pom.xml</code>。例如，模块A的<code>pom.xml</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class=\"line\">    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.itranswarp.learnjava&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;module-a&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;name&gt;module-a&lt;&#x2F;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class=\"line\">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class=\"line\">        &lt;maven.compiler.source&gt;11&lt;&#x2F;maven.compiler.source&gt;</span><br><span class=\"line\">        &lt;maven.compiler.target&gt;11&lt;&#x2F;maven.compiler.target&gt;</span><br><span class=\"line\">        &lt;java.version&gt;11&lt;&#x2F;java.version&gt;</span><br><span class=\"line\">    &lt;&#x2F;properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;slf4j-api&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.7.28&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;ch.qos.logback&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;logback-classic&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.2.3&lt;&#x2F;version&gt;</span><br><span class=\"line\">            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.junit.jupiter&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;junit-jupiter-engine&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;5.5.2&lt;&#x2F;version&gt;</span><br><span class=\"line\">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>模块B的<code>pom.xml</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class=\"line\">    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.itranswarp.learnjava&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;module-b&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;name&gt;module-b&lt;&#x2F;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class=\"line\">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class=\"line\">        &lt;maven.compiler.source&gt;11&lt;&#x2F;maven.compiler.source&gt;</span><br><span class=\"line\">        &lt;maven.compiler.target&gt;11&lt;&#x2F;maven.compiler.target&gt;</span><br><span class=\"line\">        &lt;java.version&gt;11&lt;&#x2F;java.version&gt;</span><br><span class=\"line\">    &lt;&#x2F;properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;slf4j-api&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.7.28&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;ch.qos.logback&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;logback-classic&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.2.3&lt;&#x2F;version&gt;</span><br><span class=\"line\">            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.junit.jupiter&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;junit-jupiter-engine&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;5.5.2&lt;&#x2F;version&gt;</span><br><span class=\"line\">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>可以看出来，模块A和模块B的<code>pom.xml</code>高度相似，因此，我们可以提取出共同部分作为<code>parent</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class=\"line\">    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.itranswarp.learnjava&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;parent&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;pom&lt;&#x2F;packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;name&gt;parent&lt;&#x2F;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class=\"line\">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class=\"line\">        &lt;maven.compiler.source&gt;11&lt;&#x2F;maven.compiler.source&gt;</span><br><span class=\"line\">        &lt;maven.compiler.target&gt;11&lt;&#x2F;maven.compiler.target&gt;</span><br><span class=\"line\">        &lt;java.version&gt;11&lt;&#x2F;java.version&gt;</span><br><span class=\"line\">    &lt;&#x2F;properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;slf4j-api&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.7.28&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;ch.qos.logback&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;logback-classic&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.2.3&lt;&#x2F;version&gt;</span><br><span class=\"line\">            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.junit.jupiter&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;junit-jupiter-engine&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;5.5.2&lt;&#x2F;version&gt;</span><br><span class=\"line\">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>注意到parent的<code>&lt;packaging&gt;</code>是<code>pom</code>而不是<code>jar</code>，因为<code>parent</code>本身不含任何Java代码。编写<code>parent</code>的<code>pom.xml</code>只是为了在各个模块中减少重复的配置。现在我们的整个工程结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">multiple-project</span><br><span class=\"line\">├── pom.xml</span><br><span class=\"line\">├── parent</span><br><span class=\"line\">│   └── pom.xml</span><br><span class=\"line\">├── module-a</span><br><span class=\"line\">│   ├── pom.xml</span><br><span class=\"line\">│   └── src</span><br><span class=\"line\">├── module-b</span><br><span class=\"line\">│   ├── pom.xml</span><br><span class=\"line\">│   └── src</span><br><span class=\"line\">└── module-c</span><br><span class=\"line\">    ├── pom.xml</span><br><span class=\"line\">    └── src</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这样模块A就可以简化为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class=\"line\">    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.itranswarp.learnjava&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;parent&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;relativePath&gt;..&#x2F;parent&#x2F;pom.xml&lt;&#x2F;relativePath&gt;</span><br><span class=\"line\">    &lt;&#x2F;parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;artifactId&gt;module-a&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class=\"line\">    &lt;name&gt;module-a&lt;&#x2F;name&gt;</span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>模块B、模块C都可以直接从<code>parent</code>继承，大幅简化了<code>pom.xml</code>的编写。</p>\n<p>如果模块A依赖模块B，则模块A需要模块B的jar包才能正常编译，我们需要在模块A中引入模块B：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.itranswarp.learnjava&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;module-b&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;&#x2F;dependencies&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>最后，在编译的时候，需要在根目录创建一个<code>pom.xml</code>统一编译：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class=\"line\">    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;maven-v4_0_0.xsd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.itranswarp.learnjava&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;build&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;pom&lt;&#x2F;packaging&gt;</span><br><span class=\"line\">    &lt;name&gt;build&lt;&#x2F;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;modules&gt;</span><br><span class=\"line\">        &lt;module&gt;parent&lt;&#x2F;module&gt;</span><br><span class=\"line\">        &lt;module&gt;module-a&lt;&#x2F;module&gt;</span><br><span class=\"line\">        &lt;module&gt;module-b&lt;&#x2F;module&gt;</span><br><span class=\"line\">        &lt;module&gt;module-c&lt;&#x2F;module&gt;</span><br><span class=\"line\">    &lt;&#x2F;modules&gt;</span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这样，在根目录执行<code>mvn clean package</code>时，Maven根据根目录的<code>pom.xml</code>找到包括<code>parent</code>在内的共4个<code>&lt;module&gt;</code>，一次性全部编译。</p>\n<h3 id=\"中央仓库\"><a href=\"#中央仓库\" class=\"headerlink\" title=\"中央仓库\"></a>中央仓库</h3><p>其实我们使用的大多数第三方模块都是这个用法，例如，我们使用commons logging、log4j这些第三方模块，就是第三方模块的开发者自己把编译好的jar包发布到Maven的中央仓库中。</p>\n<h3 id=\"私有仓库\"><a href=\"#私有仓库\" class=\"headerlink\" title=\"私有仓库\"></a>私有仓库</h3><p>私有仓库是指公司内部如果不希望把源码和jar包放到公网上，那么可以搭建私有仓库。私有仓库总是在公司内部使用，它只需要在本地的<code>~/.m2/settings.xml</code>中配置好，使用方式和中央仓位没有任何区别。</p>\n<h3 id=\"本地仓库\"><a href=\"#本地仓库\" class=\"headerlink\" title=\"本地仓库\"></a>本地仓库</h3><p>本地仓库是指把本地开发的项目“发布”在本地，这样其他项目可以通过本地仓库引用它。但是我们不推荐把自己的模块安装到Maven的本地仓库，因为每次修改某个模块的源码，都需要重新安装，非常容易出现版本不一致的情况。更好的方法是使用模块化编译，在编译的时候，告诉Maven几个模块之间存在依赖关系，需要一块编译，Maven就会自动按依赖顺序编译这些模块。</p>\n<h2 id=\"使用mvnw\"><a href=\"#使用mvnw\" class=\"headerlink\" title=\"使用mvnw:\"></a>使用mvnw:</h2><p>我们使用Maven时，基本上只会用到<code>mvn</code>这一个命令。有些童鞋可能听说过<code>mvnw</code>，这个是啥？</p>\n<p><code>mvnw</code>是Maven Wrapper的缩写。因为我们安装Maven时，默认情况下，系统所有项目都会使用全局安装的这个Maven版本。但是，对于某些项目来说，它可能必须使用某个特定的Maven版本，这个时候，就可以使用Maven Wrapper，它可以负责给这个特定的项目安装指定版本的Maven，而其他项目不受影响。</p>\n<p>简单地说，Maven Wrapper就是给一个项目提供一个独立的，指定版本的Maven给它使用。</p>\n<h3 id=\"安装Maven-Wrapper\"><a href=\"#安装Maven-Wrapper\" class=\"headerlink\" title=\"安装Maven Wrapper\"></a>安装Maven Wrapper</h3><p>安装Maven Wrapper最简单的方式是在项目的根目录（即<code>pom.xml</code>所在的目录）下运行安装命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn -N io.takari:maven:0.7.6:wrapper</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>它会自动使用最新版本的Maven。注意<code>0.7.6</code>是Maven Wrapper的版本。最新的Maven Wrapper版本可以去<a href=\"https://github.com/takari/maven-wrapper\">官方网站</a>查看。</p>\n<p>如果要指定使用的Maven版本，使用下面的安装命令指定版本，例如<code>3.3.3</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn -N io.takari:maven:0.7.6:wrapper -Dmaven&#x3D;3.3.3</span><br></pre></td></tr></table></figure>\n<p>安装后，查看项目结构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my-project</span><br><span class=\"line\">├── .mvn</span><br><span class=\"line\">│   └── wrapper</span><br><span class=\"line\">│       ├── MavenWrapperDownloader.java</span><br><span class=\"line\">│       ├── maven-wrapper.jar</span><br><span class=\"line\">│       └── maven-wrapper.properties</span><br><span class=\"line\">├── mvnw</span><br><span class=\"line\">├── mvnw.cmd</span><br><span class=\"line\">├── pom.xml</span><br><span class=\"line\">└── src</span><br><span class=\"line\">    ├── main</span><br><span class=\"line\">    │   ├── java</span><br><span class=\"line\">    │   └── resources</span><br><span class=\"line\">    └── test</span><br><span class=\"line\">        ├── java</span><br><span class=\"line\">        └── resources</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>发现多了<code>mvnw</code>、<code>mvnw.cmd</code>和<code>.mvn</code>目录，我们只需要把<code>mvn</code>命令改成<code>mvnw</code>就可以使用跟项目关联的Maven。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvnw cleanpackage</span><br></pre></td></tr></table></figure>\n<p>在Linux或macOS下运行时需要加上<code>./</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;mvnw cleanpackage</span><br></pre></td></tr></table></figure>\n<p>Maven Wrapper的另一个作用是把项目的<code>mvnw</code>、<code>mvnw.cmd</code>和<code>.mvn</code>提交到版本库中，可以使所有开发人员使用统一的Maven版本。</p>\n<h2 id=\"发布Artifact\"><a href=\"#发布Artifact\" class=\"headerlink\" title=\"发布Artifact:\"></a>发布Artifact:</h2><p>当我们使用<code>commons-logging</code>这些第三方开源库的时候，我们实际上是通过Maven自动下载它的jar包，并根据其<code>pom.xml</code>解析依赖，自动把相关依赖包都下载后加入到classpath。</p>\n<p>那么问题来了：当我们自己写了一个牛逼的开源库时，非常希望别人也能使用，总不能直接放个jar包的链接让别人下载吧？</p>\n<p>如果我们把自己的开源库放到Maven的repo中，那么，别人只需按标准引用<code>groupId:artifactId:version</code>，即可自动下载jar包以及相关依赖。因此，本节我们介绍如何发布一个库到Maven的repo中。</p>\n<p>把自己的库发布到Maven的repo中有好几种方法，我们介绍3种最常用的方法。</p>\n<h3 id=\"以静态文件发布\"><a href=\"#以静态文件发布\" class=\"headerlink\" title=\"以静态文件发布\"></a>以静态文件发布</h3><p>如果我们观察一个中央仓库的Artifact结构，例如<a href=\"https://commons.apache.org/proper/commons-math/\">Commons Math</a>，它的groupId是<code>org.apache.commons</code>，artifactId是<code>commons-math3</code>，以版本<code>3.6.1</code>为例，发布在中央仓库的文件夹路径就是<a href=\"https://repo1.maven.org/maven2/org/apache/commons/commons-math3/3.6.1/\">https://repo1.maven.org/maven2/org/apache/commons/commons-math3/3.6.1/</a>，在此文件夹下，<code>commons-math3-3.6.1.jar</code>就是发布的jar包，<code>commons-math3-3.6.1.pom</code>就是它的<code>pom.xml</code>描述文件，<code>commons-math3-3.6.1-sources.jar</code>是源代码，<code>commons-math3-3.6.1-javadoc.jar</code>是文档。其它以<code>.asc</code>、<code>.md5</code>、<code>.sha1</code>结尾的文件分别是GPG签名、MD5摘要和SHA-1摘要。</p>\n<p>我们只要按照这种目录结构组织文件，它就是一个有效的Maven仓库。</p>\n<p>我们以广受好评的开源项目<a href=\"https://github.com/michaelliao/how-to-become-rich\">how-to-become-rich</a>为例，先创建Maven工程目录结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">how-to-become-rich</span><br><span class=\"line\">├── maven-repo        &lt;-- Maven本地文件仓库</span><br><span class=\"line\">├── pom.xml           &lt;-- 项目文件</span><br><span class=\"line\">├── src</span><br><span class=\"line\">│   ├── main</span><br><span class=\"line\">│   │   ├── java      &lt;-- 源码目录</span><br><span class=\"line\">│   │   └── resources &lt;-- 资源目录</span><br><span class=\"line\">│   └── test</span><br><span class=\"line\">│       ├── java      &lt;-- 测试源码目录</span><br><span class=\"line\">│       └── resources &lt;-- 测试资源目录</span><br><span class=\"line\">└── target            &lt;-- 编译输出目录</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在<code>pom.xml</code>中添加如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project ...&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &lt;distributionManagement&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;local-repo-release&lt;&#x2F;id&gt;</span><br><span class=\"line\">            &lt;name&gt;GitHub Release&lt;&#x2F;name&gt;</span><br><span class=\"line\">            &lt;url&gt;file:&#x2F;&#x2F;$&#123;project.basedir&#125;&#x2F;maven-repo&lt;&#x2F;url&gt;</span><br><span class=\"line\">        &lt;&#x2F;repository&gt;</span><br><span class=\"line\">    &lt;&#x2F;distributionManagement&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;maven-source-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">                &lt;executions&gt;</span><br><span class=\"line\">                    &lt;execution&gt;</span><br><span class=\"line\">                        &lt;id&gt;attach-sources&lt;&#x2F;id&gt;</span><br><span class=\"line\">                        &lt;phase&gt;package&lt;&#x2F;phase&gt;</span><br><span class=\"line\">                        &lt;goals&gt;</span><br><span class=\"line\">                            &lt;goal&gt;jar-no-fork&lt;&#x2F;goal&gt;</span><br><span class=\"line\">                        &lt;&#x2F;goals&gt;</span><br><span class=\"line\">                    &lt;&#x2F;execution&gt;</span><br><span class=\"line\">                &lt;&#x2F;executions&gt;</span><br><span class=\"line\">            &lt;&#x2F;plugin&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;maven-javadoc-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">                &lt;executions&gt;</span><br><span class=\"line\">                    &lt;execution&gt;</span><br><span class=\"line\">                        &lt;id&gt;attach-javadocs&lt;&#x2F;id&gt;</span><br><span class=\"line\">                        &lt;phase&gt;package&lt;&#x2F;phase&gt;</span><br><span class=\"line\">                        &lt;goals&gt;</span><br><span class=\"line\">                            &lt;goal&gt;jar&lt;&#x2F;goal&gt;</span><br><span class=\"line\">                        &lt;&#x2F;goals&gt;</span><br><span class=\"line\">                    &lt;&#x2F;execution&gt;</span><br><span class=\"line\">                &lt;&#x2F;executions&gt;</span><br><span class=\"line\">            &lt;&#x2F;plugin&gt;</span><br><span class=\"line\">        &lt;&#x2F;plugins&gt;</span><br><span class=\"line\">    &lt;&#x2F;build&gt;</span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>注意到<code>&lt;distributionManagement&gt;</code>，它指示了发布的软件包的位置，这里的<code>&lt;url&gt;</code>是项目根目录下的<code>maven-repo</code>目录，在<code>&lt;build&gt;</code>中定义的两个插件<code>maven-source-plugin</code>和<code>maven-javadoc-plugin</code>分别用来创建源码和javadoc，如果不想发布源码，可以把对应的插件去掉。</p>\n<p>我们直接在项目根目录下运行Maven命令<code>mvn clean package deploy</code>，如果一切顺利，我们就可以在<code>maven-repo</code>目录下找到部署后的所有文件如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maven-repo</span><br><span class=\"line\">└── com</span><br><span class=\"line\">    └── itranswarp</span><br><span class=\"line\">        └── rich</span><br><span class=\"line\">            └── how-to-become-rich</span><br><span class=\"line\">                ├── 1.0.0</span><br><span class=\"line\">                │   ├── how-to-become-rich-1.0.0-javadoc.jar</span><br><span class=\"line\">                │   ├── how-to-become-rich-1.0.0-javadoc.jar.md5</span><br><span class=\"line\">                │   ├── how-to-become-rich-1.0.0-javadoc.jar.sha1</span><br><span class=\"line\">                │   ├── how-to-become-rich-1.0.0-sources.jar</span><br><span class=\"line\">                │   ├── how-to-become-rich-1.0.0-sources.jar.md5</span><br><span class=\"line\">                │   ├── how-to-become-rich-1.0.0-sources.jar.sha1</span><br><span class=\"line\">                │   ├── how-to-become-rich-1.0.0.jar</span><br><span class=\"line\">                │   ├── how-to-become-rich-1.0.0.jar.md5</span><br><span class=\"line\">                │   ├── how-to-become-rich-1.0.0.jar.sha1</span><br><span class=\"line\">                │   ├── how-to-become-rich-1.0.0.pom</span><br><span class=\"line\">                │   ├── how-to-become-rich-1.0.0.pom.md5</span><br><span class=\"line\">                │   └── how-to-become-rich-1.0.0.pom.sha1</span><br><span class=\"line\">                ├── maven-metadata.xml</span><br><span class=\"line\">                ├── maven-metadata.xml.md5</span><br><span class=\"line\">                └── maven-metadata.xml.sha1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>最后一步，是把这个工程推到GitHub上，并选择<code>Settings</code>-<code>GitHub Pages</code>，选择<code>master branch</code>启用Pages服务：</p>\n<p><img src=\"learn-maven%20eb9d5ffa7bae4b5bb1e0874b7f871af4/Untitled.png\" alt=\"learn-maven%20eb9d5ffa7bae4b5bb1e0874b7f871af4/Untitled.png\"></p>\n<p>这样，把全部内容推送至GitHub后，即可作为静态网站访问Maven的repo，它的地址是<a href=\"https://michaelliao.github.io/how-to-become-rich/maven-repo/\">https://michaelliao.github.io/how-to-become-rich/maven-repo/</a>。版本<code>1.0.0</code>对应的jar包地址是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;michaelliao.github.io&#x2F;how-to-become-rich&#x2F;maven-repo&#x2F;com&#x2F;itranswarp&#x2F;rich&#x2F;how-to-become-rich&#x2F;1.0.0&#x2F;how-to-become-rich-1.0.0.jar</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>现在，如果其他人希望引用这个Maven包，我们可以告知如下依赖即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.itranswarp.rich&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;how-to-become-rich&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>但是，除了正常导入依赖外，对方还需要再添加一个<code>&lt;repository&gt;</code>的声明，即使用方完整的<code>pom.xml</code>如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class=\"line\">    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;example&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;how-to-become-rich-usage&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;maven.compiler.source&gt;11&lt;&#x2F;maven.compiler.source&gt;</span><br><span class=\"line\">        &lt;maven.compiler.target&gt;11&lt;&#x2F;maven.compiler.target&gt;</span><br><span class=\"line\">        &lt;java.version&gt;11&lt;&#x2F;java.version&gt;</span><br><span class=\"line\">    &lt;&#x2F;properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;repositories&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;github-rich-repo&lt;&#x2F;id&gt;</span><br><span class=\"line\">            &lt;name&gt;The Maven Repository on Github&lt;&#x2F;name&gt;</span><br><span class=\"line\">            &lt;url&gt;https:&#x2F;&#x2F;michaelliao.github.io&#x2F;how-to-become-rich&#x2F;maven-repo&#x2F;&lt;&#x2F;url&gt;</span><br><span class=\"line\">        &lt;&#x2F;repository&gt;</span><br><span class=\"line\">    &lt;&#x2F;repositories&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;com.itranswarp.rich&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;how-to-become-rich&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.0.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在<code>&lt;repository&gt;</code>中，我们必须声明发布的Maven的repo地址，其中<code>&lt;id&gt;</code>和<code>&lt;name&gt;</code>可以任意填写，<code>&lt;url&gt;</code>填入GitHub Pages提供的地址+<code>/maven-repo/</code>后缀。现在，即可正常引用这个库并编写代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Millionaire millionaire &#x3D;new Millionaire();</span><br><span class=\"line\">System.out.println(millionaire.howToBecomeRich());</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>有的童鞋会问，为什么使用<code>commons-logging</code>等第三方库时，并不需要声明repo地址？这是因为这些库都是发布到Maven中央仓库的，发布到中央仓库后，不需要告诉Maven仓库地址，因为它知道中央仓库的地址默认是<a href=\"https://repo1.maven.org/maven2/\">https://repo1.maven.org/maven2/</a>，也可以通过<code>~/.m2/settings.xml</code>指定一个代理仓库地址以替代中央仓库来提高速度（参考<a href=\"https://www.liaoxuefeng.com/wiki/1252599548343744/1309301178105890\">依赖管理</a>的Maven镜像）。</p>\n<p>因为GitHub Pages并不会把我们发布的Maven包同步到中央仓库，所以自然使用方必须手动添加一个我们提供的仓库地址。</p>\n<p>此外，通过GitHub Pages发布Maven repo时需要注意一点，即不要改动已发布的版本。因为Maven的仓库是不允许修改任何版本的，对一个库进行修改的唯一方法是发布一个新版本。但是通过静态文件的方式发布repo，实际上我们是可以修改jar文件的，但最好遵守规范，不要修改已发布版本。</p>\n<h3 id=\"通过Nexus发布到中央仓库\"><a href=\"#通过Nexus发布到中央仓库\" class=\"headerlink\" title=\"通过Nexus发布到中央仓库\"></a>通过Nexus发布到中央仓库</h3><p>有的童鞋会问，能不能把自己的开源库发布到Maven的中央仓库，这样用户就不需要声明repo地址，可以直接引用，显得更专业。</p>\n<p>当然可以，但我们不能直接发布到Maven中央仓库，而是通过曲线救国的方式，发布到<a href=\"https://central.sonatype.org/\">central.sonatype.org</a>，它会定期自动同步到Maven的中央仓库。<a href=\"https://www.sonatype.com/nexus-repository-oss\">Nexus</a>是一个支持Maven仓库的软件，由Sonatype开发，有免费版和专业版两个版本，很多大公司内部都使用Nexus作为自己的私有Maven仓库，而这个<a href=\"https://central.sonatype.org/\">central.sonatype.org</a>相当于面向开源的一个Nexus公共服务。</p>\n<p>所以，第一步是在<a href=\"https://central.sonatype.org/\">central.sonatype.org</a>上注册一个账号，注册链接非常隐蔽，可以自己先找找，找半小时没找到点这里查看攻略。</p>\n<p>如果注册顺利并审核通过，会得到一个登录账号，然后，通过<a href=\"https://central.sonatype.org/pages/apache-maven.html\">这个页面</a>一步一步操作就可以成功地将自己的Artifact发布到Nexus上，再耐心等待几个小时后，你的Artifact就会出现在Maven的中央仓库中。</p>\n<p>这里简单提一下发布重点与难点：</p>\n<ul>\n<li>必须正确创建GPG签名，Linux和Mac下推荐使用gnupg2；</li>\n<li>必须在<code>~/.m2/settings.xml</code>中配置好登录用户名和口令，以及GPG口令：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;settings ...&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &lt;servers&gt;</span><br><span class=\"line\">        &lt;server&gt;</span><br><span class=\"line\">            &lt;id&gt;ossrh&lt;&#x2F;id&gt;</span><br><span class=\"line\">            &lt;username&gt;OSSRH-USERNAME&lt;&#x2F;username&gt;</span><br><span class=\"line\">            &lt;password&gt;OSSRH-PASSWORD&lt;&#x2F;password&gt;</span><br><span class=\"line\">        &lt;&#x2F;server&gt;</span><br><span class=\"line\">    &lt;&#x2F;servers&gt;</span><br><span class=\"line\">    &lt;profiles&gt;</span><br><span class=\"line\">        &lt;profile&gt;</span><br><span class=\"line\">            &lt;id&gt;ossrh&lt;&#x2F;id&gt;</span><br><span class=\"line\">            &lt;activation&gt;</span><br><span class=\"line\">                &lt;activeByDefault&gt;true&lt;&#x2F;activeByDefault&gt;</span><br><span class=\"line\">            &lt;&#x2F;activation&gt;</span><br><span class=\"line\">            &lt;properties&gt;</span><br><span class=\"line\">                &lt;gpg.executable&gt;gpg2&lt;&#x2F;gpg.executable&gt;</span><br><span class=\"line\">                &lt;gpg.passphrase&gt;GPG-PASSWORD&lt;&#x2F;gpg.passphrase&gt;</span><br><span class=\"line\">            &lt;&#x2F;properties&gt;</span><br><span class=\"line\">        &lt;&#x2F;profile&gt;</span><br><span class=\"line\">    &lt;&#x2F;profiles&gt;</span><br><span class=\"line\">&lt;&#x2F;settings&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在待发布的Artifact的<code>pom.xml</code>中添加OSS的Maven repo地址，以及<code>maven-jar-plugin</code>、<code>maven-source-plugin</code>、<code>maven-javadoc-plugin</code>、<code>maven-gpg-plugin</code>、<code>nexus-staging-maven-plugin</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project ...&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &lt;distributionManagement&gt;</span><br><span class=\"line\">        &lt;snapshotRepository&gt;</span><br><span class=\"line\">            &lt;id&gt;ossrh&lt;&#x2F;id&gt;</span><br><span class=\"line\">            &lt;url&gt;https:&#x2F;&#x2F;oss.sonatype.org&#x2F;content&#x2F;repositories&#x2F;snapshots&lt;&#x2F;url&gt;</span><br><span class=\"line\">        &lt;&#x2F;snapshotRepository&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;ossrh&lt;&#x2F;id&gt;</span><br><span class=\"line\">            &lt;name&gt;Nexus Release Repository&lt;&#x2F;name&gt;</span><br><span class=\"line\">            &lt;url&gt;http:&#x2F;&#x2F;oss.sonatype.org&#x2F;service&#x2F;local&#x2F;staging&#x2F;deploy&#x2F;maven2&#x2F;&lt;&#x2F;url&gt;</span><br><span class=\"line\">        &lt;&#x2F;repository&gt;</span><br><span class=\"line\">    &lt;&#x2F;distributionManagement&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;maven-jar-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">                &lt;executions&gt;</span><br><span class=\"line\">                    &lt;execution&gt;</span><br><span class=\"line\">                        &lt;goals&gt;</span><br><span class=\"line\">                            &lt;goal&gt;jar&lt;&#x2F;goal&gt;</span><br><span class=\"line\">                            &lt;goal&gt;test-jar&lt;&#x2F;goal&gt;</span><br><span class=\"line\">                        &lt;&#x2F;goals&gt;</span><br><span class=\"line\">                    &lt;&#x2F;execution&gt;</span><br><span class=\"line\">                &lt;&#x2F;executions&gt;</span><br><span class=\"line\">            &lt;&#x2F;plugin&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;maven-source-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">                &lt;executions&gt;</span><br><span class=\"line\">                    &lt;execution&gt;</span><br><span class=\"line\">                        &lt;id&gt;attach-sources&lt;&#x2F;id&gt;</span><br><span class=\"line\">                        &lt;goals&gt;</span><br><span class=\"line\">                            &lt;goal&gt;jar-no-fork&lt;&#x2F;goal&gt;</span><br><span class=\"line\">                        &lt;&#x2F;goals&gt;</span><br><span class=\"line\">                    &lt;&#x2F;execution&gt;</span><br><span class=\"line\">                &lt;&#x2F;executions&gt;</span><br><span class=\"line\">            &lt;&#x2F;plugin&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;maven-javadoc-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">                &lt;executions&gt;</span><br><span class=\"line\">                    &lt;execution&gt;</span><br><span class=\"line\">                        &lt;id&gt;attach-javadocs&lt;&#x2F;id&gt;</span><br><span class=\"line\">                        &lt;goals&gt;</span><br><span class=\"line\">                            &lt;goal&gt;jar&lt;&#x2F;goal&gt;</span><br><span class=\"line\">                        &lt;&#x2F;goals&gt;</span><br><span class=\"line\">                        &lt;configuration&gt;</span><br><span class=\"line\">                            &lt;additionalOption&gt;</span><br><span class=\"line\">                                &lt;additionalOption&gt;-Xdoclint:none&lt;&#x2F;additionalOption&gt;</span><br><span class=\"line\">                            &lt;&#x2F;additionalOption&gt;</span><br><span class=\"line\">                        &lt;&#x2F;configuration&gt;</span><br><span class=\"line\">                    &lt;&#x2F;execution&gt;</span><br><span class=\"line\">                &lt;&#x2F;executions&gt;</span><br><span class=\"line\">            &lt;&#x2F;plugin&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;maven-gpg-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">                &lt;executions&gt;</span><br><span class=\"line\">                    &lt;execution&gt;</span><br><span class=\"line\">                        &lt;id&gt;sign-artifacts&lt;&#x2F;id&gt;</span><br><span class=\"line\">                        &lt;phase&gt;verify&lt;&#x2F;phase&gt;</span><br><span class=\"line\">                        &lt;goals&gt;</span><br><span class=\"line\">                            &lt;goal&gt;sign&lt;&#x2F;goal&gt;</span><br><span class=\"line\">                        &lt;&#x2F;goals&gt;</span><br><span class=\"line\">                    &lt;&#x2F;execution&gt;</span><br><span class=\"line\">                &lt;&#x2F;executions&gt;</span><br><span class=\"line\">            &lt;&#x2F;plugin&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.sonatype.plugins&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;nexus-staging-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;1.6.3&lt;&#x2F;version&gt;</span><br><span class=\"line\">                &lt;extensions&gt;true&lt;&#x2F;extensions&gt;</span><br><span class=\"line\">                &lt;configuration&gt;</span><br><span class=\"line\">                    &lt;serverId&gt;ossrh&lt;&#x2F;serverId&gt;</span><br><span class=\"line\">                    &lt;nexusUrl&gt;https:&#x2F;&#x2F;oss.sonatype.org&#x2F;&lt;&#x2F;nexusUrl&gt;</span><br><span class=\"line\">                    &lt;autoReleaseAfterClose&gt;true&lt;&#x2F;autoReleaseAfterClose&gt;</span><br><span class=\"line\">                &lt;&#x2F;configuration&gt;</span><br><span class=\"line\">            &lt;&#x2F;plugin&gt;</span><br><span class=\"line\">        &lt;&#x2F;plugins&gt;</span><br><span class=\"line\">    &lt;&#x2F;build&gt;</span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>最后执行命令<code>mvn clean package deploy</code>即可发布至<a href=\"https://central.sonatype.org/\">central.sonatype.org</a>。</p>\n<p>此方法前期需要复杂的申请账号和项目的流程，后期需要安装调试GPG，但只要跑通流程，后续发布都只需要一行命令。</p>\n<h3 id=\"发布到私有仓库\"><a href=\"#发布到私有仓库\" class=\"headerlink\" title=\"发布到私有仓库\"></a>发布到私有仓库</h3><p>通过<code>nexus-staging-maven-plugin</code>除了可以发布到<a href=\"https://central.sonatype.org/\">central.sonatype.org</a>外，也可以发布到私有仓库，例如，公司内部自己搭建的Nexus服务器。</p>\n<p>如果没有私有Nexus服务器，还可以发布到<a href=\"https://github.com/features/packages\">GitHub Packages</a>。GitHub Packages是GitHub提供的仓库服务，支持Maven、NPM、Docker等。使用GitHub Packages时，无论是发布Artifact，还是引用已发布的Artifact，都需要明确的授权Token，因此，GitHub Packages只能作为私有仓库使用。</p>\n<p>在发布前，我们必须首先登录后在用户的<code>Settings</code>-<code>Developer settings</code>-<code>Personal access tokens</code>中创建两个Token，一个用于发布，一个用于使用。发布Artifact的Token必须有<code>repo</code>、<code>write:packages</code>和<code>read:packages</code>权限：</p>\n<p><a href=\"https://www.liaoxuefeng.com/files/attachments/1347999282233410/l\">https://www.liaoxuefeng.com/files/attachments/1347999282233410/l</a></p>\n<p>使用Artifact的Token只需要<code>read:packages</code>权限。</p>\n<p>在发布端，把GitHub的用户名和发布Token写入<code>~/.m2/settings.xml</code>配置中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;settings ...&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &lt;servers&gt;</span><br><span class=\"line\">        &lt;server&gt;</span><br><span class=\"line\">            &lt;id&gt;github-release&lt;&#x2F;id&gt;</span><br><span class=\"line\">            &lt;username&gt;GITHUB-USERNAME&lt;&#x2F;username&gt;</span><br><span class=\"line\">            &lt;password&gt;f052...c21f&lt;&#x2F;password&gt;</span><br><span class=\"line\">        &lt;&#x2F;server&gt;</span><br><span class=\"line\">    &lt;&#x2F;servers&gt;</span><br><span class=\"line\">&lt;&#x2F;settings&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>然后，在需要发布的Artifact的<code>pom.xml</code>中，添加一个<code>&lt;repository&gt;</code>声明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project ...&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &lt;distributionManagement&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;github-release&lt;&#x2F;id&gt;</span><br><span class=\"line\">            &lt;name&gt;GitHub Release&lt;&#x2F;name&gt;</span><br><span class=\"line\">            &lt;url&gt;https:&#x2F;&#x2F;maven.pkg.github.com&#x2F;michaelliao&#x2F;complex&lt;&#x2F;url&gt;</span><br><span class=\"line\">        &lt;&#x2F;repository&gt;</span><br><span class=\"line\">    &lt;&#x2F;distributionManagement&gt;</span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>注意到<code>&lt;id&gt;</code>和<code>~/.m2/settings.xml</code>配置中的<code>&lt;id&gt;</code>要保持一致，因为发布时Maven根据id找到用于登录的用户名和Token，才能成功上传文件到GitHub。我们直接通过命令<code>mvn clean package deploy</code>部署，成功后，在GitHub用户页面可以看到该Artifact：</p>\n<p><a href=\"https://www.liaoxuefeng.com/files/attachments/1348000710393922/l\">https://www.liaoxuefeng.com/files/attachments/1348000710393922/l</a></p>\n<p>完整的配置请参考<a href=\"https://github.com/michaelliao/complex/\">complex</a>项目，这是一个非常简单的支持复数运算的库。</p>\n<p>使用该Artifact时，因为GitHub的Package只能作为私有仓库使用，所以除了在使用方的<code>pom.xml</code>中声明<code>&lt;repository&gt;</code>外：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project ...&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &lt;repositories&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;github-release&lt;&#x2F;id&gt;</span><br><span class=\"line\">            &lt;name&gt;GitHub Release&lt;&#x2F;name&gt;</span><br><span class=\"line\">            &lt;url&gt;https:&#x2F;&#x2F;maven.pkg.github.com&#x2F;michaelliao&#x2F;complex&lt;&#x2F;url&gt;</span><br><span class=\"line\">        &lt;&#x2F;repository&gt;</span><br><span class=\"line\">    &lt;&#x2F;repositories&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;com.itranswarp&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;complex&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.0.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>还需要把有读权限的Token配置到<code>~/.m2/settings.xml</code>文件中。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Maven介绍\"><a href=\"#Maven介绍\" class=\"headerlink\" title=\"Maven介绍:\"></a>Maven介绍:</h2><p>Maven就是是专门为Java项目打造的管理和构建工具，它的主要功能有：</p>\n<ul>\n<li>提供了一套标准化的项目结构；</li>\n<li>提供了一套标准化的构建流程（编译，测试，打包，发布……）；</li>\n<li>提供了一套依赖管理机制。</li>\n</ul>\n<h3 id=\"Maven项目结构\"><a href=\"#Maven项目结构\" class=\"headerlink\" title=\"Maven项目结构\"></a>Maven项目结构</h3><p>一个使用Maven管理的普通的Java项目，它的目录结构默认如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a-maven-project</span><br><span class=\"line\">├── pom.xml</span><br><span class=\"line\">├── src</span><br><span class=\"line\">│   ├── main</span><br><span class=\"line\">│   │   ├── java</span><br><span class=\"line\">│   │   └── resources</span><br><span class=\"line\">│   └── test</span><br><span class=\"line\">│       ├── java</span><br><span class=\"line\">│       └── resources</span><br><span class=\"line\">└── target</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>项目的根目录<code>a-maven-project</code>是项目名，它有一个项目描述文件<code>pom.xml</code>，存放Java源码的目录是<code>src/main/java</code>，存放资源文件的目录是<code>src/main/resources</code>，存放测试源码的目录是<code>src/test/java</code>，存放测试资源的目录是<code>src/test/resources</code>，最后，所有编译、打包生成的文件都放在<code>target</code>目录里。这些就是一个Maven项目的标准目录结构。</p>\n<p>所有的目录结构都是约定好的标准结构，我们千万不要随意修改目录结构。使用标准结构不需要做任何配置，Maven就可以正常使用。</p>\n<p>我们再来看最关键的一个项目描述文件<code>pom.xml</code>，它的内容长得像下面：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project ...&gt;</span><br><span class=\"line\">\t&lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.itranswarp.learnjava&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;hello&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">\t&lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class=\"line\">\t&lt;properties&gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">\t&lt;&#x2F;properties&gt;</span><br><span class=\"line\">\t&lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;commons-logging&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;commons-logging&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.2&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">\t&lt;&#x2F;dependencies&gt;</span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>其中，<code>groupId</code>类似于Java的包名，通常是公司或组织名称，<code>artifactId</code>类似于Java的类名，通常是项目名称，再加上<code>version</code>，一个Maven工程就是由<code>groupId</code>，<code>artifactId</code>和<code>version</code>作为唯一标识。我们在引用其他第三方库的时候，也是通过这3个变量确定。例如，依赖<code>commons-logging</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;commons-logging&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;commons-logging&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>使用<code>&lt;dependency&gt;</code>声明一个依赖后，Maven就会自动下载这个依赖包并把它放到classpath中。</p>\n<h3 id=\"安装Maven\"><a href=\"#安装Maven\" class=\"headerlink\" title=\"安装Maven\"></a>安装Maven</h3><p>要安装Maven，可以从<a href=\"https://maven.apache.org/\">Maven官网</a>下载最新的Maven 3.6.x，然后在本地解压，设置几个环境变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">M2_HOME&#x3D;&#x2F;path&#x2F;to&#x2F;maven-3.6.xPATH&#x3D;$PATH:$M2_HOME&#x2F;bin</span><br></pre></td></tr></table></figure>\n<h2 id=\"依赖管理\"><a href=\"#依赖管理\" class=\"headerlink\" title=\"依赖管理:\"></a>依赖管理:</h2><p>如果我们的项目依赖第三方的jar包，例如commons logging，那么问题来了：commons logging发布的jar包在哪下载？</p>\n<p>如果我们还希望依赖log4j，那么使用log4j需要哪些jar包？</p>\n<p>类似的依赖还包括：JUnit，JavaMail，MySQL驱动等等，一个可行的方法是通过搜索引擎搜索到项目的官网，然后手动下载zip包，解压，放入classpath。但是，这个过程非常繁琐。</p>\n<p>Maven解决了依赖管理问题。例如，我们的项目依赖<code>abc</code>这个jar包，而<code>abc</code>又依赖<code>xyz</code>这个jar包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┌──────────────┐</span><br><span class=\"line\">│Sample Project│</span><br><span class=\"line\">└──────────────┘</span><br><span class=\"line\">        │</span><br><span class=\"line\">        ▼</span><br><span class=\"line\">┌──────────────┐</span><br><span class=\"line\">│     abc      │</span><br><span class=\"line\">└──────────────┘</span><br><span class=\"line\">        │</span><br><span class=\"line\">        ▼</span><br><span class=\"line\">┌──────────────┐</span><br><span class=\"line\">│     xyz      │</span><br><span class=\"line\">└──────────────┘</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>当我们声明了<code>abc</code>的依赖时，Maven自动把<code>abc</code>和<code>xyz</code>都加入了我们的项目依赖，不需要我们自己去研究<code>abc</code>是否需要依赖<code>xyz</code>。</p>\n<p>因此，Maven的第一个作用就是解决依赖管理。我们声明了自己的项目需要<code>abc</code>，Maven会自动导入<code>abc</code>的jar包，再判断出<code>abc</code>需要<code>xyz</code>，又会自动导入<code>xyz</code>的jar包，这样，最终我们的项目会依赖<code>abc</code>和<code>xyz</code>两个jar包。</p>\n<p>我们来看一个复杂依赖示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.4.2.RELEASE&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>当我们声明一个<code>spring-boot-starter-web</code>依赖时，Maven会自动解析并判断最终需要大概二三十个其他依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring-boot-starter-web</span><br><span class=\"line\">  spring-boot-starter</span><br><span class=\"line\">    spring-boot</span><br><span class=\"line\">    sprint-boot-autoconfigure</span><br><span class=\"line\">    spring-boot-starter-logging</span><br><span class=\"line\">      logback-classic</span><br><span class=\"line\">        logback-core</span><br><span class=\"line\">        slf4j-api</span><br><span class=\"line\">      jcl-over-slf4j</span><br><span class=\"line\">        slf4j-api</span><br><span class=\"line\">      jul-to-slf4j</span><br><span class=\"line\">        slf4j-api</span><br><span class=\"line\">      log4j-over-slf4j</span><br><span class=\"line\">        slf4j-api</span><br><span class=\"line\">    spring-core</span><br><span class=\"line\">    snakeyaml</span><br><span class=\"line\">  spring-boot-starter-tomcat</span><br><span class=\"line\">    tomcat-embed-core</span><br><span class=\"line\">    tomcat-embed-el</span><br><span class=\"line\">    tomcat-embed-websocket</span><br><span class=\"line\">      tomcat-embed-core</span><br><span class=\"line\">  jackson-databind</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>如果我们自己去手动管理这些依赖是非常费时费力的，而且出错的概率很大。</p>\n<h3 id=\"依赖关系\"><a href=\"#依赖关系\" class=\"headerlink\" title=\"依赖关系:\"></a>依赖关系:</h3><p>Maven定义了几种依赖关系，分别是<code>compile</code>、<code>test</code>、<code>runtime</code>和<code>provided</code>：</p>\n<p><a href=\"https://www.notion.so/6247453f8f38404c9e697d1c7283ff04\">Untitled</a></p>\n<p>其中，默认的<code>compile</code>是最常用的，Maven会把这种类型的依赖直接放入classpath。</p>\n<p><code>test</code>依赖表示仅在测试时使用，正常运行时并不需要。最常用的<code>test</code>依赖就是JUnit：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.junit.jupiter&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;junit-jupiter-api&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;5.3.2&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>runtime</code>依赖表示编译时不需要，但运行时需要。最典型的<code>runtime</code>依赖是JDBC驱动，例如MySQL驱动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;5.1.48&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>provided</code>依赖表示编译时需要，但运行时不需要。最典型的<code>provided</code>依赖是Servlet API，编译的时候需要，但是运行时，Servlet服务器内置了相关的jar，所以运行期不需要：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;javax.servlet-api&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;4.0.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;scope&gt;provided&lt;&#x2F;scope&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>最后一个问题是，Maven如何知道从何处下载所需的依赖？也就是相关的jar包？答案是Maven维护了一个中央仓库（<a href=\"https://repo1.maven.org/\">repo1.maven.org</a>），所有第三方库将自身的jar以及相关信息上传至中央仓库，Maven就可以从中央仓库把所需依赖下载到本地。</p>\n<p>Maven并不会每次都从中央仓库下载jar包。一个jar包一旦被下载过，就会被Maven自动缓存在本地目录（用户主目录的<code>.m2</code>目录），所以，除了第一次编译时因为下载需要时间会比较慢，后续过程因为有本地缓存，并不会重复下载相同的jar包。</p>\n<h3 id=\"唯一ID\"><a href=\"#唯一ID\" class=\"headerlink\" title=\"唯一ID\"></a>唯一ID</h3><p>对于某个依赖，Maven只需要3个变量即可唯一确定某个jar包：</p>\n<ul>\n<li>groupId：属于组织的名称，类似Java的包名；</li>\n<li>artifactId：该jar包自身的名称，类似Java的类名；</li>\n<li>version：该jar包的版本。</li>\n</ul>\n<p>通过上述3个变量，即可唯一确定某个jar包。Maven通过对jar包进行PGP签名确保任何一个jar包一经发布就无法修改。修改已发布jar包的唯一方法是发布一个新版本。</p>\n<p>因此，某个jar包一旦被Maven下载过，即可永久地安全缓存在本地。</p>\n<p>注：只有以<code>-SNAPSHOT</code>结尾的版本号会被Maven视为开发版本，开发版本每次都会重复下载，这种SNAPSHOT版本只能用于内部私有的Maven repo，公开发布的版本不允许出现SNAPSHOT。</p>\n<h3 id=\"Maven镜像\"><a href=\"#Maven镜像\" class=\"headerlink\" title=\"Maven镜像\"></a>Maven镜像</h3><p>除了可以从Maven的中央仓库下载外，还可以从Maven的镜像仓库下载。如果访问Maven的中央仓库非常慢，我们可以选择一个速度较快的Maven的镜像仓库。Maven镜像仓库定期从中央仓库同步：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">           slow    ┌───────────────────┐</span><br><span class=\"line\">    ┌─────────────&gt;│Maven Central Repo.│</span><br><span class=\"line\">    │              └───────────────────┘</span><br><span class=\"line\">    │                        │</span><br><span class=\"line\">    │                        │sync</span><br><span class=\"line\">    │                        ▼</span><br><span class=\"line\">┌───────┐  fast    ┌───────────────────┐</span><br><span class=\"line\">│ User  │─────────&gt;│Maven Mirror Repo. │</span><br><span class=\"line\">└───────┘          └───────────────────┘</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>中国区用户可以使用阿里云提供的Maven镜像仓库。使用Maven镜像仓库需要一个配置，在用户主目录下进入<code>.m2</code>目录，创建一个<code>settings.xml</code>配置文件，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;settings&gt;</span><br><span class=\"line\">    &lt;mirrors&gt;</span><br><span class=\"line\">        &lt;mirror&gt;</span><br><span class=\"line\">            &lt;id&gt;aliyun&lt;&#x2F;id&gt;</span><br><span class=\"line\">            &lt;name&gt;aliyun&lt;&#x2F;name&gt;</span><br><span class=\"line\">            &lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;</span><br><span class=\"line\">&lt;!-- 国内推荐阿里云的Maven镜像 --&gt;&lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;central&lt;&#x2F;url&gt;</span><br><span class=\"line\">        &lt;&#x2F;mirror&gt;</span><br><span class=\"line\">    &lt;&#x2F;mirrors&gt;</span><br><span class=\"line\">&lt;&#x2F;settings&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>配置镜像仓库后，Maven的下载速度就会非常快。</p>\n<h3 id=\"搜索第三方组件\"><a href=\"#搜索第三方组件\" class=\"headerlink\" title=\"搜索第三方组件\"></a>搜索第三方组件</h3><p>最后一个问题：如果我们要引用一个第三方组件，比如<code>okhttp</code>，如何确切地获得它的<code>groupId</code>、<code>artifactId</code>和<code>version</code>？方法是通过<a href=\"https://search.maven.org/\">search.maven.org</a>搜索关键字，找到对应的组件后，直接复制：</p>\n<p><a href=\"https://www.liaoxuefeng.com/files/attachments/1322179230695490/l\">https://www.liaoxuefeng.com/files/attachments/1322179230695490/l</a></p>\n<h3 id=\"命令行编译\"><a href=\"#命令行编译\" class=\"headerlink\" title=\"命令行编译\"></a>命令行编译</h3><p>在命令中，进入到<code>pom.xml</code>所在目录，输入以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mvn clean package</span><br></pre></td></tr></table></figure>\n<h2 id=\"构建流程\"><a href=\"#构建流程\" class=\"headerlink\" title=\"构建流程:\"></a>构建流程:</h2><h3 id=\"构建流程-1\"><a href=\"#构建流程-1\" class=\"headerlink\" title=\"构建流程\"></a>构建流程</h3><p>Maven不但有标准化的项目结构，而且还有一套标准化的构建流程，可以自动化实现编译，打包，发布，等等。</p>\n<h3 id=\"Lifecycle和Phase\"><a href=\"#Lifecycle和Phase\" class=\"headerlink\" title=\"Lifecycle和Phase\"></a>Lifecycle和Phase</h3><p>使用Maven时，我们首先要了解什么是Maven的生命周期（lifecycle）。</p>\n<p>Maven的生命周期由一系列阶段（phase）构成，以内置的生命周期<code>default</code>为例，它包含以下phase：</p>\n<ul>\n<li>validate</li>\n<li>initialize</li>\n<li>generate-sources</li>\n<li>process-sources</li>\n<li>generate-resources</li>\n<li>process-resources</li>\n<li>compile</li>\n<li>process-classes</li>\n<li>generate-test-sources</li>\n<li>process-test-sources</li>\n<li>generate-test-resources</li>\n<li>process-test-resources</li>\n<li>test-compile</li>\n<li>process-test-classes</li>\n<li>test</li>\n<li>prepare-package</li>\n<li>package</li>\n<li>pre-integration-test</li>\n<li>integration-test</li>\n<li>post-integration-test</li>\n<li>verify</li>\n<li>install</li>\n<li>deploy</li>\n</ul>\n<p>如果我们运行<code>mvn package</code>，Maven就会执行<code>default</code>生命周期，它会从开始一直运行到<code>package</code>这个phase为止：</p>\n<ul>\n<li>validate</li>\n<li>…</li>\n<li>package</li>\n</ul>\n<p>如果我们运行<code>mvn compile</code>，Maven也会执行<code>default</code>生命周期，但这次它只会运行到<code>compile</code>，即以下几个phase：</p>\n<ul>\n<li>validate</li>\n<li>…</li>\n<li>compile</li>\n</ul>\n<p>Maven另一个常用的生命周期是<code>clean</code>，它会执行3个phase：</p>\n<ul>\n<li>pre-clean</li>\n<li>clean （注意这个clean不是lifecycle而是phase）</li>\n<li>post-clean</li>\n</ul>\n<p>所以，我们使用<code>mvn</code>这个命令时，后面的参数是phase，Maven自动根据生命周期运行到指定的phase。</p>\n<p>更复杂的例子是指定多个phase，例如，运行<code>mvn clean package</code>，Maven先执行<code>clean</code>生命周期并运行到<code>clean</code>这个phase，然后执行<code>default</code>生命周期并运行到<code>package</code>这个phase，实际执行的phase如下：</p>\n<ul>\n<li>pre-clean</li>\n<li>clean （注意这个clean是phase）</li>\n<li>validate</li>\n<li>…</li>\n<li>package</li>\n</ul>\n<p>在实际开发过程中，经常使用的命令有：</p>\n<p><code>mvn clean</code>：清理所有生成的class和jar；</p>\n<p><code>mvn clean compile</code>：先清理，再执行到<code>compile</code>；</p>\n<p><code>mvn clean test</code>：先清理，再执行到<code>test</code>，因为执行<code>test</code>前必须执行<code>compile</code>，所以这里不必指定<code>compile</code>；</p>\n<p><code>mvn clean package</code>：先清理，再执行到<code>package</code>。</p>\n<p>大多数phase在执行过程中，因为我们通常没有在<code>pom.xml</code>中配置相关的设置，所以这些phase什么事情都不做。</p>\n<p>经常用到的phase其实只有几个：</p>\n<ul>\n<li>clean：清理</li>\n<li>compile：编译</li>\n<li>test：运行测试</li>\n<li>package：打包</li>\n</ul>\n<h3 id=\"Goal\"><a href=\"#Goal\" class=\"headerlink\" title=\"Goal\"></a>Goal</h3><p>执行一个phase又会触发一个或多个goal：</p>\n<p><a href=\"https://www.notion.so/a20188a3e0174e87a895099f07ad5bf6\">Untitled</a></p>\n<p>goal的命名总是<code>abc:xyz</code>这种形式。</p>\n<p>看到这里，相信大家对lifecycle、phase和goal已经明白了吧？</p>\n<h2 id=\"使用插件\"><a href=\"#使用插件\" class=\"headerlink\" title=\"使用插件:\"></a>使用插件:</h2><p>我们在前面介绍了Maven的lifecycle，phase和goal：使用Maven构建项目就是执行lifecycle，执行到指定的phase为止。每个phase会执行自己默认的一个或多个goal。goal是最小任务单元。</p>\n<p>我们以<code>compile</code>这个phase为例，如果执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn compile</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Maven将执行<code>compile</code>这个phase，这个phase会调用<code>compiler</code>插件执行关联的<code>compiler:compile</code>这个goal。</p>\n<p>实际上，执行每个phase，都是通过某个插件（plugin）来执行的，Maven本身其实并不知道如何执行<code>compile</code>，它只是负责找到对应的<code>compiler</code>插件，然后执行默认的<code>compiler:compile</code>这个goal来完成编译。</p>\n<p>所以，使用Maven，实际上就是配置好需要使用的插件，然后通过phase调用它们。</p>\n<p>Maven已经内置了一些常用的标准插件：</p>\n<p><a href=\"https://www.notion.so/885e77e11f2d4d69af41315dd443f44f\">Untitled</a></p>\n<p>如果标准插件无法满足需求，我们还可以使用自定义插件。使用自定义插件的时候，需要声明。例如，使用<code>maven-shade-plugin</code>可以创建一个可执行的jar，要使用这个插件，需要在<code>pom.xml</code>中声明它：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">\t&lt;build&gt;</span><br><span class=\"line\">\t\t&lt;plugins&gt;</span><br><span class=\"line\">\t\t\t&lt;plugin&gt;</span><br><span class=\"line\">\t\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;artifactId&gt;maven-shade-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;3.2.1&lt;&#x2F;version&gt;</span><br><span class=\"line\">\t\t\t\t&lt;executions&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;execution&gt;</span><br><span class=\"line\">\t\t\t\t\t\t&lt;phase&gt;package&lt;&#x2F;phase&gt;</span><br><span class=\"line\">\t\t\t\t\t\t&lt;goals&gt;</span><br><span class=\"line\">\t\t\t\t\t\t\t&lt;goal&gt;shade&lt;&#x2F;goal&gt;</span><br><span class=\"line\">\t\t\t\t\t\t&lt;&#x2F;goals&gt;</span><br><span class=\"line\">\t\t\t\t\t\t&lt;configuration&gt;</span><br><span class=\"line\">                            ...</span><br><span class=\"line\">\t\t\t\t\t\t&lt;&#x2F;configuration&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;&#x2F;execution&gt;</span><br><span class=\"line\">\t\t\t\t&lt;&#x2F;executions&gt;</span><br><span class=\"line\">\t\t\t&lt;&#x2F;plugin&gt;</span><br><span class=\"line\">\t\t&lt;&#x2F;plugins&gt;</span><br><span class=\"line\">\t&lt;&#x2F;build&gt;</span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>自定义插件往往需要一些配置，例如，<code>maven-shade-plugin</code>需要指定Java程序的入口，它的配置是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;transformers&gt;</span><br><span class=\"line\">        &lt;transformer implementation&#x3D;&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;&gt;</span><br><span class=\"line\">            &lt;mainClass&gt;com.itranswarp.learnjava.Main&lt;&#x2F;mainClass&gt;</span><br><span class=\"line\">        &lt;&#x2F;transformer&gt;</span><br><span class=\"line\">    &lt;&#x2F;transformers&gt;</span><br><span class=\"line\">&lt;&#x2F;configuration&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>注意，Maven自带的标准插件例如<code>compiler</code>是无需声明的，只有引入其它的插件才需要声明。</p>\n<p>下面列举了一些常用的插件：</p>\n<ul>\n<li>maven-shade-plugin：打包所有依赖包并生成可执行jar；</li>\n<li>cobertura-maven-plugin：生成单元测试覆盖率报告；</li>\n<li>findbugs-maven-plugin：对Java源码进行静态分析以找出潜在问题。</li>\n</ul>\n<h2 id=\"模块管理\"><a href=\"#模块管理\" class=\"headerlink\" title=\"模块管理:\"></a>模块管理:</h2><p>在软件开发中，把一个大项目分拆为多个模块是降低软件复杂度的有效方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                        ┌ ─ ─ ─ ─ ─ ─ ┐</span><br><span class=\"line\">                          ┌─────────┐</span><br><span class=\"line\">                        │ │Module A │ │</span><br><span class=\"line\">                          └─────────┘</span><br><span class=\"line\">┌──────────────┐ split  │ ┌─────────┐ │</span><br><span class=\"line\">│Single Project│───────&gt;  │Module B │</span><br><span class=\"line\">└──────────────┘        │ └─────────┘ │</span><br><span class=\"line\">                          ┌─────────┐</span><br><span class=\"line\">                        │ │Module C │ │</span><br><span class=\"line\">                          └─────────┘</span><br><span class=\"line\">                        └ ─ ─ ─ ─ ─ ─ ┘</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>对于Maven工程来说，原来是一个大项目：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">single-project</span><br><span class=\"line\">├── pom.xml</span><br><span class=\"line\">└── src</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>现在可以分拆成3个模块：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutiple-project</span><br><span class=\"line\">├── module-a</span><br><span class=\"line\">│   ├── pom.xml</span><br><span class=\"line\">│   └── src</span><br><span class=\"line\">├── module-b</span><br><span class=\"line\">│   ├── pom.xml</span><br><span class=\"line\">│   └── src</span><br><span class=\"line\">└── module-c</span><br><span class=\"line\">    ├── pom.xml</span><br><span class=\"line\">    └── src</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Maven可以有效地管理多个模块，我们只需要把每个模块当作一个独立的Maven项目，它们有各自独立的<code>pom.xml</code>。例如，模块A的<code>pom.xml</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class=\"line\">    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.itranswarp.learnjava&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;module-a&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;name&gt;module-a&lt;&#x2F;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class=\"line\">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class=\"line\">        &lt;maven.compiler.source&gt;11&lt;&#x2F;maven.compiler.source&gt;</span><br><span class=\"line\">        &lt;maven.compiler.target&gt;11&lt;&#x2F;maven.compiler.target&gt;</span><br><span class=\"line\">        &lt;java.version&gt;11&lt;&#x2F;java.version&gt;</span><br><span class=\"line\">    &lt;&#x2F;properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;slf4j-api&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.7.28&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;ch.qos.logback&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;logback-classic&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.2.3&lt;&#x2F;version&gt;</span><br><span class=\"line\">            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.junit.jupiter&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;junit-jupiter-engine&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;5.5.2&lt;&#x2F;version&gt;</span><br><span class=\"line\">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>模块B的<code>pom.xml</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class=\"line\">    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.itranswarp.learnjava&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;module-b&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;name&gt;module-b&lt;&#x2F;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class=\"line\">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class=\"line\">        &lt;maven.compiler.source&gt;11&lt;&#x2F;maven.compiler.source&gt;</span><br><span class=\"line\">        &lt;maven.compiler.target&gt;11&lt;&#x2F;maven.compiler.target&gt;</span><br><span class=\"line\">        &lt;java.version&gt;11&lt;&#x2F;java.version&gt;</span><br><span class=\"line\">    &lt;&#x2F;properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;slf4j-api&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.7.28&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;ch.qos.logback&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;logback-classic&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.2.3&lt;&#x2F;version&gt;</span><br><span class=\"line\">            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.junit.jupiter&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;junit-jupiter-engine&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;5.5.2&lt;&#x2F;version&gt;</span><br><span class=\"line\">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>可以看出来，模块A和模块B的<code>pom.xml</code>高度相似，因此，我们可以提取出共同部分作为<code>parent</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class=\"line\">    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.itranswarp.learnjava&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;parent&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;pom&lt;&#x2F;packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;name&gt;parent&lt;&#x2F;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class=\"line\">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class=\"line\">        &lt;maven.compiler.source&gt;11&lt;&#x2F;maven.compiler.source&gt;</span><br><span class=\"line\">        &lt;maven.compiler.target&gt;11&lt;&#x2F;maven.compiler.target&gt;</span><br><span class=\"line\">        &lt;java.version&gt;11&lt;&#x2F;java.version&gt;</span><br><span class=\"line\">    &lt;&#x2F;properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;slf4j-api&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.7.28&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;ch.qos.logback&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;logback-classic&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.2.3&lt;&#x2F;version&gt;</span><br><span class=\"line\">            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.junit.jupiter&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;junit-jupiter-engine&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;5.5.2&lt;&#x2F;version&gt;</span><br><span class=\"line\">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>注意到parent的<code>&lt;packaging&gt;</code>是<code>pom</code>而不是<code>jar</code>，因为<code>parent</code>本身不含任何Java代码。编写<code>parent</code>的<code>pom.xml</code>只是为了在各个模块中减少重复的配置。现在我们的整个工程结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">multiple-project</span><br><span class=\"line\">├── pom.xml</span><br><span class=\"line\">├── parent</span><br><span class=\"line\">│   └── pom.xml</span><br><span class=\"line\">├── module-a</span><br><span class=\"line\">│   ├── pom.xml</span><br><span class=\"line\">│   └── src</span><br><span class=\"line\">├── module-b</span><br><span class=\"line\">│   ├── pom.xml</span><br><span class=\"line\">│   └── src</span><br><span class=\"line\">└── module-c</span><br><span class=\"line\">    ├── pom.xml</span><br><span class=\"line\">    └── src</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这样模块A就可以简化为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class=\"line\">    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.itranswarp.learnjava&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;parent&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;relativePath&gt;..&#x2F;parent&#x2F;pom.xml&lt;&#x2F;relativePath&gt;</span><br><span class=\"line\">    &lt;&#x2F;parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;artifactId&gt;module-a&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class=\"line\">    &lt;name&gt;module-a&lt;&#x2F;name&gt;</span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>模块B、模块C都可以直接从<code>parent</code>继承，大幅简化了<code>pom.xml</code>的编写。</p>\n<p>如果模块A依赖模块B，则模块A需要模块B的jar包才能正常编译，我们需要在模块A中引入模块B：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.itranswarp.learnjava&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;module-b&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;&#x2F;dependencies&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>最后，在编译的时候，需要在根目录创建一个<code>pom.xml</code>统一编译：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class=\"line\">    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;maven-v4_0_0.xsd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.itranswarp.learnjava&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;build&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;pom&lt;&#x2F;packaging&gt;</span><br><span class=\"line\">    &lt;name&gt;build&lt;&#x2F;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;modules&gt;</span><br><span class=\"line\">        &lt;module&gt;parent&lt;&#x2F;module&gt;</span><br><span class=\"line\">        &lt;module&gt;module-a&lt;&#x2F;module&gt;</span><br><span class=\"line\">        &lt;module&gt;module-b&lt;&#x2F;module&gt;</span><br><span class=\"line\">        &lt;module&gt;module-c&lt;&#x2F;module&gt;</span><br><span class=\"line\">    &lt;&#x2F;modules&gt;</span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这样，在根目录执行<code>mvn clean package</code>时，Maven根据根目录的<code>pom.xml</code>找到包括<code>parent</code>在内的共4个<code>&lt;module&gt;</code>，一次性全部编译。</p>\n<h3 id=\"中央仓库\"><a href=\"#中央仓库\" class=\"headerlink\" title=\"中央仓库\"></a>中央仓库</h3><p>其实我们使用的大多数第三方模块都是这个用法，例如，我们使用commons logging、log4j这些第三方模块，就是第三方模块的开发者自己把编译好的jar包发布到Maven的中央仓库中。</p>\n<h3 id=\"私有仓库\"><a href=\"#私有仓库\" class=\"headerlink\" title=\"私有仓库\"></a>私有仓库</h3><p>私有仓库是指公司内部如果不希望把源码和jar包放到公网上，那么可以搭建私有仓库。私有仓库总是在公司内部使用，它只需要在本地的<code>~/.m2/settings.xml</code>中配置好，使用方式和中央仓位没有任何区别。</p>\n<h3 id=\"本地仓库\"><a href=\"#本地仓库\" class=\"headerlink\" title=\"本地仓库\"></a>本地仓库</h3><p>本地仓库是指把本地开发的项目“发布”在本地，这样其他项目可以通过本地仓库引用它。但是我们不推荐把自己的模块安装到Maven的本地仓库，因为每次修改某个模块的源码，都需要重新安装，非常容易出现版本不一致的情况。更好的方法是使用模块化编译，在编译的时候，告诉Maven几个模块之间存在依赖关系，需要一块编译，Maven就会自动按依赖顺序编译这些模块。</p>\n<h2 id=\"使用mvnw\"><a href=\"#使用mvnw\" class=\"headerlink\" title=\"使用mvnw:\"></a>使用mvnw:</h2><p>我们使用Maven时，基本上只会用到<code>mvn</code>这一个命令。有些童鞋可能听说过<code>mvnw</code>，这个是啥？</p>\n<p><code>mvnw</code>是Maven Wrapper的缩写。因为我们安装Maven时，默认情况下，系统所有项目都会使用全局安装的这个Maven版本。但是，对于某些项目来说，它可能必须使用某个特定的Maven版本，这个时候，就可以使用Maven Wrapper，它可以负责给这个特定的项目安装指定版本的Maven，而其他项目不受影响。</p>\n<p>简单地说，Maven Wrapper就是给一个项目提供一个独立的，指定版本的Maven给它使用。</p>\n<h3 id=\"安装Maven-Wrapper\"><a href=\"#安装Maven-Wrapper\" class=\"headerlink\" title=\"安装Maven Wrapper\"></a>安装Maven Wrapper</h3><p>安装Maven Wrapper最简单的方式是在项目的根目录（即<code>pom.xml</code>所在的目录）下运行安装命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn -N io.takari:maven:0.7.6:wrapper</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>它会自动使用最新版本的Maven。注意<code>0.7.6</code>是Maven Wrapper的版本。最新的Maven Wrapper版本可以去<a href=\"https://github.com/takari/maven-wrapper\">官方网站</a>查看。</p>\n<p>如果要指定使用的Maven版本，使用下面的安装命令指定版本，例如<code>3.3.3</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn -N io.takari:maven:0.7.6:wrapper -Dmaven&#x3D;3.3.3</span><br></pre></td></tr></table></figure>\n<p>安装后，查看项目结构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my-project</span><br><span class=\"line\">├── .mvn</span><br><span class=\"line\">│   └── wrapper</span><br><span class=\"line\">│       ├── MavenWrapperDownloader.java</span><br><span class=\"line\">│       ├── maven-wrapper.jar</span><br><span class=\"line\">│       └── maven-wrapper.properties</span><br><span class=\"line\">├── mvnw</span><br><span class=\"line\">├── mvnw.cmd</span><br><span class=\"line\">├── pom.xml</span><br><span class=\"line\">└── src</span><br><span class=\"line\">    ├── main</span><br><span class=\"line\">    │   ├── java</span><br><span class=\"line\">    │   └── resources</span><br><span class=\"line\">    └── test</span><br><span class=\"line\">        ├── java</span><br><span class=\"line\">        └── resources</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>发现多了<code>mvnw</code>、<code>mvnw.cmd</code>和<code>.mvn</code>目录，我们只需要把<code>mvn</code>命令改成<code>mvnw</code>就可以使用跟项目关联的Maven。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvnw cleanpackage</span><br></pre></td></tr></table></figure>\n<p>在Linux或macOS下运行时需要加上<code>./</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;mvnw cleanpackage</span><br></pre></td></tr></table></figure>\n<p>Maven Wrapper的另一个作用是把项目的<code>mvnw</code>、<code>mvnw.cmd</code>和<code>.mvn</code>提交到版本库中，可以使所有开发人员使用统一的Maven版本。</p>\n<h2 id=\"发布Artifact\"><a href=\"#发布Artifact\" class=\"headerlink\" title=\"发布Artifact:\"></a>发布Artifact:</h2><p>当我们使用<code>commons-logging</code>这些第三方开源库的时候，我们实际上是通过Maven自动下载它的jar包，并根据其<code>pom.xml</code>解析依赖，自动把相关依赖包都下载后加入到classpath。</p>\n<p>那么问题来了：当我们自己写了一个牛逼的开源库时，非常希望别人也能使用，总不能直接放个jar包的链接让别人下载吧？</p>\n<p>如果我们把自己的开源库放到Maven的repo中，那么，别人只需按标准引用<code>groupId:artifactId:version</code>，即可自动下载jar包以及相关依赖。因此，本节我们介绍如何发布一个库到Maven的repo中。</p>\n<p>把自己的库发布到Maven的repo中有好几种方法，我们介绍3种最常用的方法。</p>\n<h3 id=\"以静态文件发布\"><a href=\"#以静态文件发布\" class=\"headerlink\" title=\"以静态文件发布\"></a>以静态文件发布</h3><p>如果我们观察一个中央仓库的Artifact结构，例如<a href=\"https://commons.apache.org/proper/commons-math/\">Commons Math</a>，它的groupId是<code>org.apache.commons</code>，artifactId是<code>commons-math3</code>，以版本<code>3.6.1</code>为例，发布在中央仓库的文件夹路径就是<a href=\"https://repo1.maven.org/maven2/org/apache/commons/commons-math3/3.6.1/\">https://repo1.maven.org/maven2/org/apache/commons/commons-math3/3.6.1/</a>，在此文件夹下，<code>commons-math3-3.6.1.jar</code>就是发布的jar包，<code>commons-math3-3.6.1.pom</code>就是它的<code>pom.xml</code>描述文件，<code>commons-math3-3.6.1-sources.jar</code>是源代码，<code>commons-math3-3.6.1-javadoc.jar</code>是文档。其它以<code>.asc</code>、<code>.md5</code>、<code>.sha1</code>结尾的文件分别是GPG签名、MD5摘要和SHA-1摘要。</p>\n<p>我们只要按照这种目录结构组织文件，它就是一个有效的Maven仓库。</p>\n<p>我们以广受好评的开源项目<a href=\"https://github.com/michaelliao/how-to-become-rich\">how-to-become-rich</a>为例，先创建Maven工程目录结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">how-to-become-rich</span><br><span class=\"line\">├── maven-repo        &lt;-- Maven本地文件仓库</span><br><span class=\"line\">├── pom.xml           &lt;-- 项目文件</span><br><span class=\"line\">├── src</span><br><span class=\"line\">│   ├── main</span><br><span class=\"line\">│   │   ├── java      &lt;-- 源码目录</span><br><span class=\"line\">│   │   └── resources &lt;-- 资源目录</span><br><span class=\"line\">│   └── test</span><br><span class=\"line\">│       ├── java      &lt;-- 测试源码目录</span><br><span class=\"line\">│       └── resources &lt;-- 测试资源目录</span><br><span class=\"line\">└── target            &lt;-- 编译输出目录</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在<code>pom.xml</code>中添加如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project ...&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &lt;distributionManagement&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;local-repo-release&lt;&#x2F;id&gt;</span><br><span class=\"line\">            &lt;name&gt;GitHub Release&lt;&#x2F;name&gt;</span><br><span class=\"line\">            &lt;url&gt;file:&#x2F;&#x2F;$&#123;project.basedir&#125;&#x2F;maven-repo&lt;&#x2F;url&gt;</span><br><span class=\"line\">        &lt;&#x2F;repository&gt;</span><br><span class=\"line\">    &lt;&#x2F;distributionManagement&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;maven-source-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">                &lt;executions&gt;</span><br><span class=\"line\">                    &lt;execution&gt;</span><br><span class=\"line\">                        &lt;id&gt;attach-sources&lt;&#x2F;id&gt;</span><br><span class=\"line\">                        &lt;phase&gt;package&lt;&#x2F;phase&gt;</span><br><span class=\"line\">                        &lt;goals&gt;</span><br><span class=\"line\">                            &lt;goal&gt;jar-no-fork&lt;&#x2F;goal&gt;</span><br><span class=\"line\">                        &lt;&#x2F;goals&gt;</span><br><span class=\"line\">                    &lt;&#x2F;execution&gt;</span><br><span class=\"line\">                &lt;&#x2F;executions&gt;</span><br><span class=\"line\">            &lt;&#x2F;plugin&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;maven-javadoc-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">                &lt;executions&gt;</span><br><span class=\"line\">                    &lt;execution&gt;</span><br><span class=\"line\">                        &lt;id&gt;attach-javadocs&lt;&#x2F;id&gt;</span><br><span class=\"line\">                        &lt;phase&gt;package&lt;&#x2F;phase&gt;</span><br><span class=\"line\">                        &lt;goals&gt;</span><br><span class=\"line\">                            &lt;goal&gt;jar&lt;&#x2F;goal&gt;</span><br><span class=\"line\">                        &lt;&#x2F;goals&gt;</span><br><span class=\"line\">                    &lt;&#x2F;execution&gt;</span><br><span class=\"line\">                &lt;&#x2F;executions&gt;</span><br><span class=\"line\">            &lt;&#x2F;plugin&gt;</span><br><span class=\"line\">        &lt;&#x2F;plugins&gt;</span><br><span class=\"line\">    &lt;&#x2F;build&gt;</span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>注意到<code>&lt;distributionManagement&gt;</code>，它指示了发布的软件包的位置，这里的<code>&lt;url&gt;</code>是项目根目录下的<code>maven-repo</code>目录，在<code>&lt;build&gt;</code>中定义的两个插件<code>maven-source-plugin</code>和<code>maven-javadoc-plugin</code>分别用来创建源码和javadoc，如果不想发布源码，可以把对应的插件去掉。</p>\n<p>我们直接在项目根目录下运行Maven命令<code>mvn clean package deploy</code>，如果一切顺利，我们就可以在<code>maven-repo</code>目录下找到部署后的所有文件如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maven-repo</span><br><span class=\"line\">└── com</span><br><span class=\"line\">    └── itranswarp</span><br><span class=\"line\">        └── rich</span><br><span class=\"line\">            └── how-to-become-rich</span><br><span class=\"line\">                ├── 1.0.0</span><br><span class=\"line\">                │   ├── how-to-become-rich-1.0.0-javadoc.jar</span><br><span class=\"line\">                │   ├── how-to-become-rich-1.0.0-javadoc.jar.md5</span><br><span class=\"line\">                │   ├── how-to-become-rich-1.0.0-javadoc.jar.sha1</span><br><span class=\"line\">                │   ├── how-to-become-rich-1.0.0-sources.jar</span><br><span class=\"line\">                │   ├── how-to-become-rich-1.0.0-sources.jar.md5</span><br><span class=\"line\">                │   ├── how-to-become-rich-1.0.0-sources.jar.sha1</span><br><span class=\"line\">                │   ├── how-to-become-rich-1.0.0.jar</span><br><span class=\"line\">                │   ├── how-to-become-rich-1.0.0.jar.md5</span><br><span class=\"line\">                │   ├── how-to-become-rich-1.0.0.jar.sha1</span><br><span class=\"line\">                │   ├── how-to-become-rich-1.0.0.pom</span><br><span class=\"line\">                │   ├── how-to-become-rich-1.0.0.pom.md5</span><br><span class=\"line\">                │   └── how-to-become-rich-1.0.0.pom.sha1</span><br><span class=\"line\">                ├── maven-metadata.xml</span><br><span class=\"line\">                ├── maven-metadata.xml.md5</span><br><span class=\"line\">                └── maven-metadata.xml.sha1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>最后一步，是把这个工程推到GitHub上，并选择<code>Settings</code>-<code>GitHub Pages</code>，选择<code>master branch</code>启用Pages服务：</p>\n<p><img src=\"learn-maven%20eb9d5ffa7bae4b5bb1e0874b7f871af4/Untitled.png\" alt=\"learn-maven%20eb9d5ffa7bae4b5bb1e0874b7f871af4/Untitled.png\"></p>\n<p>这样，把全部内容推送至GitHub后，即可作为静态网站访问Maven的repo，它的地址是<a href=\"https://michaelliao.github.io/how-to-become-rich/maven-repo/\">https://michaelliao.github.io/how-to-become-rich/maven-repo/</a>。版本<code>1.0.0</code>对应的jar包地址是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;michaelliao.github.io&#x2F;how-to-become-rich&#x2F;maven-repo&#x2F;com&#x2F;itranswarp&#x2F;rich&#x2F;how-to-become-rich&#x2F;1.0.0&#x2F;how-to-become-rich-1.0.0.jar</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>现在，如果其他人希望引用这个Maven包，我们可以告知如下依赖即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.itranswarp.rich&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;how-to-become-rich&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>但是，除了正常导入依赖外，对方还需要再添加一个<code>&lt;repository&gt;</code>的声明，即使用方完整的<code>pom.xml</code>如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class=\"line\">    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;example&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;how-to-become-rich-usage&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;maven.compiler.source&gt;11&lt;&#x2F;maven.compiler.source&gt;</span><br><span class=\"line\">        &lt;maven.compiler.target&gt;11&lt;&#x2F;maven.compiler.target&gt;</span><br><span class=\"line\">        &lt;java.version&gt;11&lt;&#x2F;java.version&gt;</span><br><span class=\"line\">    &lt;&#x2F;properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;repositories&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;github-rich-repo&lt;&#x2F;id&gt;</span><br><span class=\"line\">            &lt;name&gt;The Maven Repository on Github&lt;&#x2F;name&gt;</span><br><span class=\"line\">            &lt;url&gt;https:&#x2F;&#x2F;michaelliao.github.io&#x2F;how-to-become-rich&#x2F;maven-repo&#x2F;&lt;&#x2F;url&gt;</span><br><span class=\"line\">        &lt;&#x2F;repository&gt;</span><br><span class=\"line\">    &lt;&#x2F;repositories&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;com.itranswarp.rich&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;how-to-become-rich&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.0.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在<code>&lt;repository&gt;</code>中，我们必须声明发布的Maven的repo地址，其中<code>&lt;id&gt;</code>和<code>&lt;name&gt;</code>可以任意填写，<code>&lt;url&gt;</code>填入GitHub Pages提供的地址+<code>/maven-repo/</code>后缀。现在，即可正常引用这个库并编写代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Millionaire millionaire &#x3D;new Millionaire();</span><br><span class=\"line\">System.out.println(millionaire.howToBecomeRich());</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>有的童鞋会问，为什么使用<code>commons-logging</code>等第三方库时，并不需要声明repo地址？这是因为这些库都是发布到Maven中央仓库的，发布到中央仓库后，不需要告诉Maven仓库地址，因为它知道中央仓库的地址默认是<a href=\"https://repo1.maven.org/maven2/\">https://repo1.maven.org/maven2/</a>，也可以通过<code>~/.m2/settings.xml</code>指定一个代理仓库地址以替代中央仓库来提高速度（参考<a href=\"https://www.liaoxuefeng.com/wiki/1252599548343744/1309301178105890\">依赖管理</a>的Maven镜像）。</p>\n<p>因为GitHub Pages并不会把我们发布的Maven包同步到中央仓库，所以自然使用方必须手动添加一个我们提供的仓库地址。</p>\n<p>此外，通过GitHub Pages发布Maven repo时需要注意一点，即不要改动已发布的版本。因为Maven的仓库是不允许修改任何版本的，对一个库进行修改的唯一方法是发布一个新版本。但是通过静态文件的方式发布repo，实际上我们是可以修改jar文件的，但最好遵守规范，不要修改已发布版本。</p>\n<h3 id=\"通过Nexus发布到中央仓库\"><a href=\"#通过Nexus发布到中央仓库\" class=\"headerlink\" title=\"通过Nexus发布到中央仓库\"></a>通过Nexus发布到中央仓库</h3><p>有的童鞋会问，能不能把自己的开源库发布到Maven的中央仓库，这样用户就不需要声明repo地址，可以直接引用，显得更专业。</p>\n<p>当然可以，但我们不能直接发布到Maven中央仓库，而是通过曲线救国的方式，发布到<a href=\"https://central.sonatype.org/\">central.sonatype.org</a>，它会定期自动同步到Maven的中央仓库。<a href=\"https://www.sonatype.com/nexus-repository-oss\">Nexus</a>是一个支持Maven仓库的软件，由Sonatype开发，有免费版和专业版两个版本，很多大公司内部都使用Nexus作为自己的私有Maven仓库，而这个<a href=\"https://central.sonatype.org/\">central.sonatype.org</a>相当于面向开源的一个Nexus公共服务。</p>\n<p>所以，第一步是在<a href=\"https://central.sonatype.org/\">central.sonatype.org</a>上注册一个账号，注册链接非常隐蔽，可以自己先找找，找半小时没找到点这里查看攻略。</p>\n<p>如果注册顺利并审核通过，会得到一个登录账号，然后，通过<a href=\"https://central.sonatype.org/pages/apache-maven.html\">这个页面</a>一步一步操作就可以成功地将自己的Artifact发布到Nexus上，再耐心等待几个小时后，你的Artifact就会出现在Maven的中央仓库中。</p>\n<p>这里简单提一下发布重点与难点：</p>\n<ul>\n<li>必须正确创建GPG签名，Linux和Mac下推荐使用gnupg2；</li>\n<li>必须在<code>~/.m2/settings.xml</code>中配置好登录用户名和口令，以及GPG口令：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;settings ...&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &lt;servers&gt;</span><br><span class=\"line\">        &lt;server&gt;</span><br><span class=\"line\">            &lt;id&gt;ossrh&lt;&#x2F;id&gt;</span><br><span class=\"line\">            &lt;username&gt;OSSRH-USERNAME&lt;&#x2F;username&gt;</span><br><span class=\"line\">            &lt;password&gt;OSSRH-PASSWORD&lt;&#x2F;password&gt;</span><br><span class=\"line\">        &lt;&#x2F;server&gt;</span><br><span class=\"line\">    &lt;&#x2F;servers&gt;</span><br><span class=\"line\">    &lt;profiles&gt;</span><br><span class=\"line\">        &lt;profile&gt;</span><br><span class=\"line\">            &lt;id&gt;ossrh&lt;&#x2F;id&gt;</span><br><span class=\"line\">            &lt;activation&gt;</span><br><span class=\"line\">                &lt;activeByDefault&gt;true&lt;&#x2F;activeByDefault&gt;</span><br><span class=\"line\">            &lt;&#x2F;activation&gt;</span><br><span class=\"line\">            &lt;properties&gt;</span><br><span class=\"line\">                &lt;gpg.executable&gt;gpg2&lt;&#x2F;gpg.executable&gt;</span><br><span class=\"line\">                &lt;gpg.passphrase&gt;GPG-PASSWORD&lt;&#x2F;gpg.passphrase&gt;</span><br><span class=\"line\">            &lt;&#x2F;properties&gt;</span><br><span class=\"line\">        &lt;&#x2F;profile&gt;</span><br><span class=\"line\">    &lt;&#x2F;profiles&gt;</span><br><span class=\"line\">&lt;&#x2F;settings&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在待发布的Artifact的<code>pom.xml</code>中添加OSS的Maven repo地址，以及<code>maven-jar-plugin</code>、<code>maven-source-plugin</code>、<code>maven-javadoc-plugin</code>、<code>maven-gpg-plugin</code>、<code>nexus-staging-maven-plugin</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project ...&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &lt;distributionManagement&gt;</span><br><span class=\"line\">        &lt;snapshotRepository&gt;</span><br><span class=\"line\">            &lt;id&gt;ossrh&lt;&#x2F;id&gt;</span><br><span class=\"line\">            &lt;url&gt;https:&#x2F;&#x2F;oss.sonatype.org&#x2F;content&#x2F;repositories&#x2F;snapshots&lt;&#x2F;url&gt;</span><br><span class=\"line\">        &lt;&#x2F;snapshotRepository&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;ossrh&lt;&#x2F;id&gt;</span><br><span class=\"line\">            &lt;name&gt;Nexus Release Repository&lt;&#x2F;name&gt;</span><br><span class=\"line\">            &lt;url&gt;http:&#x2F;&#x2F;oss.sonatype.org&#x2F;service&#x2F;local&#x2F;staging&#x2F;deploy&#x2F;maven2&#x2F;&lt;&#x2F;url&gt;</span><br><span class=\"line\">        &lt;&#x2F;repository&gt;</span><br><span class=\"line\">    &lt;&#x2F;distributionManagement&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;maven-jar-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">                &lt;executions&gt;</span><br><span class=\"line\">                    &lt;execution&gt;</span><br><span class=\"line\">                        &lt;goals&gt;</span><br><span class=\"line\">                            &lt;goal&gt;jar&lt;&#x2F;goal&gt;</span><br><span class=\"line\">                            &lt;goal&gt;test-jar&lt;&#x2F;goal&gt;</span><br><span class=\"line\">                        &lt;&#x2F;goals&gt;</span><br><span class=\"line\">                    &lt;&#x2F;execution&gt;</span><br><span class=\"line\">                &lt;&#x2F;executions&gt;</span><br><span class=\"line\">            &lt;&#x2F;plugin&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;maven-source-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">                &lt;executions&gt;</span><br><span class=\"line\">                    &lt;execution&gt;</span><br><span class=\"line\">                        &lt;id&gt;attach-sources&lt;&#x2F;id&gt;</span><br><span class=\"line\">                        &lt;goals&gt;</span><br><span class=\"line\">                            &lt;goal&gt;jar-no-fork&lt;&#x2F;goal&gt;</span><br><span class=\"line\">                        &lt;&#x2F;goals&gt;</span><br><span class=\"line\">                    &lt;&#x2F;execution&gt;</span><br><span class=\"line\">                &lt;&#x2F;executions&gt;</span><br><span class=\"line\">            &lt;&#x2F;plugin&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;maven-javadoc-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">                &lt;executions&gt;</span><br><span class=\"line\">                    &lt;execution&gt;</span><br><span class=\"line\">                        &lt;id&gt;attach-javadocs&lt;&#x2F;id&gt;</span><br><span class=\"line\">                        &lt;goals&gt;</span><br><span class=\"line\">                            &lt;goal&gt;jar&lt;&#x2F;goal&gt;</span><br><span class=\"line\">                        &lt;&#x2F;goals&gt;</span><br><span class=\"line\">                        &lt;configuration&gt;</span><br><span class=\"line\">                            &lt;additionalOption&gt;</span><br><span class=\"line\">                                &lt;additionalOption&gt;-Xdoclint:none&lt;&#x2F;additionalOption&gt;</span><br><span class=\"line\">                            &lt;&#x2F;additionalOption&gt;</span><br><span class=\"line\">                        &lt;&#x2F;configuration&gt;</span><br><span class=\"line\">                    &lt;&#x2F;execution&gt;</span><br><span class=\"line\">                &lt;&#x2F;executions&gt;</span><br><span class=\"line\">            &lt;&#x2F;plugin&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;maven-gpg-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">                &lt;executions&gt;</span><br><span class=\"line\">                    &lt;execution&gt;</span><br><span class=\"line\">                        &lt;id&gt;sign-artifacts&lt;&#x2F;id&gt;</span><br><span class=\"line\">                        &lt;phase&gt;verify&lt;&#x2F;phase&gt;</span><br><span class=\"line\">                        &lt;goals&gt;</span><br><span class=\"line\">                            &lt;goal&gt;sign&lt;&#x2F;goal&gt;</span><br><span class=\"line\">                        &lt;&#x2F;goals&gt;</span><br><span class=\"line\">                    &lt;&#x2F;execution&gt;</span><br><span class=\"line\">                &lt;&#x2F;executions&gt;</span><br><span class=\"line\">            &lt;&#x2F;plugin&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.sonatype.plugins&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;nexus-staging-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;1.6.3&lt;&#x2F;version&gt;</span><br><span class=\"line\">                &lt;extensions&gt;true&lt;&#x2F;extensions&gt;</span><br><span class=\"line\">                &lt;configuration&gt;</span><br><span class=\"line\">                    &lt;serverId&gt;ossrh&lt;&#x2F;serverId&gt;</span><br><span class=\"line\">                    &lt;nexusUrl&gt;https:&#x2F;&#x2F;oss.sonatype.org&#x2F;&lt;&#x2F;nexusUrl&gt;</span><br><span class=\"line\">                    &lt;autoReleaseAfterClose&gt;true&lt;&#x2F;autoReleaseAfterClose&gt;</span><br><span class=\"line\">                &lt;&#x2F;configuration&gt;</span><br><span class=\"line\">            &lt;&#x2F;plugin&gt;</span><br><span class=\"line\">        &lt;&#x2F;plugins&gt;</span><br><span class=\"line\">    &lt;&#x2F;build&gt;</span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>最后执行命令<code>mvn clean package deploy</code>即可发布至<a href=\"https://central.sonatype.org/\">central.sonatype.org</a>。</p>\n<p>此方法前期需要复杂的申请账号和项目的流程，后期需要安装调试GPG，但只要跑通流程，后续发布都只需要一行命令。</p>\n<h3 id=\"发布到私有仓库\"><a href=\"#发布到私有仓库\" class=\"headerlink\" title=\"发布到私有仓库\"></a>发布到私有仓库</h3><p>通过<code>nexus-staging-maven-plugin</code>除了可以发布到<a href=\"https://central.sonatype.org/\">central.sonatype.org</a>外，也可以发布到私有仓库，例如，公司内部自己搭建的Nexus服务器。</p>\n<p>如果没有私有Nexus服务器，还可以发布到<a href=\"https://github.com/features/packages\">GitHub Packages</a>。GitHub Packages是GitHub提供的仓库服务，支持Maven、NPM、Docker等。使用GitHub Packages时，无论是发布Artifact，还是引用已发布的Artifact，都需要明确的授权Token，因此，GitHub Packages只能作为私有仓库使用。</p>\n<p>在发布前，我们必须首先登录后在用户的<code>Settings</code>-<code>Developer settings</code>-<code>Personal access tokens</code>中创建两个Token，一个用于发布，一个用于使用。发布Artifact的Token必须有<code>repo</code>、<code>write:packages</code>和<code>read:packages</code>权限：</p>\n<p><a href=\"https://www.liaoxuefeng.com/files/attachments/1347999282233410/l\">https://www.liaoxuefeng.com/files/attachments/1347999282233410/l</a></p>\n<p>使用Artifact的Token只需要<code>read:packages</code>权限。</p>\n<p>在发布端，把GitHub的用户名和发布Token写入<code>~/.m2/settings.xml</code>配置中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;settings ...&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &lt;servers&gt;</span><br><span class=\"line\">        &lt;server&gt;</span><br><span class=\"line\">            &lt;id&gt;github-release&lt;&#x2F;id&gt;</span><br><span class=\"line\">            &lt;username&gt;GITHUB-USERNAME&lt;&#x2F;username&gt;</span><br><span class=\"line\">            &lt;password&gt;f052...c21f&lt;&#x2F;password&gt;</span><br><span class=\"line\">        &lt;&#x2F;server&gt;</span><br><span class=\"line\">    &lt;&#x2F;servers&gt;</span><br><span class=\"line\">&lt;&#x2F;settings&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>然后，在需要发布的Artifact的<code>pom.xml</code>中，添加一个<code>&lt;repository&gt;</code>声明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project ...&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &lt;distributionManagement&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;github-release&lt;&#x2F;id&gt;</span><br><span class=\"line\">            &lt;name&gt;GitHub Release&lt;&#x2F;name&gt;</span><br><span class=\"line\">            &lt;url&gt;https:&#x2F;&#x2F;maven.pkg.github.com&#x2F;michaelliao&#x2F;complex&lt;&#x2F;url&gt;</span><br><span class=\"line\">        &lt;&#x2F;repository&gt;</span><br><span class=\"line\">    &lt;&#x2F;distributionManagement&gt;</span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>注意到<code>&lt;id&gt;</code>和<code>~/.m2/settings.xml</code>配置中的<code>&lt;id&gt;</code>要保持一致，因为发布时Maven根据id找到用于登录的用户名和Token，才能成功上传文件到GitHub。我们直接通过命令<code>mvn clean package deploy</code>部署，成功后，在GitHub用户页面可以看到该Artifact：</p>\n<p><a href=\"https://www.liaoxuefeng.com/files/attachments/1348000710393922/l\">https://www.liaoxuefeng.com/files/attachments/1348000710393922/l</a></p>\n<p>完整的配置请参考<a href=\"https://github.com/michaelliao/complex/\">complex</a>项目，这是一个非常简单的支持复数运算的库。</p>\n<p>使用该Artifact时，因为GitHub的Package只能作为私有仓库使用，所以除了在使用方的<code>pom.xml</code>中声明<code>&lt;repository&gt;</code>外：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project ...&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &lt;repositories&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;github-release&lt;&#x2F;id&gt;</span><br><span class=\"line\">            &lt;name&gt;GitHub Release&lt;&#x2F;name&gt;</span><br><span class=\"line\">            &lt;url&gt;https:&#x2F;&#x2F;maven.pkg.github.com&#x2F;michaelliao&#x2F;complex&lt;&#x2F;url&gt;</span><br><span class=\"line\">        &lt;&#x2F;repository&gt;</span><br><span class=\"line\">    &lt;&#x2F;repositories&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;com.itranswarp&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;complex&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.0.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&lt;&#x2F;project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>还需要把有读权限的Token配置到<code>~/.m2/settings.xml</code>文件中。</p>\n"},{"title":"Dubbo学习笔记","date":"2021-08-13T02:00:41.000Z","comments":1,"thumbnail":"logo.jpeg","banner":"logo.jpeg","cover":"2021/08/13/Dubbo学习笔记/logo.jpeg","_content":"\n# 一、基本知识\n\n## 1 分布式基础理论\n\n### 1.1什么是分布式\n\n分布式系统是若干个独立计算机的集合，，计算机对于用户来说就像个单个系统，建立在网络上的软件系统。\n\n随着互联网的发展，规模不断扩大，垂直应用架构无法应付，需要一个治理系统确保架构有条不紊的演进。\n\ndubbo作用：治理和维护各个分系统。\n\n ### 1.2 发展演变：\n\n![Untitled.png](Untitled.png)\n\n**单一应用架构：**\n\n流量小时，所有功能放到一起，减少部署节点和成本。\n\n![Untitled%201.png](Untitled%201.png)\n\n缺点：\n\n扩展不容易，需要重新打包重新部署\n\n协同开发不容易\n\n扩大性能提升不容易\n\n**垂直应用架构：**\n\n小功能独立为单个应用，部署在多个服务器上\n\n![Untitled%202.png](Untitled%202.png)\n\n优点：\n\n分工合作容易，分别负责开发\n\n性能扩展容易，多部署到几个服务器\n\n缺点：\n\n单个应用从头到尾都有的，包括页面逻辑和数据库。但是市场上界面改变快，改了需要重新部署，没法做到页面和业务逻辑的分离\n\n垂直应用越来越多，不可能完全应用于应用完全独立。用户调用订单和商品，物流调用订单等。应用之间需要交互\n\n**分布式服务架构：**\n\n核心业务单独抽取出来，用户应用抽取为页面和业务逻辑。当业务逻辑不变时只改界面，界面重新部署就行了。\n\n![Untitled%203.png](Untitled%203.png)\n\n问题：\n\n用户web可能再A服务器上，业务再B服务器。如果A服务器调用B服务器功能时，因为不在一个进程内，分隔异地了，这2个代码调用需要RPC远程过程调用。\n\n难点：\n\n如何远程过程调用\n\n如何拆分业务，增加业务的复用程度\n\n好的分布式服务框架（RPC），应该有调度中心，来实时的监控业务中心实现动态调度，增加利用率，当某一个业务调用多了，可以让更多的服务器来跑业务量更大的业务，这是用流动计算架构\n\n**流动计算架构：**\n\n![Untitled%204.png](Untitled%204.png)\n\n它负责维护业务之间复杂的关系，以及实时管理服务集群，当A访问量大了，可以多来几台服务器。而且多个A服务器中按照访问量动态调用，以此来提高集群的利用率。\n\n### 1.3 RPC\n\n**什么叫RPC**\n\n远程过程调用，A服务器调用B服务器上功能。是一种技术思想，不是规范。它允许程序调用另一个共享空间（通常是共享网络的另一台服务器）上的过程或函数。而不是程序员显示编码这个远程调用的细节。即程序员无论调用本地的还是远程的函数，本质上编写的调用代码基本相同。\n\n**RPC基本原理**\n\n![Untitled%205.png](Untitled%205.png)\n\nclent functions想调用server functions时，通过小助手请求，通过sockets创建和server的sockets连接，将想调用的信息传递个server服务器，server小助手收到信息后确定调用函数，server用传递过来的信息调用自己方法后把返回值再通过网络sockets返回给client\n\nA和B架起网络连接后调用\n\n**例子：**\n\n![Untitled%206.png](Untitled%206.png)\n\nA调用B时传递对象需要序列化，B先反序列化为对象，B服务器调用一下，拿到返回值，通过网络传输，序列化后传输给A服务器，A服务器需要反序列化后拿到返回值。\n\n**调用核心：**\n\nAB两个需要建立连接\n\n传递数据需要序列化和反序列化\n\n**决定性能有两点：**\n\n看RPC能否快速建立连接\n\n序列化于反序列化是否快\n\n**RPC框架：**\n\ndubbo、gRPC、Thrift、HSF\n\n思想相同，用法不同\n\n## 2 dubbo核心概念\n\n### 2.1 简介\n\nApache Dubbo 是一款高性能、轻量级的开源 Java 服务框架\n\n注：rpc面向服务、cloud的是restful面向资源\n\n14.10停止更新，18.1将dubbo和dubbox合并后发布为2.6版本，最终将dubbo开放到apache。\n\nnetty功能负责网络传输，dubbo使用netty作为网络传输框架。说到网络传输自然离不开Socket，Socket是端到端的连接。dubbo是无中心化，每个client端都能与server端连接，每个client端同时又是server端。\n\n**特性：**\n\n1.**面向接口代理的高性能RPC调用**\n\n提供高性能的基于代理的远程调用能力，服务以接口为粒度，为开发者屏蔽远程调用底层细节。\n\nA调用B只需要将接口拿来调用，dubbo会自动的找B服务器的这段代码，屏蔽了整个调用细节。\n\n类似Mybatis，调用数据库是只需要写do-mapping接口，调用接口方法就行了。\n\n**2.智能负载均衡**\n\n内置多种负载均衡策略，智能感知下游节点健康状况，显著减少调用延迟，提高系统吞吐量。\n\n一个服务1台服务器不够时部署多台后，会自动找空闲服务器运行。\n\n不会压垮某一台服务器，也不会让某服务器太闲浪费资源。\n\n**3.服务自动注册与发现**\n\n支持多种注册中心服务，服务实例上下线实时感知。\n\n业务非常多，订单调用支付业务时如何知道业务服务器是否知道有问题切在哪，为了动态感知，将所有程序注册到注册中心，维护注册清单。调用时会问一下调用的服务在哪个服务器，选择请求量最小的。建立通信，进行远程调用。\n\n**4.高度可扩展能力**\n\n遵循微内核+插件的设计原则，所有核心能力如Protocol、Transport、Serialization被设计为扩展点，平等对待内置实现和第三方实现。\n\n所有东西都可扩展。\n\n**5.运行期流量调度**\n\n内置条件、脚本等路由策略，通过配置不同的路由规则，轻松实现灰度发布，同机房优先等功能。\n\n灰度发布：比如有个用户服务，现在在100台上服务器在跑，用户服务做了升级，害怕升级不稳定，可以先选定20台服务器，让他们用新版本的用户服务，剩下80台用旧版本的用户服务。等20台用的没问题了，再选20台，一点一点增加，知道100台都过度到新版本用户服务。可以配置不同路由规则，请求进来后一部分用新版本服务。慢慢从旧服务转变到新服务的过程。\n\n**6.可视化的服务治理与运维**\n\n提供丰富服务治理、运维工具：随时查询服务元数据、服务健康状态及调用统计，实时下发路由策略、调整配置参数。\n\n可以随时查询服务的信息、健康状况、调用统计记录等等。通过可视化界面。\n\n### 2.2 dubbo设计架构\n\n![Untitled%207.png](Untitled%207.png)\n\n[节点角色说明](https://www.notion.so/6c6f03ae75794978a31ec967f82fec02)\n\n**运行流程**\n\n1. 服务容器负责启动，加载，运行服务提供者。\n2. 服务提供者在启动时，向注册中心注册自己提供的服务。\n3. 服务消费者在启动时，向注册中心订阅自己所需的服务。当某一个提供者下线了，基于长连接方式，将这个变更推送给消费者，可以实时知道有一个提供者不能调用了。当消费者拿到所有可以调的服务后，可以调用提供者提供的服务，调用时根据负载均衡算法选择一个提供者调用。\n4. 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。\n5. 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。\n6. 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。\n\nDubbo 架构具有以下几个特点，分别是连通性、健壮性、伸缩性、以及向未来架构的升级性。\n\n0、1、2是初始时启动完成的，第3、5布是异步的。第4步是同步调用。\n\n应先创建提供者，注册到注册中心，再编写消费者，消费者从注册中心调用提供者。然后再编写消费者如何消费提供者提供的功能。\n\n**连通性[](https://dubbo.apache.org/zh/docs/v2.7/user/preface/architecture/#%E8%BF%9E%E9%80%9A%E6%80%A7)**\n\n- 注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力较小\n- 监控中心负责统计各服务调用次数，调用时间等，统计先在内存汇总后每分钟一次发送到监控中心服务器，并以报表展示\n- 服务提供者向注册中心注册其提供的服务，并汇报调用时间到监控中心，此时间不包含网络开销\n- 服务消费者向注册中心获取服务提供者地址列表，并根据负载算法直接调用提供者，同时汇报调用时间到监控中心，此时间包含网络开销\n- 注册中心，服务提供者，服务消费者三者之间均为长连接，监控中心除外\n- 注册中心通过长连接感知服务提供者的存在，服务提供者宕机，注册中心将立即推送事件通知消费者\n- 注册中心和监控中心全部宕机，不影响已运行的提供者和消费者，消费者在本地缓存了提供者列表\n- 注册中心和监控中心都是可选的，服务消费者可以直连服务提供者\n\n**健壮性**\n\n- 监控中心宕掉不影响使用，只是丢失部分采样数据\n- 数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务\n- 注册中心对等集群，任意一台宕掉后，将自动切换到另一台\n- 注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯\n- 服务提供者无状态，任意一台宕掉后，不影响使用\n- 服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复\n\n**伸缩性**\n\n- 注册中心为对等集群，可动态增加机器部署实例，所有客户端将自动发现新的注册中心\n- 服务提供者无状态，可动态增加机器部署实例，注册中心将推送新的服务提供者信息给消费者\n\n**升级性[](https://dubbo.apache.org/zh/docs/v2.7/user/preface/architecture/#%E5%8D%87%E7%BA%A7%E6%80%A7)**\n\n当服务集群规模进一步扩大，带动IT治理结构进一步升级，需要实现动态部署，进行流动计算，现有分布式服务架构不会带来阻力。\n\n## 3 dubbo环境搭建\n\n### 3.1 搭建Zookeeper注册中心\n\n**3.1.1 安装jdk**\n\n上传jdk包到/opt/software\n\ntar -zxvf jdk-8u291-linux-x64.tar.gz\n\n```jsx\nexport JAVA_HOME=/opt/software/jdk1.8.0_291/  #jdk安装目录\nexport JRE_HOME=${JAVA_HOME}/jre\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib:$CLASSPATH\nexport JAVA_PATH=${JAVA_HOME}/bin:${JRE_HOME}/bin\nexport PATH=$PATH:${JAVA_PATH}\n```\n\n**3.1.2安装zookeeper**\n\n拷贝到/opt/software\n\n解压\n\n```jsx\ntar -zxvf apache-zookeeper-3.7.0.tar.gz\n```\n\n**3.1.3修改zookeeper配置**\n\n将\"/opt/software/apache-zookeeper-3.7.0/conf/zoo_sample.cfg\"拷贝份zoo.cfg\n\n打开zoo.cfg，修改vim zoo.cfg\n\n```jsx\ndataDir=/opt/software/apache-zookeeper-3.7.0/zkData/\n```\n\n**3.1.4操作zookeeper**\n\n(1) 启动zookeeper\n\n```jsx\ncd /opt/software/apache-zookeeper-3.7.0/bin\n./zkServer.sh start\n```\n\n(2) 查看进程\n\n```jsx\njps\n./zkServer.sh status\n```\n\n(3)启动客户端\n\n```jsx\n./zkCli.sh\nquit\n```\n\n(4) 关闭zookeeper\n\n```jsx\n./zkServer.sh stop\n```\n\n### 3.2. 搭建监控中心\n\n[https://github.com/apache/dubbo-admin](https://github.com/apache/dubbo-admin)\n\nroot\n\nroot\n\n3.2.1 **服务治理**\n\n服务治理的部分，按照Dubbo 2.7的格式进行配置，同时兼容Dubbo 2.6，详见[这里](https://github.com/apache/dubbo-admin/wiki/%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E5%85%BC%E5%AE%B9%E6%80%A7%E8%AF%B4%E6%98%8E)\n\n3.2.2 **前端部分**\n\n- 使用[Vue.js](https://vuejs.org/)作为javascript框架\n- [dubbo-admin-ui/README.md](https://github.com/apache/dubbo-admin/blob/develop/dubbo-admin-ui/README.md)中有更详细的介绍\n- 设置 npm **代理镜像** : 如果遇到了网络问题，可以设置npm代理镜像来加速npm install的过程：在~/.npmrc中增加 `registry =https://registry.npm.taobao.org`\n\n3.2.3 **后端部分**\n\n- 标准spring boot工程\n- [application.properties配置说明](https://github.com/apache/dubbo-admin/wiki/Dubbo-Admin%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E)\n\n3.2.4 **生产环境配置**\n\n1. 下载代码: `git clone https://github.com/apache/dubbo-admin.git`\n2. 在 `dubbo-admin-server/src/main/resources/application.properties`中指定注册中心地址\n3. 构建\n\n    > mvn clean package -Dmaven.test.skip=true\n\n4. 启动\n    - `mvn --projects dubbo-admin-server spring-boot:run`或者\n    - `cd dubbo-admin-distribution/target; java -jar dubbo-admin-0.1.jar`\n5. 访问 `http://localhost:8080`\n\n---\n\n3.2.5 **开发环境配置**\n\n- 运行`dubbo admin server, dubbo admin server`是一个标准的spring boot项目, 可以在任何java IDE中运行它\n- 运行`dubbo admin ui` `dubbo admin ui`由npm管理和构建，在开发环境中，可以单独运行: `npm run dev`\n- 页面访问 访问 `http://localhost:8081`, 由于前后端分开部署，前端支持热加载，任何页面的修改都可以实时反馈，不需要重启应用。\n\n3.2.6 **Swagger 支持**\n\n部署完成后，可以访问 [http://localhost:8080/swagger-ui.html](http://localhost:8080/swagger-ui.html) 来查看所有的restful api\n\n### 4 dubbo-helloworld\n\n**4.1 需求**\n\n![Untitled%208.png](Untitled%208.png)\n\n**4.2 工程架构** \n\n![Untitled%209.png](Untitled%209.png)\n\n服务化最佳实践\n\n[https://dubbo.apache.org/zh/docs/v2.7/user/best-practice/](https://dubbo.apache.org/zh/docs/v2.7/user/best-practice/)\n\n分包：\n\n建议将服务接口、服务模型、服务异常等均放在 API 包中，因为服务模型和异常也是 API 的一部分，这样做也符合分包原则：重用发布等价原则(REP)，共同重用原则(CRP)。\n\n如果需要，也可以考虑在 API 包中放置一份 Spring 的引用配置，这样使用方只需在 Spring 加载过程中引用此配置即可。配置建议放在模块的包目录下，以免冲突，如：`com/alibaba/china/xxx/dubbo-reference.xml`。\n\n粒度：\n\n服务接口尽可能大粒度，每个服务方法应代表一个功能，而不是某功能的一个步骤，否则将面临分布式事务问题，Dubbo 暂未提供分布式事务支持。\n\n服务接口建议以业务场景为单位划分，并对相近业务做抽象，防止接口数量爆炸。\n\n不建议使用过于抽象的通用接口，如：`Map query(Map)`，这样的接口没有明确语义，会给后期维护带来不便。\n\n```jsx\n<!-- 1、指定当前服务/应用的名字（同样的服务名字相同，不要和别的服务同名） -->\n<dubbo:application name=\"user-service-provider\"></dubbo:application>\n\n<!-- 2、指定注册中心的位置 -->\n<!-- <dubbo:registry address=\"zookeeper://127.0.0.1:2181\"></dubbo:registry> -->\n<dubbo:registry protocol=\"zookeeper\" address=\"127.0.0.1:2181\"></dubbo:registry>\n\n<!-- 3、指定通信规则（通信协议？通信端口） -->\n<dubbo:protocol name=\"dubbo\" port=\"20882\"></dubbo:protocol>\n\n<!-- 4、暴露服务   ref：指向服务的真正的实现对象 -->\n<dubbo:service interface=\"gmall.service.OrderService\"\n\tref=\"userServiceImpl01\" timeout=\"1000\" version=\"1.0.0\">\n\t<dubbo:method name=\"getUserAddressList\" timeout=\"1000\"></dubbo:method>\n</dubbo:service>\n\n<!--统一设置服务提供方的规则  -->\n<dubbo:provider timeout=\"1000\"></dubbo:provider>\n```\n\n**4.3 创建模块**\n\n1、gmall-interface：公共接口层（model，service，exception…）\n\n作用：定义公共接口，也可以导入公共依赖\n\n```jsx\n1、Bean模型\npackage gmall.bean;\n\nimport java.io.Serializable;\n\n/**\n * 用户地址\n *\n * @author lfy\n */\npublic class UserAddress implements Serializable {\n\n    private Integer id;\n    private String userAddress; //用户地址\n    private String userId; //用户id\n    private String consignee; //收货人\n    private String phoneNum; //电话号码\n    private String isDefault; //是否为默认地址    Y-是     N-否\n\n    public UserAddress() {\n        super();\n        // TODO Auto-generated constructor stub\n    }\n\n    public UserAddress(Integer id, String userAddress, String userId, String consignee, String phoneNum,\n                       String isDefault) {\n        super();\n        this.id = id;\n        this.userAddress = userAddress;\n        this.userId = userId;\n        this.consignee = consignee;\n        this.phoneNum = phoneNum;\n        this.isDefault = isDefault;\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getUserAddress() {\n        return userAddress;\n    }\n\n    public void setUserAddress(String userAddress) {\n        this.userAddress = userAddress;\n    }\n\n    public String getUserId() {\n        return userId;\n    }\n\n    public void setUserId(String userId) {\n        this.userId = userId;\n    }\n\n    public String getConsignee() {\n        return consignee;\n    }\n\n    public void setConsignee(String consignee) {\n        this.consignee = consignee;\n    }\n\n    public String getPhoneNum() {\n        return phoneNum;\n    }\n\n    public void setPhoneNum(String phoneNum) {\n        this.phoneNum = phoneNum;\n    }\n\n    public String getIsDefault() {\n        return isDefault;\n    }\n\n    public void setIsDefault(String isDefault) {\n        this.isDefault = isDefault;\n    }\n\n}\n\n2、OrderService 接口\npackage gmall.service;\n\nimport gmall.bean.UserAddress;\nimport java.util.List;\n\n/**\n * 订单服务\n * @author guoyh\n * @date 2021/7/5\n */\npublic interface OrderService {\n\n    public List<UserAddress> initOrder(String userId);\n}\n\n3、UserService接口\npackage gmall.service;\n\nimport gmall.bean.UserAddress;\nimport java.util.List;\n\n/**\n * 用户服务\n * @author guoyh\n * @date 2021/7/5\n */\npublic interface UserService {\n\n    /**\n     * 按照用户id返回所有收货地址\n     *\n     * @param userId\n     * @return List<UserAddress>\n     */\n    public List<UserAddress> getUserAddressList(String userId);\n\n}\n```\n\n2、user-service-provider：用户模块（对用户接口的实现）\n\n```jsx\n1、pom.xml\n\t<!-- 引入公共接口 -->\n\t<dependency>\n\t  <groupId>org.apache.dubbo</groupId>\n\t  <artifactId>gmall-interface</artifactId>\n\t  <version>0.0.1-SNAPSHOT</version>\n\t</dependency>\t\n\n2、UserServiceImpl服务\npackage com.atguigu.gmall.service.impl;\n\nimport gmall.bean.UserAddress;\nimport gmall.service.UserService;\nimport java.util.Arrays;\nimport java.util.List;\n\n/**\n * 1、将服务提供者将服务注册到注册中心（暴漏服务）\n * 1) 导入dubbo依赖\n * 2、让服务消费者去注册中心订阅服务的服务地址\n *\n * @author guoyh\n * @date 2021/7/5\n */\npublic class UserServiceImpl implements UserService {\n\n    @Override\n    public List<UserAddress> getUserAddressList(String userId) {\n        UserAddress userAddressOne = new UserAddress();\n        userAddressOne.setUserAddress(\"北京市区昌平\");\n        UserAddress userAddressTwo = new UserAddress();\n        userAddressTwo.setUserAddress(\"天安门\");\n        return Arrays.asList(userAddressOne, userAddressTwo);\n    }\n}\n```\n\n3、user-service-consumer：订单模块（调用用户模块）\n\n```jsx\n1、pom.xml\n\t<dependency>\n\t  <groupId>org.apache.dubbo</groupId>\n\t  <artifactId>gmall-interface</artifactId>\n\t  <version>0.0.1-SNAPSHOT</version>\n\t</dependency>\n\t\n2、OrderServiceImpl服务\npackage com.atguigu.gmall.service.impl;\n\nimport gmall.bean.UserAddress;\nimport gmall.service.OrderService;\nimport gmall.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport java.util.List;\n\n/**\n * @author guoyh\n * @date 2021/7/5\n */\n@Service\npublic class OrderServiceImpl implements OrderService {\n\n    @Autowired\n    UserService userService;\n\n    @Override\n    public List<UserAddress> initOrder(String userId) {\n        System.out.println(\"用户id:\" + userId);\n        // 1、查询用户收获地址\n        List<UserAddress> userAddressList = userService.getUserAddressList(userId);\n        for (UserAddress address : userAddressList) {\n            System.out.println(address.getUserAddress());\n        }\n        return userAddressList;\n    }\n}\n```\n\n现在这样是无法进行调用的。我们gmall-order-web引入了gmall-interface，但是interface的实现是gmall-user，我们并没有引入，而且实际他可能还在别的服务器中。\n\n**4.4 使用dubbo改造**\n\n1、改造user-service-provider作为服务提供者\n\n```jsx\n1、pom.xml\n\t<!-- 引入dubbo -->\n\t<!-- https://mvnrepository.com/artifact/com.alibaba/dubbo -->\n\t<dependency>\n\t  <groupId>com.alibaba</groupId>\n\t  <artifactId>dubbo</artifactId>\n\t  <version>2.6.2</version>\n\t</dependency>\n\t<!-- 注册中心使用的是zookeeper，引入操作zookeeper的客户端端 -->\n\t<dependency>\n\t  <groupId>org.apache.curator</groupId>\n\t  <artifactId>curator-framework</artifactId>\n\t  <version>2.12.0</version>\n\t</dependency>\n\n2、配置提供者provider.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\n\t\thttp://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd\">\n\n    <!-- 1、指定当前服务/应用的名字（同样的服务名字相同，不要和别的服务同名） -->\n    <dubbo:application name=\"user-service-provider\"></dubbo:application>\n\n    <!-- 2、指定注册中心的位置 -->\n    <!-- <dubbo:registry address=\"zookeeper://127.0.0.1:2181\"></dubbo:registry> -->\n    <dubbo:registry protocol=\"zookeeper\" address=\"127.0.0.1:2181\"></dubbo:registry>\n\n    <!-- 3、指定通信规则（通信协议？通信端口） -->\n    <dubbo:protocol name=\"dubbo\" port=\"20882\"></dubbo:protocol>\n\n    <!-- 4、暴露服务   ref：指向服务的真正的实现对象 -->\n    <dubbo:service interface=\"gmall.service.UserService\"\n                   ref=\"userServiceImpl\" timeout=\"1000\" version=\"1.0.0\">\n        <!--<dubbo:method name=\"getUserAddressList\" timeout=\"1000\"/>-->\n    </dubbo:service>\n\n    <!-- 服务的真正实现 -->\n    <bean id=\"userServiceImpl\" class=\"com.atguigu.gmall.service.impl.UserServiceImpl\"></bean>\n</beans>\n\n3.启动服务\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\npublic class MainApplication {\n    public static void main(String[] args) throws Exception {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[]{\"provider.xml\"});\n        context.start();\n        //为了不让服务终止，在这阻塞读取一个字符\n        System.in.read(); // 按任意键退出\n    }\n}\n```\n\n2、改造user-service-consumer作为服务消费者\n\n```jsx\n1、pom.xml\n\t<!-- 引入dubbo -->\n\t<!-- https://mvnrepository.com/artifact/com.alibaba/dubbo -->\n\t<dependency>\n\t  <groupId>com.alibaba</groupId>\n\t  <artifactId>dubbo</artifactId>\n\t  <version>2.6.2</version>\n\t</dependency>\n\t<!-- 注册中心使用的是zookeeper，引入操作zookeeper的客户端端 -->\n\t<dependency>\n\t  <groupId>org.apache.curator</groupId>\n\t  <artifactId>curator-framework</artifactId>\n\t  <version>2.12.0</version>\n\t</dependency>\n\n2、配置消费者consumer.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd\n\t\thttp://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\n\t\thttp://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd\">\n\n    <!-- 让注解能够生效 -->\n    <context:component-scan base-package=\"com.atguigu.gmall.service.impl\"/>\n\n    <!-- 1、指定当前服务/应用的名字（同样的服务名字相同，不要和别的服务同名） -->\n    <dubbo:application name=\"order-service-consumer\"></dubbo:application>\n\n    <!-- 2、指定注册中心的位置 -->\n    <dubbo:registry address=\"zookeeper://127.0.0.1:2181\"></dubbo:registry>\n\t\t\n\t\t<!-- 3、生成远程服务代理，可以和本地bean一样使用demoService -->\n    <dubbo:reference interface=\"gmall.service.UserService\"\n                     id=\"userService\">\n        <dubbo:method name=\"getUserAddressList\"/>\n    </dubbo:reference>\n\n    <!-- 6、连接监控中心 -->\n    <dubbo:monitor protocol=\"registry\"></dubbo:monitor>\n</beans>\n```\n\n3、调用测试\n\n```jsx\npackage com.atguigu.gmall.service.impl;\n\nimport gmall.bean.UserAddress;\nimport gmall.service.OrderService;\nimport gmall.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n/**\n * @author guoyh\n * @date 2021/7/5\n */\n@Service\npublic class OrderServiceImpl implements OrderService {\n\n    @Autowired\n    UserService userService;\n\n    @Override\n    public List<UserAddress> initOrder(String userId) {\n        System.out.println(\"用户id:\" + userId);\n        // 1、查询用户收获地址\n        List<UserAddress> userAddressList = userService.getUserAddressList(userId);\n        for (UserAddress address : userAddressList) {\n            System.out.println(address.getUserAddress());\n        }\n        return userAddressList;\n    }\n}\n```\n\n4、注解版本\n\n```jsx\n1、服务提供方\n<dubbo:application name=\"gmall-user\"></dubbo:application>\n  <dubbo:registry address=\"zookeeper://118.24.44.169:2181\" />\n  <dubbo:protocol name=\"dubbo\" port=\"20880\" />\n<dubbo:annotation package=\"com.atguigu.gmall.user.impl\"/>\n\nimport com.alibaba.dubbo.config.annotation.Service;\nimport com.atguigu.gmall.bean.UserAddress;\nimport com.atguigu.gmall.service.UserService;\nimport com.atguigu.gmall.user.mapper.UserAddressMapper;\n\n@Service //使用dubbo提供的service注解，注册暴露服务\npublic class UserServiceImpl implements UserService {\n\n\t@Autowired\n\tUserAddressMapper userAddressMapper;\n\n2、服务消费方\n<dubbo:application name=\"gmall-order-web\"></dubbo:application>\n<dubbo:registry address=\"zookeeper://118.24.44.169:2181\" />\n<dubbo:annotation package=\"com.atguigu.gmall.order.controller\"/>\n\nimport com.alibaba.dubbo.config.annotation.Reference;\nimport gmall.bean.UserAddress;\nimport gmall.service.OrderService;\nimport gmall.service.UserService;\n@Controller\npublic class OrderController {\n\t\n\t@Reference  //使用dubbo提供的reference注解引用远程服务\n\tUserService userService;\n\t\n  @Override\n    public List<UserAddress> initOrder(String userId) {\n        System.out.println(\"用户id:\" + userId);\n        // 1、查询用户收获地址\n        List<UserAddress> userAddressList = userService.getUserAddressList(userId);\n        return userAddressList;\n    }\n}\n```\n\n### 5、监控中心\n\n5.1、dubbo-admin\n\n图形化的服务管理页面；安装时需要指定注册中心地址，即可从注册中心中获取到所有的提供者/消费者进行配置管理\n\n5.2、dubbo-monitor-simple\n\n简单的监控中心；\n\n1)、安装\n\n```jsx\n1、下载 dubbo-ops\nhttps://github.com/apache/incubator-dubbo-ops\n2、修改配置指定注册中心地址\n进入 dubbo-monitor-simple\\src\\main\\resources\\conf\n修改 dubbo.properties文件\n3、打包dubbo-monitor-simple\nmvn clean package -Dmaven.test.skip=true\n4、解压 tar.gz 文件，并运行start.bat\n如果缺少servlet-api，自行导入servlet-api再访问监控中心\n5、启动访问8080\n```\n\n2)、监控中心配置\n\n```jsx\n所有服务配置连接监控中心，进行监控统计\n<!-- 监控中心协议，如果为protocol=\"registry\"，表示从注册中心发现监控中心地址，否则直连监控中心 -->\n<dubbo:monitor protocol=\"registry\"></dubbo:monitor>\n```\n\nSimple Monitor 挂掉不会影响到 Consumer 和 Provider 之间的调用，所以用于生产环境不会有风险。\n\nSimple Monitor 采用磁盘存储统计信息，请注意安装机器的磁盘限制，如果要集群，建议用mount共享磁盘。\n\n### 6、SpringBoot 整合 Dubbo\n\n```jsx\n<!-- SpringBoot版本 -->\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.0.4.RELEASE</version>\n    <relativePath/> <!-- lookup parent from repository -->\n</parent>\n\n<!-- JDK 1.8-->\n<properties>\n    <java.version>1.8</java.version>\n</properties>\n\n<!-- 引入公共接口项目-->\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>gmall-interface</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n  </dependency>\n```\n\n6.1、引入spring-boot-starter以及dubbo和curator的依赖\n\n注意starter版本适配：\n\n![Untitled%2010.png](Untitled%2010.png)\n\n```jsx\n<!-- Dubbo Spring Boot Starter -->\n<dependency>\n  <groupId>com.alibaba.boot</groupId>\n  <artifactId>dubbo-spring-boot-starter</artifactId>\n  <version>0.2.0</version>\n</dependency>\n```\n\n6.2、配置application.properties\n\n```jsx\n1、提供者配置\n#dubbo服务名称\ndubbo.application.name=boot-order-service-provider\n#注册中心地址\ndubbo.registry.address=127.0.0.1:2181\n#注册中心协议\ndubbo.registry.protocol=zookeeper\n#通信协议\ndubbo.protocol.name=dubbo\ndubbo.protocol.prot=20880\n#监控中心地址:registry从注册中心自动发现\ndubbo.monitor.protocol=registry\n#application.name就是服务名，不能跟别的dubbo提供端重复\n#registry.protocol 是指定注册中心协议\n#registry.address 是注册中心的地址加端口号\n#protocol.name 是分布式固定是dubbo,不要改。\n#base-package  注解方式要扫描的包\n\n2、消费者配置\ndubbo.application.name=gmall-order-web\ndubbo.registry.protocol=zookeeper\ndubbo.registry.address=192.168.67.159:2181\ndubbo.scan.base-package=com.atguigu.gmall\ndubbo.protocol.name=dubbo\n```\n\n3、dubbo注解\n\n```jsx\n#提供者:实现类开放服务\nimport com.alibaba.dubbo.config.annotation.Service;\n@Service\n\n#消费者:从注册中心自动获取可用的实现服务\nimport com.alibaba.dubbo.config.annotation.Reference;\n@Reference\n\n如果没有在配置中写dubbo.scan.base-package,还需要使用@EnableDubbo注解\nimport com.alibaba.dubbo.config.spring.context.annotation.EnableDubbo;\n@EnableDubbo\n```\n\n# 二、dubbo配置\n\n## 1、配置原则\n\n![Untitled%2011.png](Untitled%2011.png)\n\nJVM 启动 -D 参数优先，这样可以使用户在部署和启动时进行参数重写，比如在启动时需改变协议的端口。\n\nXML /applicatoin.properties次之，如果在 XML 中有配置，则 dubbo.properties 中的相应配置项无效。(自己测试结果为dubbo.properties 比XML/application.properties高)\n\nProperties 最后，相当于缺省值，只有 XML 没有配置时，dubbo.properties 的相应配置项才会生效，通常用于共享公共配置，比如应用名。\n\n[https://dubbo.apache.org/zh/docsv2.7/user/examples/preflight-check/](https://dubbo.apache.org/zh/docsv2.7/user/examples/preflight-check/)\n\n**启动时检查：**\n\nDubbo 缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止 Spring 初始化完成，以便上线时，能及早发现问题，默认 `check=\"true\"`。\n\n可以通过 `check=\"false\"` 关闭检查，比如，测试时，有些服务不关心，或者出现了循环依赖，必须有一方先启动。\n\n```jsx\n-D\njava -Ddubbo.reference.com.foo.BarService.check=false\njava -Ddubbo.reference.check=false\njava -Ddubbo.consumer.check=false \njava -Ddubbo.registry.check=false\n\nXML\n<dubbo:reference interface=\"com.foo.BarService\" check=\"false\" />\n<dubbo:consumer check=\"false\" />\n<dubbo:registry check=\"false\" />\n\ndubbo.properties\ndubbo.reference.com.foo.BarService.check=false\ndubbo.reference.check=false\ndubbo.consumer.check=false\ndubbo.registry.check=false\n```\n\n## 2、重试次数\n\n失败自动切换，当出现失败，重试其它服务器，但重试会带来更长延迟。可通过 retries=\"2\" 来设置重试次数(不含第一次)。\n\n```jsx\n重试次数配置如下：\n<dubbo:service retries=\"2\" />\n或\n<dubbo:reference retries=\"2\" />\n或\n<dubbo:reference>\n    <dubbo:method name=\"findFoo\" retries=\"2\" />\n</dubbo:reference>\n```\n\n## 3、超时时间\n\n由于网络或服务端不可靠，会导致调用出现一种不确定的中间状态（超时）。为了避免超时导致客户端资源（线程）挂起耗尽，必须设置超时时间.\n\n3.1、消费端\n\n```jsx\n全局超时配置\n<dubbo:consumer timeout=\"5000\" />\n\n指定接口以及特定方法超时配置\n<dubbo:reference interface=\"com.foo.BarService\" timeout=\"2000\">\n    <dubbo:method name=\"sayHello\" timeout=\"3000\" />\n</dubbo:reference>\n```\n\n3.2、提供方\n\n```jsx\n全局超时配置\n<dubbo:provider timeout=\"5000\" />\n\n指定接口以及特定方法超时配置\n<dubbo:provider interface=\"com.foo.BarService\" timeout=\"2000\">\n    <dubbo:method name=\"sayHello\" timeout=\"3000\" />\n</dubbo:provider>\n```\n\n3.3、配置规则\n\nDubbo推荐在Provider上尽量多配置Consumer端属性\n\n```jsx\n1、作服务的提供者，比服务使用方更清楚服务性能参数，如调用的超时时间，合理的重试次数，等等\n2、在Provider配置后，Consumer不配置则会使用Provider的配置值，即Provider配置可以作为Consumer的缺省值。否则，Consumer会使用Consumer端的全局设置，这对于Provider不可控的，并且往往是不合理的\n```\n\n配置的覆盖规则：\n\n1) 方法级配置别优于接口级别，即小Scope优先\n\n2) Consumer端配置 优于 Provider配置 优于 全局配置，\n\n3) 最后是缺省值（见配置文档）\n\n## 4、版本号\n\n[https://dubbo.apache.org/zh/docsv2.7/user/examples/multi-versions/](https://dubbo.apache.org/zh/docsv2.7/user/examples/multi-versions/)\n\n当一个接口实现，出现不兼容升级时，可以用版本号过渡，版本号不同的服务相互间不引用。可以按照以下的步骤进行版本迁移：\n\n在低压力时间段，先升级一半提供者为新版本\n\n再将所有消费者升级为新版本\n\n然后将剩下的一半提供者升级为新版本\n\n```jsx\n服务老版本提供者配置：\n<dubbo:service interface=\"com.foo.BarService\" version=\"1.0.0\" />\n\n服务新版本提供者配置：\n<dubbo:service interface=\"com.foo.BarService\" version=\"2.0.0\" />\n\n服务老版本消费者配置：\n<dubbo:reference id=\"barService\" interface=\"com.foo.BarService\" version=\"1.0.0\" />\n\n新版本服务消费者配置：\n<dubbo:reference id=\"barService\" interface=\"com.foo.BarService\" version=\"2.0.0\" />\n\n如果不需要区分版本，可以按照以下的方式配置：\n<dubbo:reference id=\"barService\" interface=\"com.foo.BarService\" version=\"*\" />\n```\n\n## 5、本地存根\n\n[https://dubbo.apache.org/zh/docsv2.7/user/examples/local-stub/](https://dubbo.apache.org/zh/docsv2.7/user/examples/local-stub/)\n\n远程服务后，客户端通常只剩下接口，而实现全在服务器端，但提供方有些时候想在客户端也执行部分逻辑，比如：做 ThreadLocal 缓存，提前验证参数，调用失败后伪造容错数据等等，此时就需要在 API 中带上 Stub，客户端生成 Proxy 实例，会把 Proxy 通过构造函数传给 Stub [1](https://dubbo.apache.org/zh/docsv2.7/user/examples/local-stub/#fn:1)，然后把 Stub 暴露给用户，Stub 可以决定要不要去调 Proxy。\n\n![stub.jpg](stub.jpg)\n\n在消费方，写一个远程接口本地的实现，提供 Stub 的实现 ：\n\n```jsx\npackage com.foo;\npublic class BarServiceStub implements BarService {\n    private final BarService barService;\n    \n    // 必须有一个有参构造，并且使构造函数传入真正的远程代理对象\n    public BarServiceStub(BarService barService){\n        this.barService = barService;\n    }\n \n    public String sayHello(String name) {\n        // 此代码在客户端执行, 你可以在客户端做ThreadLocal本地缓存，或预先验证参数是否合法，等等\n        // ...自己的代码\n\t\t\t\t// 当自己代码执行结束后，再调真正的远程服务\n\t\t\t\ttry {\n            return barService.sayHello(name);\n        } catch (Exception e) {\n            // 你可以容错，可以做任何AOP拦截事项\n            return \"容错数据\";\n        }\n    }\n}\n```\n\n在 spring 配置文件中按以下方式配置：\n\n```jsx\n提供者方配置\n<dubbo:service interface=\"com.foo.BarService\" stub=\"true\" />\n\n消费者方配置\n<dubbo:reference interface=\"gmall.service.UserService\"\n  id=\"userService\" timeout=\"5000\" retries=\"3\" version=\"*\" \n\tstub=\"com.atguigu.gmall.service.impl.UserServiceStub\">\n<dubbo:method name=\"getUserAddressList\" timeout=\"1000\"/>\n</dubbo:reference>\n```\n\n---\n\n1. Stub 必须有可传入 Proxy 的构造函数。 \n2. 在 interface 旁边放一个 Stub 实现，它实现 BarService 接口，并有一个传入远程 BarService 实例的构造函数 \n\n## 6、SpringBoot方式配置\n\n### 6.1、超时属性\n\n```jsx\nimport com.alibaba.dubbo.config.annotation.Service;\n@Service(timeout)\nimport com.alibaba.dubbo.config.annotation.Reference;\n@Reference(timeout = 0)\n```\n\n### 6.2、SpringBoot与Dubbo整合的三种方式\n\n**6.2.1、第一种**\n\n```jsx\n1.导入dobuuo-starter\n<dependency>\n\t<groupId>com.alibaba.boot</groupId>\n\t<artifactId>dubbo-spring-boot-starter</artifactId>\n\t<version>0.2.0</version>\n</dependency>\n\n2.配置application.properties\n#dubbo服务名称\ndubbo.application.name=boot-order-service-provider\n#注册中心地址\ndubbo.registry.address=127.0.0.1:2181\n#注册中心协议\ndubbo.registry.protocol=zookeeper\n#通信协议\ndubbo.protocol.name=dubbo\ndubbo.protocol.prot=20880\n#监控中心地址:registry从注册中心自动发现\ndubbo.monitor.protocol=registry\n\n3.暴漏服务注解@Service\n\n4.使用远程服务@Reference\n\n5.开启Dubbo注解功能@EnableDubbo\n\n#老版本会指定包扫描规则\ndubbo.scan.base-packages=com\n```\n\n**6.2.2、第二种：保留XML**\n\n想要做到方法级别的配置，保留dubbo的xml配置文件，之后可以在xml中做到method方法级别的配置。\n\n```jsx\n# 拷贝xml文件到resource目录,删除application.properties中dubbo的相关配置\n# 所有配置都在xml中\n1.导入dobuuo-starter\n<dependency>\n\t<groupId>com.alibaba.boot</groupId>\n\t<artifactId>dubbo-spring-boot-starter</artifactId>\n\t<version>0.2.0</version>\n</dependency>\n\n2.使用@ImportResource导入dubbo的xml配置文件\n//@EnableDubbo\n@ImportResource(location=\"classpath:provider.xml\")\n```\n\n**6.2.3、第三种:注解API配置类**\n\n将每一个组件手动创建到容器中\n\n```jsx\n1.创建配置类\npackage com.atguigu.gmall.config;\n\nimport com.alibaba.dubbo.config.*;\nimport gmall.service.UserService;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.Arrays;\n\n@Configuration\npublic class MyDubboConfig {\n\n    /**\n     * 提供者名\n     * @return\n     */\n    @Bean\n    public ApplicationConfig applicationConfig() {\n        ApplicationConfig applicationConfig = new ApplicationConfig();\n        applicationConfig.setName(\"boot-order-service-provider-config\");\n        return applicationConfig;\n    }\n\n    /**\n     * 注册中心地址\n     * @return\n     */\n    @Bean\n    public RegistryConfig registryConfig() {\n        RegistryConfig registryConfig = new RegistryConfig();\n        registryConfig.setProtocol(\"zookeeper\");\n        registryConfig.setAddress(\"127.0.0.1:2181\");\n        return registryConfig;\n    }\n\n    /**\n     * 通信规则\n     * @return\n     */\n    @Bean\n    public ProtocolConfig protocolConfig() {\n        ProtocolConfig protocolConfig = new ProtocolConfig();\n        protocolConfig.setName(\"dubbo\");\n        protocolConfig.setPort(20882);\n        return protocolConfig;\n    }\n\n    /**\n     * 配置暴漏服务\n     * @return\n     */\n    @Bean\n    public ServiceConfig<UserService> userServiceConfig(UserService userService) {\n        ServiceConfig<UserService> userServiceConfig = new ServiceConfig<>();\n        //配置接口级别\n        userServiceConfig.setInterface(UserService.class);\n        userServiceConfig.setRef(userService);\n        userServiceConfig.setVersion(\"1.0.0\");\n\n        //配置方法级别\n        MethodConfig methodConfig = new MethodConfig();\n        methodConfig.setName(\"getUserAddressList\");\n        methodConfig.setTimeout(1000);\n\n        userServiceConfig.setMethods(Arrays.asList(methodConfig));\n        return userServiceConfig;\n    }\n\n    /**\n     * 设置监控中心\n     * @return\n     */\n    @Bean\n    public MonitorConfig monitorConfig() {\n        MonitorConfig monitorConfig = new MonitorConfig();\n        monitorConfig.setProtocol(\"registry\");\n        return monitorConfig;\n    }\n}\n\n2.暴露服务接口\n@Service //暴露服务\n\n3.启动dubbo并指定扫描路径\n@EnableDubbo(scanBasePackages = \"com.atguigu.gmall\")\n```\n\n# 三、高可用\n\n## 3.1、zookeeper宕机与dubbo直连\n\n![Untitled%2012.png](Untitled%2012.png)\n\n注册中心的作用就是保存服务提供者位置信息，我们完全可以绕过注册中心使用dubbo直连.\n\n宕机了有缓存，依旧可以调用。没有注册中心使用直连\n\n```jsx\n@Reference(timeout = 0,url = \"127.0.0.1:20880\")\nUserService userService;\n```\n\n## 3.2、集群下dubbo负载均衡机制\n\n[https://dubbo.apache.org/zh/docsv2.7/user/examples/loadbalance/](https://dubbo.apache.org/zh/docsv2.7/user/examples/loadbalance/)\n\n在集群负载均衡时，Dubbo 提供了多种均衡策略，缺省为 random 随机调用,\n\n```jsx\n**Random LoadBalance**\n随机，按权重设置随机概率。\n在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。\n**RoundRobin LoadBalance**\n轮循，按公约后的权重设置轮循比率。\n存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。\n**LeastActive LoadBalance**\n最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。\n使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。\n**ConsistentHash LoadBalance**\n一致性 Hash，相同参数的请求总是发到同一提供者。\n当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。算法参见：http://en.wikipedia.org/wiki/Consistent_hashing\n缺省只对第一个参数 Hash，如果要修改，请配置 <dubbo:parameter key=\"hash.arguments\" value=\"0,1\" />\n缺省用 160 份虚拟节点，如果要修改，请配置 <dubbo:parameter key=\"hash.nodes\" value=\"320\" />\n```\n\n### 3.2.1、Random LoadBalance\n\n![Untitled%2013.png](Untitled%2013.png)\n\n### 3.2.2、RoundRobin LoadBalance\n\n第一调完，必须去第二个,根据权重1只能占2次，2占4次，3占1次。\n\n![Untitled%2014.png](Untitled%2014.png)\n\n### 3.2.3、LeastActive LoadBalance\n\n![Untitled%2015.png](Untitled%2015.png)\n\n每次都统计上次请求时间\n\n调哪个前会查那个上次最快\n\n### 3.2.4、ConsistentHash LoadBalance\n\n比如getUser,id都等于1的，根据hash分布都会来到1号机器。\n\n![Untitled%2016.png](Untitled%2016.png)\n\n### 3.2.5、配置\n\n默认为随机负载均衡机制\n\n![Untitled%2017.png](Untitled%2017.png)\n\n![Untitled%2018.png](Untitled%2018.png)\n\nXML：\n\n```jsx\n### **服务端服务级别**\n\n`<dubbo:service interface=\"...\" loadbalance=\"roundrobin\" />`\n\n### **客户端服务级别**\n\n`<dubbo:reference interface=\"...\" loadbalance=\"roundrobin\" />`\n\n### **服务端方法级别**\n\n`<dubbo:service interface=\"...\">\n    <dubbo:method name=\"...\" loadbalance=\"roundrobin\"/>\n</dubbo:service>`\n\n### **客户端方法级别**\n\n`<dubbo:reference interface=\"...\">\n    <dubbo:method name=\"...\" loadbalance=\"roundrobin\"/>\n</dubbo:reference>`\n```\n\n注解：\n\n```jsx\n@Reference(timeout = 0,loadbalance = \"roundrobin\") \n\n```\n\n![Untitled%2019.png](Untitled%2019.png)\n\n## 3.3、整合hystrix，服务熔断与降级处理\n\n### 3.3.1、服务降级\n\n什么是服务降级？\n\n当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理或换种简单的方式处理，从而释放服务器资源以保证核心交易正常运作或高效运作\n\n可以通过服务降级功能临时屏蔽某个出错的非关键服务，并定义降级后的返回策略。\n\n支持2种：\n\n- mock=force:return+null 表示消费方对该服务的方法调用都直接返回 null 值，不发起远程调用。用来屏蔽不重要服务不可用时对调用方的影响。（直接在客户端返回null，不发起远程调用）\n- 还可以改为 mock=fail:return+null 表示消费方对该服务的方法调用在失败后，再返回 null 值，不抛异常。用来容忍不重要服务不稳定时对调用方的影响。（到达一定超时时间，超时后调用在失败后，再返回 null 值，这个是服务已经调用了）\n\n通过服务降级手段，牺牲非核心业务的占用的资源，达到让其他核心业务能占用服务器更多资源\n\n**配置，在消费者端**\n\n第一种：屏蔽（不进行远程调用，返回null）\n\n![Untitled%2020.png](Untitled%2020.png)\n\n第二种：容错（当远程调用失败后，返回null）\n\n![Untitled%2021.png](Untitled%2021.png)\n\n### 3.3.2、集群容错\n\n在集群调用失败时，Dubbo 提供了多种容错方案，缺省为 failover 重试。\n\n```jsx\n1.**Failover Cluster**\n失败自动切换，当出现失败，重试其它服务器。通常**用于读操作**，但重试会带来更长延迟。\n可通过 retries=\"2\" 来设置重试次数(不含第一次)。\n\n重试次数配置如下：\n<dubbo:service retries=\"2\" />\n或\n<dubbo:reference retries=\"2\" />\n或\n<dubbo:reference>\n    <dubbo:method name=\"findFoo\" retries=\"2\" />\n</dubbo:reference>\n\n2.**Failfast Cluster**\n快速失败，只发起一次调用，失败立即报错。通常用于**非幂等性**的写操作，比如新增记录。\n\n3.**Failsafe Cluster**\n失败安全，出现异常时，直接**忽略**。通常用于写入审计日志等操作。\n\n4.**Failback Cluster**\n**失败自动恢复**，后台记录失败请求，定时重发。通常**用于消息通知**操作。\n\n5.**Forking Cluster**\n**并行调用**多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，\n但需要浪费更多服务资源。可通过 forks=\"2\" 来设置最大并行数。太浪费资源。\n\n6.**Broadcast Cluster**\n广播**调用所有提供者，逐个调用，任意一台报错则报错** [2]。\n通常**用于通知所有提供者更新缓存**或日志等本地资源信息。\n\n7.**集群模式配置**\n按照以下示例在服务提供方和消费方配置集群模式\n<dubbo:service cluster=\"failsafe\" />\n或\n<dubbo:reference cluster=\"failsafe\" />\n```\n\n### 3.3.3、实际开发整合hystrix提供容错（SpringCloud默认整合的框架）\n\nHystrix 旨在通过控制那些访问远程系统、服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力。Hystrix具备拥有回退机制和断路器功能的线程和信号隔离，请求缓存和请求打包，以及监控和配置等功能。\n\n**1、配置spring-cloud-starter-netflix-hystrix**\n\nspring boot官方提供了对hystrix的集成，直接在消费者、提供者的pom.xml里加入依赖：\n\n```jsx\n<dependency>\n\t<groupId>org.springframework.cloud</groupId>\n\t<artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n\t<version>1.4.4.RELEASE</version>\n</dependency>\n```\n\n然后在Application类上增加@EnableHystrix来启用hystrix starter：\n\n```jsx\n@SpringBootApplication\n@EnableHystrix\npublic class ProviderApplication {\n}\n```\n\n**2、配置Provider端**\n\n在Dubbo的Provider上增加@HystrixCommand配置，这样子调用就会经过Hystrix代理。\n\n```jsx\n@Service(version = \"1.0.0\")\npublic class HelloServiceImpl implements HelloService {\n\t\t//使用Hystrix代理，进行处理容错异常\n    @HystrixCommand(commandProperties = {\n     @HystrixProperty(name = \"circuitBreaker.requestVolumeThreshold\", value = \"10\"),\n     @HystrixProperty(name = \"execution.isolation.thread.timeoutInMilliseconds\", value = \"2000\") })\n    @Override\n    public String sayHello(String name) {\n        // System.out.println(\"async provider received: \" + name);\n        // return \"annotation: hello, \" + name;\n        throw new RuntimeException(\"Exception to show hystrix enabled.\");\n    }\n}\n```\n\n**3、配置Consumer端**\n\n对于Consumer端，则可以增加一层method调用，并在method上配置@HystrixCommand。当调用出错时，会走到fallbackMethod = \"reliable\"的调用里。\n\n```jsx\n@Reference(version = \"1.0.0\")\n    private HelloService demoService;\n\t\t//fallbackMethod 回调方法,一旦调用失败出错后，调用reliable方法\n\t\t//就不用在调用代码中trycatch了\n    @HystrixCommand(fallbackMethod = \"reliable\")\n    public String doSayHello(String name) {\n        return demoService.sayHello(name);\n    }\n    public String reliable(String name) {\n        return \"hystrix fallback value\";\n    }\n```\n\n# 四、Dubbo原理\n\n## 4.1、RPC原理\n\nrpc就是想完成一次远程调用\n\n![Untitled%2022.png](Untitled%2022.png)\n\n一次完整的RPC调用流程（同步调用，异步另说）如下：\n\n1）Computer01（client）发起远程调用请求,接下来有一个代理对象client stub\n\n**2）client stub接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体；**\n\n**3）client stub找到服务地址，并将消息发送到服务端server stub；**\n\n**4）server stub收到消息后进行解码(可能传输的是序列化对象，需要反序列化)；**\n\n**5）server stub根据解码结果调用本地的方法服务；**\n\n**6）本地方法服务执行完成后，将数据结果返回给server stub；**\n\n**7）server stub将返回结果打包(序列化)成消息通过网络发送至消费方client stub；**\n\n**8）client stub接收到消息，并进行解码(反序列化)；**\n\n9）服务消费方Computer01得到最终结果。\n\nRPC框架的目标就是要2~8这些步骤都封装起来，这些细节对用户来说是透明的，不可见的。\n\n## 4.2、netty通信原理\n\nDubbo底层通信时是使用netty，Netty时基于Java的NIO(Non-Blocking IO)非阻塞,BIO(Blocking IO)阻塞IO。\n\n**BIO：**\n\n![Untitled%2023.png](Untitled%2023.png)\n\n每一个请求进来开一个线程Socket，读取Socket的输入流、进行业务逻辑等等。同时在这操作，并且此时在我们业务逻辑没完成之前，我们线程都不能得到释放的，这样我们的服务器就不能同时处理大量的请求。因为有大量的线程在等待业务逻辑的完成。\n\n**NIO：**\n\n![Untitled%2024.png](Untitled%2024.png)\n\nChannel：通道，通道里还有Buffer，利用Buffer进行数据传输。\n\nSelector ：一般称 为**选择器** ，也可以翻译为 **多路复用器。**\n\n通道状态：Connect（连接就绪）、Accept（接受就绪）、Read（读就绪）、Write（写就绪）。\n\n**基本原理：**\n\n1个Selector会有很多通道注册了进来，Selector通过监听多个通道，监听会有很多事件，如当Connect了发生什么，Accept了会做什么，Read或Write发生了时要做什么，当发现某一个通道数据准备好了。所以我们通过1个Selector监听多个通道的方式，当某个通道任何一个状态准备好了，我们可以额外开一个线程进行处理。这叫多路复用模型。\n\n![Untitled%2025.png](Untitled%2025.png)\n\n1.启动\n\n2.监听某一个端口\n\n3.初始化一个通道，注册到Selector中\n\n4.轮询监听通道的accept事件\n\n5.当accept事件发生后，扔到任务队列，处理通道信息，就与客户端建立连接来生成SocketChannel\n\n6.然后把刚生成的SocketChannel通道再注册到Selector里面，进行监听read、wirte事件\n\n7.read、wirte事件准备就绪了就来处理，抛给任务队列。\n\n注意：有2个Selector，一个是boss来进行监听准备就绪事件，另一个woker是当准备就绪后要做什么工作，把这个工作抛给woker慢慢来做。\n\n## 4.3、dubbo原理\n\n### 4.3.1、dubbo原理\t-   框架设计\n\n![Untitled%2026.png](Untitled%2026.png)\n\n**各层说明**\n\n- **config 配置层**：对外配置接口，以 `ServiceConfig`, `ReferenceConfig` 为中心，可以直接初始化配置类，也可以通过 spring 解析**配置生成配置类**\n- **proxy 服务代理层**：服务接口透明代理，**生成服务的客户端 Stub 和服务器端 Skeleton,** 以 `ServiceProxy` 为中心，扩展接口为 `ProxyFactory`\n- **registry 注册中心层**：封装服务地址的**注册与发现**，以服务 URL 为中心，扩展接口为 `RegistryFactory`, `Registry`, `RegistryService`\n- **cluster 路由层**：封装多个提供者的路由及**负载均衡**，并桥接注册中心，以 `Invoker` 为中心，扩展接口为 `Cluster`, `Directory`, `Router`, `LoadBalance`\n- **monitor 监控层**：RPC **调用次数和调用时间监控**，以 `Statistics` 为中心，扩展接口为 `MonitorFactory`, `Monitor`, `MonitorService`\n- **protocol 远程调用层**：**封装 RPC 调用**，以 `Invocation`, `Result` 为中心，扩展接口为 `Protocol`, `Invoker`, `Exporter`\n- **exchange 信息交换层**：封装请求响应模式，同步转异步，以 `Request`, `Response` 为中心，扩展接口为 `Exchanger`, `ExchangeChannel`, `ExchangeClient`, `ExchangeServer`，创建客户端和服务端，两个架起管道进行数据互联互通。\n- **transport 网络传输层**：抽象 mina 和 **netty (transport 底层)**为统一接口，以 `Message` 为中心，扩展接口为 `Channel`, `Transporter`, `Client`, `Server`, `Codec`\n- **serialize 数据序列化层**：可复用的一些工具，扩展接口为 `Serialization`, `ObjectInput`, `ObjectOutput`, `ThreadPool`\n\n**说明：**Consumer在左边，Provider在右边。Call为调用逻辑，黑颜色是依赖顺序。\n\n### 4.3.2、dubbo原理\t-   启动解析、加载配置信息\n\nBeanDefinitionParser定义解析器\n\nDubboBeanDefinitionParser中的parse方法来解析标签。挨个标签来解析。\n\nDubboBeanDefinitionParser构造器打断点看怎么创建出来的。\n\n![Untitled%2027.png](Untitled%2027.png)\n\ninit方法注册很多标签解析器。容器启动，解析每一个标签，每一个标签都有对应的***Config.class，保存到指定的对象中,Service标签牵扯到服务暴漏的功能。\n\n![Untitled%2028.png](Untitled%2028.png)\n\n### 4.3.3、dubbo原理\t-   服务暴露\n\n![dubbo-%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2.jpg](dubbo-%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2.jpg)\n\nService标签牵扯到服务暴漏的功能，ServiceBean它实现了InitalizingBean（它在创建完对象以后调用afterPropertisSet方法）、ApplicationListener(事件是ContextRefreshedEvent(当IOC容器完成后会回调onApplicationEvent方法))\n\nafterPropertisSet方法和onApplicationEvent方法都做了什么：\n\nafterPropertisSet方法保存配置的属性信息。\n\nonApplicationEvent方法判断当没有爆露时调用export方法暴漏服务，调用doExport方法。调用doExportUrls方法，第一步加载注册信息，再调用doExportUrlsFor1Portocol方法，创建invoker，调用protocol(DubboProtocol).export(wrapperInvoker)\n\n暴漏URL,OPENServer(url)，启动netty服务器，监听20880端口\n\n创建服务器createServer(url)\n\nExchangers.bind(url,requestHandler)绑定url和处理器\n\nTransporters.bind(url,new DecodeHandler(new HanderExchangesHandler()))这都是netty的底层，创建一个netty的服务器。\n\n注册提供者。\n\n总共2步：\n\n启动netty服务器，监听20880端口。\n\n注册中心进行注册服务，把注册好的地址，把注册信息保存在注册中心。\n\nmicrokernel plugin模式\n\n### 4.3.4、dubbo原理\t-   服务引用\n\n如何通过配置reference标签远程引用暴漏的服务。\n\n![Untitled](Untitled%2029.png)\n\n前置类似暴漏服务原理，对应的是ReferenceBean,特殊在implement FactoryBean，FactoryBean作用是当我们要获取userService，在引用userService的类中需要自动注入userService，需要从spring容器中找，通过调用FactoryBean的getObject方法获取userService对象，getObject调用ReferenceConfig的getT方法，如果ref引用是空的，就init（）初始化对象，ref = createProxy（map）。\n\n![Untitled](Untitled%2030.png)\n\n![Untitled](Untitled%2031.png)\n\n然后远程引用接口，urls保存了注册中心的地址。\n\n![Untitled](Untitled%2032.png)\n\nrefprotocal还是Protocal，Protocal有2种，1个是DubboProtocal，另一个是RegistryProtocol，这里调用RegistryProtocol的refer方法。\n\n![Untitled](Untitled%2033.png)\n\n先根据注册中心地址得到注册中心信息。然后调用doRefer,传入了注册中心地址，还有要引用的userService\n\n![Untitled](Untitled%2034.png)\n\n之后进行订阅服务\n\n![Untitled](Untitled%2035.png)\n\n订阅服务会进入到DubboProtocol，DubboProtocol会getClients获取客户端。\n\n![Untitled](Untitled%2036.png)\n\n拿到客户端，初始化客户端\n\n![Untitled](Untitled%2037.png)\n\n然偶会进行连接\n\n![Untitled](Untitled%2038.png)\n\n获取返回连接，调用Transporter.connect（），之后就到达了netty的底层。\n\n![Untitled](Untitled%2039.png)\n\n![Untitled](Untitled%2040.png)\n\n![Untitled](Untitled%2041.png)\n\n相当于创建一个netty客户端，根据url地址监听一个端口。创建完连接后返回DubboProtocol中，创建好invoker，返回invoker。\n\n![Untitled](Untitled%2042.png)\n\n获取创建好的invoker，里面有url地址，消费者地址。之后在消费者注册表里把刚创建的invoker注册进去。注册进入subscribeUrl订阅地址。记录消费者消费哪个服务。\n\n![Untitled](Untitled%2043.png)\n\n保存好了后返回到doRefer()\n\n![Untitled](Untitled%2044.png)\n\n但后一直返回到createProxy。ref代理对象就创建好了，远程信息等都在里面存好了。\n\n之后使用代理对象来执行远程调用方法。\n\n![Untitled](Untitled%2045.png)\n\n### 4.3.5、dubbo原理\t-   服务调用\n\n整体流程：\n\n![Untitled](Untitled%2046.png)\n\n代理对象如何执行方法呢，在这里打个断点。\n\n![Untitled](Untitled%2047.png)\n\n会调用invoke，并且会传入method和args并封装成一个叫RpcInvocation远程调用的对象。\n\n![Untitled](Untitled%2048.png)\n\n之后再进一个Invoker，它里面封装了FailOverCluster，他是dubbo带集群容错功能的invoker\n\n![Untitled](Untitled%2049.png)\n\n进去后查询有多少个可执行版本的方法，再获取负载均衡的机制，之后继续doInvoke\n\n![Untitled](Untitled%2050.png)\n\n之后有个select能根据我们的负载均衡策略进行负载随机选择1个invoker\n\n![Untitled](Untitled%2051.png)\n\n接下来调用invoker.invoke执行，到了真正要执行时还封装了一些filter，这个filter在最开始proxy代理对象要用invoker时会在外面封装filter来做（local、mock、cache）\n\n[https://dubbo.apache.org/zh/docsv2.7/user/examples/local-mock/](https://dubbo.apache.org/zh/docsv2.7/user/examples/local-mock/)\n\n[https://dubbo.apache.org/zh/docsv2.7/user/examples/result-cache/](https://dubbo.apache.org/zh/docsv2.7/user/examples/result-cache/)\n\n缓存功能时，然后invoker选中了负载均衡功能后，又进入filter，filter就是各个统计信息（监控中心等）ProtocolFilter，ProtocolFilter里封装到最终时DubboInvoker.\n\n![Untitled](Untitled%2052.png)\n\n![Untitled](Untitled%2053.png)\n\n![Untitled](Untitled%2054.png)\n\n在DubboInvoker中获取到在服务引用时建立的客户端，拿到引用的哪个远程服务，之后再request发起请求，返回结果。这里request就已经进入到底层了。之后拿客户端，拿通道。\n\n![Untitled](Untitled%2055.png)\n\n![Untitled](Untitled%2056.png)\n\n![Untitled](Untitled%2057.png)\n\n然后给通道发送出去。\n\n![Untitled](Untitled%2058.png)\n\n之后返回拿到返回结果对象，里面封装了结果数据\n\n![Untitled](Untitled%2059.png)\n\n返回返回， 之后打印到控制台。\n\n![Untitled](Untitled%2060.png)\n\n# 5.结束语\n\n祝大家学业有成","source":"_posts/Dubbo学习笔记.md","raw":"---\ntitle: Dubbo学习笔记\ndate: 2021-08-13 10:00:41\ncomments: true\ntags: \n    - Dubbo\ncategories: 后端\nthumbnail: logo.jpeg\nbanner: logo.jpeg\ncover: logo.jpeg\n---\n\n# 一、基本知识\n\n## 1 分布式基础理论\n\n### 1.1什么是分布式\n\n分布式系统是若干个独立计算机的集合，，计算机对于用户来说就像个单个系统，建立在网络上的软件系统。\n\n随着互联网的发展，规模不断扩大，垂直应用架构无法应付，需要一个治理系统确保架构有条不紊的演进。\n\ndubbo作用：治理和维护各个分系统。\n\n ### 1.2 发展演变：\n\n![Untitled.png](Untitled.png)\n\n**单一应用架构：**\n\n流量小时，所有功能放到一起，减少部署节点和成本。\n\n![Untitled%201.png](Untitled%201.png)\n\n缺点：\n\n扩展不容易，需要重新打包重新部署\n\n协同开发不容易\n\n扩大性能提升不容易\n\n**垂直应用架构：**\n\n小功能独立为单个应用，部署在多个服务器上\n\n![Untitled%202.png](Untitled%202.png)\n\n优点：\n\n分工合作容易，分别负责开发\n\n性能扩展容易，多部署到几个服务器\n\n缺点：\n\n单个应用从头到尾都有的，包括页面逻辑和数据库。但是市场上界面改变快，改了需要重新部署，没法做到页面和业务逻辑的分离\n\n垂直应用越来越多，不可能完全应用于应用完全独立。用户调用订单和商品，物流调用订单等。应用之间需要交互\n\n**分布式服务架构：**\n\n核心业务单独抽取出来，用户应用抽取为页面和业务逻辑。当业务逻辑不变时只改界面，界面重新部署就行了。\n\n![Untitled%203.png](Untitled%203.png)\n\n问题：\n\n用户web可能再A服务器上，业务再B服务器。如果A服务器调用B服务器功能时，因为不在一个进程内，分隔异地了，这2个代码调用需要RPC远程过程调用。\n\n难点：\n\n如何远程过程调用\n\n如何拆分业务，增加业务的复用程度\n\n好的分布式服务框架（RPC），应该有调度中心，来实时的监控业务中心实现动态调度，增加利用率，当某一个业务调用多了，可以让更多的服务器来跑业务量更大的业务，这是用流动计算架构\n\n**流动计算架构：**\n\n![Untitled%204.png](Untitled%204.png)\n\n它负责维护业务之间复杂的关系，以及实时管理服务集群，当A访问量大了，可以多来几台服务器。而且多个A服务器中按照访问量动态调用，以此来提高集群的利用率。\n\n### 1.3 RPC\n\n**什么叫RPC**\n\n远程过程调用，A服务器调用B服务器上功能。是一种技术思想，不是规范。它允许程序调用另一个共享空间（通常是共享网络的另一台服务器）上的过程或函数。而不是程序员显示编码这个远程调用的细节。即程序员无论调用本地的还是远程的函数，本质上编写的调用代码基本相同。\n\n**RPC基本原理**\n\n![Untitled%205.png](Untitled%205.png)\n\nclent functions想调用server functions时，通过小助手请求，通过sockets创建和server的sockets连接，将想调用的信息传递个server服务器，server小助手收到信息后确定调用函数，server用传递过来的信息调用自己方法后把返回值再通过网络sockets返回给client\n\nA和B架起网络连接后调用\n\n**例子：**\n\n![Untitled%206.png](Untitled%206.png)\n\nA调用B时传递对象需要序列化，B先反序列化为对象，B服务器调用一下，拿到返回值，通过网络传输，序列化后传输给A服务器，A服务器需要反序列化后拿到返回值。\n\n**调用核心：**\n\nAB两个需要建立连接\n\n传递数据需要序列化和反序列化\n\n**决定性能有两点：**\n\n看RPC能否快速建立连接\n\n序列化于反序列化是否快\n\n**RPC框架：**\n\ndubbo、gRPC、Thrift、HSF\n\n思想相同，用法不同\n\n## 2 dubbo核心概念\n\n### 2.1 简介\n\nApache Dubbo 是一款高性能、轻量级的开源 Java 服务框架\n\n注：rpc面向服务、cloud的是restful面向资源\n\n14.10停止更新，18.1将dubbo和dubbox合并后发布为2.6版本，最终将dubbo开放到apache。\n\nnetty功能负责网络传输，dubbo使用netty作为网络传输框架。说到网络传输自然离不开Socket，Socket是端到端的连接。dubbo是无中心化，每个client端都能与server端连接，每个client端同时又是server端。\n\n**特性：**\n\n1.**面向接口代理的高性能RPC调用**\n\n提供高性能的基于代理的远程调用能力，服务以接口为粒度，为开发者屏蔽远程调用底层细节。\n\nA调用B只需要将接口拿来调用，dubbo会自动的找B服务器的这段代码，屏蔽了整个调用细节。\n\n类似Mybatis，调用数据库是只需要写do-mapping接口，调用接口方法就行了。\n\n**2.智能负载均衡**\n\n内置多种负载均衡策略，智能感知下游节点健康状况，显著减少调用延迟，提高系统吞吐量。\n\n一个服务1台服务器不够时部署多台后，会自动找空闲服务器运行。\n\n不会压垮某一台服务器，也不会让某服务器太闲浪费资源。\n\n**3.服务自动注册与发现**\n\n支持多种注册中心服务，服务实例上下线实时感知。\n\n业务非常多，订单调用支付业务时如何知道业务服务器是否知道有问题切在哪，为了动态感知，将所有程序注册到注册中心，维护注册清单。调用时会问一下调用的服务在哪个服务器，选择请求量最小的。建立通信，进行远程调用。\n\n**4.高度可扩展能力**\n\n遵循微内核+插件的设计原则，所有核心能力如Protocol、Transport、Serialization被设计为扩展点，平等对待内置实现和第三方实现。\n\n所有东西都可扩展。\n\n**5.运行期流量调度**\n\n内置条件、脚本等路由策略，通过配置不同的路由规则，轻松实现灰度发布，同机房优先等功能。\n\n灰度发布：比如有个用户服务，现在在100台上服务器在跑，用户服务做了升级，害怕升级不稳定，可以先选定20台服务器，让他们用新版本的用户服务，剩下80台用旧版本的用户服务。等20台用的没问题了，再选20台，一点一点增加，知道100台都过度到新版本用户服务。可以配置不同路由规则，请求进来后一部分用新版本服务。慢慢从旧服务转变到新服务的过程。\n\n**6.可视化的服务治理与运维**\n\n提供丰富服务治理、运维工具：随时查询服务元数据、服务健康状态及调用统计，实时下发路由策略、调整配置参数。\n\n可以随时查询服务的信息、健康状况、调用统计记录等等。通过可视化界面。\n\n### 2.2 dubbo设计架构\n\n![Untitled%207.png](Untitled%207.png)\n\n[节点角色说明](https://www.notion.so/6c6f03ae75794978a31ec967f82fec02)\n\n**运行流程**\n\n1. 服务容器负责启动，加载，运行服务提供者。\n2. 服务提供者在启动时，向注册中心注册自己提供的服务。\n3. 服务消费者在启动时，向注册中心订阅自己所需的服务。当某一个提供者下线了，基于长连接方式，将这个变更推送给消费者，可以实时知道有一个提供者不能调用了。当消费者拿到所有可以调的服务后，可以调用提供者提供的服务，调用时根据负载均衡算法选择一个提供者调用。\n4. 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。\n5. 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。\n6. 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。\n\nDubbo 架构具有以下几个特点，分别是连通性、健壮性、伸缩性、以及向未来架构的升级性。\n\n0、1、2是初始时启动完成的，第3、5布是异步的。第4步是同步调用。\n\n应先创建提供者，注册到注册中心，再编写消费者，消费者从注册中心调用提供者。然后再编写消费者如何消费提供者提供的功能。\n\n**连通性[](https://dubbo.apache.org/zh/docs/v2.7/user/preface/architecture/#%E8%BF%9E%E9%80%9A%E6%80%A7)**\n\n- 注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力较小\n- 监控中心负责统计各服务调用次数，调用时间等，统计先在内存汇总后每分钟一次发送到监控中心服务器，并以报表展示\n- 服务提供者向注册中心注册其提供的服务，并汇报调用时间到监控中心，此时间不包含网络开销\n- 服务消费者向注册中心获取服务提供者地址列表，并根据负载算法直接调用提供者，同时汇报调用时间到监控中心，此时间包含网络开销\n- 注册中心，服务提供者，服务消费者三者之间均为长连接，监控中心除外\n- 注册中心通过长连接感知服务提供者的存在，服务提供者宕机，注册中心将立即推送事件通知消费者\n- 注册中心和监控中心全部宕机，不影响已运行的提供者和消费者，消费者在本地缓存了提供者列表\n- 注册中心和监控中心都是可选的，服务消费者可以直连服务提供者\n\n**健壮性**\n\n- 监控中心宕掉不影响使用，只是丢失部分采样数据\n- 数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务\n- 注册中心对等集群，任意一台宕掉后，将自动切换到另一台\n- 注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯\n- 服务提供者无状态，任意一台宕掉后，不影响使用\n- 服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复\n\n**伸缩性**\n\n- 注册中心为对等集群，可动态增加机器部署实例，所有客户端将自动发现新的注册中心\n- 服务提供者无状态，可动态增加机器部署实例，注册中心将推送新的服务提供者信息给消费者\n\n**升级性[](https://dubbo.apache.org/zh/docs/v2.7/user/preface/architecture/#%E5%8D%87%E7%BA%A7%E6%80%A7)**\n\n当服务集群规模进一步扩大，带动IT治理结构进一步升级，需要实现动态部署，进行流动计算，现有分布式服务架构不会带来阻力。\n\n## 3 dubbo环境搭建\n\n### 3.1 搭建Zookeeper注册中心\n\n**3.1.1 安装jdk**\n\n上传jdk包到/opt/software\n\ntar -zxvf jdk-8u291-linux-x64.tar.gz\n\n```jsx\nexport JAVA_HOME=/opt/software/jdk1.8.0_291/  #jdk安装目录\nexport JRE_HOME=${JAVA_HOME}/jre\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib:$CLASSPATH\nexport JAVA_PATH=${JAVA_HOME}/bin:${JRE_HOME}/bin\nexport PATH=$PATH:${JAVA_PATH}\n```\n\n**3.1.2安装zookeeper**\n\n拷贝到/opt/software\n\n解压\n\n```jsx\ntar -zxvf apache-zookeeper-3.7.0.tar.gz\n```\n\n**3.1.3修改zookeeper配置**\n\n将\"/opt/software/apache-zookeeper-3.7.0/conf/zoo_sample.cfg\"拷贝份zoo.cfg\n\n打开zoo.cfg，修改vim zoo.cfg\n\n```jsx\ndataDir=/opt/software/apache-zookeeper-3.7.0/zkData/\n```\n\n**3.1.4操作zookeeper**\n\n(1) 启动zookeeper\n\n```jsx\ncd /opt/software/apache-zookeeper-3.7.0/bin\n./zkServer.sh start\n```\n\n(2) 查看进程\n\n```jsx\njps\n./zkServer.sh status\n```\n\n(3)启动客户端\n\n```jsx\n./zkCli.sh\nquit\n```\n\n(4) 关闭zookeeper\n\n```jsx\n./zkServer.sh stop\n```\n\n### 3.2. 搭建监控中心\n\n[https://github.com/apache/dubbo-admin](https://github.com/apache/dubbo-admin)\n\nroot\n\nroot\n\n3.2.1 **服务治理**\n\n服务治理的部分，按照Dubbo 2.7的格式进行配置，同时兼容Dubbo 2.6，详见[这里](https://github.com/apache/dubbo-admin/wiki/%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E5%85%BC%E5%AE%B9%E6%80%A7%E8%AF%B4%E6%98%8E)\n\n3.2.2 **前端部分**\n\n- 使用[Vue.js](https://vuejs.org/)作为javascript框架\n- [dubbo-admin-ui/README.md](https://github.com/apache/dubbo-admin/blob/develop/dubbo-admin-ui/README.md)中有更详细的介绍\n- 设置 npm **代理镜像** : 如果遇到了网络问题，可以设置npm代理镜像来加速npm install的过程：在~/.npmrc中增加 `registry =https://registry.npm.taobao.org`\n\n3.2.3 **后端部分**\n\n- 标准spring boot工程\n- [application.properties配置说明](https://github.com/apache/dubbo-admin/wiki/Dubbo-Admin%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E)\n\n3.2.4 **生产环境配置**\n\n1. 下载代码: `git clone https://github.com/apache/dubbo-admin.git`\n2. 在 `dubbo-admin-server/src/main/resources/application.properties`中指定注册中心地址\n3. 构建\n\n    > mvn clean package -Dmaven.test.skip=true\n\n4. 启动\n    - `mvn --projects dubbo-admin-server spring-boot:run`或者\n    - `cd dubbo-admin-distribution/target; java -jar dubbo-admin-0.1.jar`\n5. 访问 `http://localhost:8080`\n\n---\n\n3.2.5 **开发环境配置**\n\n- 运行`dubbo admin server, dubbo admin server`是一个标准的spring boot项目, 可以在任何java IDE中运行它\n- 运行`dubbo admin ui` `dubbo admin ui`由npm管理和构建，在开发环境中，可以单独运行: `npm run dev`\n- 页面访问 访问 `http://localhost:8081`, 由于前后端分开部署，前端支持热加载，任何页面的修改都可以实时反馈，不需要重启应用。\n\n3.2.6 **Swagger 支持**\n\n部署完成后，可以访问 [http://localhost:8080/swagger-ui.html](http://localhost:8080/swagger-ui.html) 来查看所有的restful api\n\n### 4 dubbo-helloworld\n\n**4.1 需求**\n\n![Untitled%208.png](Untitled%208.png)\n\n**4.2 工程架构** \n\n![Untitled%209.png](Untitled%209.png)\n\n服务化最佳实践\n\n[https://dubbo.apache.org/zh/docs/v2.7/user/best-practice/](https://dubbo.apache.org/zh/docs/v2.7/user/best-practice/)\n\n分包：\n\n建议将服务接口、服务模型、服务异常等均放在 API 包中，因为服务模型和异常也是 API 的一部分，这样做也符合分包原则：重用发布等价原则(REP)，共同重用原则(CRP)。\n\n如果需要，也可以考虑在 API 包中放置一份 Spring 的引用配置，这样使用方只需在 Spring 加载过程中引用此配置即可。配置建议放在模块的包目录下，以免冲突，如：`com/alibaba/china/xxx/dubbo-reference.xml`。\n\n粒度：\n\n服务接口尽可能大粒度，每个服务方法应代表一个功能，而不是某功能的一个步骤，否则将面临分布式事务问题，Dubbo 暂未提供分布式事务支持。\n\n服务接口建议以业务场景为单位划分，并对相近业务做抽象，防止接口数量爆炸。\n\n不建议使用过于抽象的通用接口，如：`Map query(Map)`，这样的接口没有明确语义，会给后期维护带来不便。\n\n```jsx\n<!-- 1、指定当前服务/应用的名字（同样的服务名字相同，不要和别的服务同名） -->\n<dubbo:application name=\"user-service-provider\"></dubbo:application>\n\n<!-- 2、指定注册中心的位置 -->\n<!-- <dubbo:registry address=\"zookeeper://127.0.0.1:2181\"></dubbo:registry> -->\n<dubbo:registry protocol=\"zookeeper\" address=\"127.0.0.1:2181\"></dubbo:registry>\n\n<!-- 3、指定通信规则（通信协议？通信端口） -->\n<dubbo:protocol name=\"dubbo\" port=\"20882\"></dubbo:protocol>\n\n<!-- 4、暴露服务   ref：指向服务的真正的实现对象 -->\n<dubbo:service interface=\"gmall.service.OrderService\"\n\tref=\"userServiceImpl01\" timeout=\"1000\" version=\"1.0.0\">\n\t<dubbo:method name=\"getUserAddressList\" timeout=\"1000\"></dubbo:method>\n</dubbo:service>\n\n<!--统一设置服务提供方的规则  -->\n<dubbo:provider timeout=\"1000\"></dubbo:provider>\n```\n\n**4.3 创建模块**\n\n1、gmall-interface：公共接口层（model，service，exception…）\n\n作用：定义公共接口，也可以导入公共依赖\n\n```jsx\n1、Bean模型\npackage gmall.bean;\n\nimport java.io.Serializable;\n\n/**\n * 用户地址\n *\n * @author lfy\n */\npublic class UserAddress implements Serializable {\n\n    private Integer id;\n    private String userAddress; //用户地址\n    private String userId; //用户id\n    private String consignee; //收货人\n    private String phoneNum; //电话号码\n    private String isDefault; //是否为默认地址    Y-是     N-否\n\n    public UserAddress() {\n        super();\n        // TODO Auto-generated constructor stub\n    }\n\n    public UserAddress(Integer id, String userAddress, String userId, String consignee, String phoneNum,\n                       String isDefault) {\n        super();\n        this.id = id;\n        this.userAddress = userAddress;\n        this.userId = userId;\n        this.consignee = consignee;\n        this.phoneNum = phoneNum;\n        this.isDefault = isDefault;\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getUserAddress() {\n        return userAddress;\n    }\n\n    public void setUserAddress(String userAddress) {\n        this.userAddress = userAddress;\n    }\n\n    public String getUserId() {\n        return userId;\n    }\n\n    public void setUserId(String userId) {\n        this.userId = userId;\n    }\n\n    public String getConsignee() {\n        return consignee;\n    }\n\n    public void setConsignee(String consignee) {\n        this.consignee = consignee;\n    }\n\n    public String getPhoneNum() {\n        return phoneNum;\n    }\n\n    public void setPhoneNum(String phoneNum) {\n        this.phoneNum = phoneNum;\n    }\n\n    public String getIsDefault() {\n        return isDefault;\n    }\n\n    public void setIsDefault(String isDefault) {\n        this.isDefault = isDefault;\n    }\n\n}\n\n2、OrderService 接口\npackage gmall.service;\n\nimport gmall.bean.UserAddress;\nimport java.util.List;\n\n/**\n * 订单服务\n * @author guoyh\n * @date 2021/7/5\n */\npublic interface OrderService {\n\n    public List<UserAddress> initOrder(String userId);\n}\n\n3、UserService接口\npackage gmall.service;\n\nimport gmall.bean.UserAddress;\nimport java.util.List;\n\n/**\n * 用户服务\n * @author guoyh\n * @date 2021/7/5\n */\npublic interface UserService {\n\n    /**\n     * 按照用户id返回所有收货地址\n     *\n     * @param userId\n     * @return List<UserAddress>\n     */\n    public List<UserAddress> getUserAddressList(String userId);\n\n}\n```\n\n2、user-service-provider：用户模块（对用户接口的实现）\n\n```jsx\n1、pom.xml\n\t<!-- 引入公共接口 -->\n\t<dependency>\n\t  <groupId>org.apache.dubbo</groupId>\n\t  <artifactId>gmall-interface</artifactId>\n\t  <version>0.0.1-SNAPSHOT</version>\n\t</dependency>\t\n\n2、UserServiceImpl服务\npackage com.atguigu.gmall.service.impl;\n\nimport gmall.bean.UserAddress;\nimport gmall.service.UserService;\nimport java.util.Arrays;\nimport java.util.List;\n\n/**\n * 1、将服务提供者将服务注册到注册中心（暴漏服务）\n * 1) 导入dubbo依赖\n * 2、让服务消费者去注册中心订阅服务的服务地址\n *\n * @author guoyh\n * @date 2021/7/5\n */\npublic class UserServiceImpl implements UserService {\n\n    @Override\n    public List<UserAddress> getUserAddressList(String userId) {\n        UserAddress userAddressOne = new UserAddress();\n        userAddressOne.setUserAddress(\"北京市区昌平\");\n        UserAddress userAddressTwo = new UserAddress();\n        userAddressTwo.setUserAddress(\"天安门\");\n        return Arrays.asList(userAddressOne, userAddressTwo);\n    }\n}\n```\n\n3、user-service-consumer：订单模块（调用用户模块）\n\n```jsx\n1、pom.xml\n\t<dependency>\n\t  <groupId>org.apache.dubbo</groupId>\n\t  <artifactId>gmall-interface</artifactId>\n\t  <version>0.0.1-SNAPSHOT</version>\n\t</dependency>\n\t\n2、OrderServiceImpl服务\npackage com.atguigu.gmall.service.impl;\n\nimport gmall.bean.UserAddress;\nimport gmall.service.OrderService;\nimport gmall.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport java.util.List;\n\n/**\n * @author guoyh\n * @date 2021/7/5\n */\n@Service\npublic class OrderServiceImpl implements OrderService {\n\n    @Autowired\n    UserService userService;\n\n    @Override\n    public List<UserAddress> initOrder(String userId) {\n        System.out.println(\"用户id:\" + userId);\n        // 1、查询用户收获地址\n        List<UserAddress> userAddressList = userService.getUserAddressList(userId);\n        for (UserAddress address : userAddressList) {\n            System.out.println(address.getUserAddress());\n        }\n        return userAddressList;\n    }\n}\n```\n\n现在这样是无法进行调用的。我们gmall-order-web引入了gmall-interface，但是interface的实现是gmall-user，我们并没有引入，而且实际他可能还在别的服务器中。\n\n**4.4 使用dubbo改造**\n\n1、改造user-service-provider作为服务提供者\n\n```jsx\n1、pom.xml\n\t<!-- 引入dubbo -->\n\t<!-- https://mvnrepository.com/artifact/com.alibaba/dubbo -->\n\t<dependency>\n\t  <groupId>com.alibaba</groupId>\n\t  <artifactId>dubbo</artifactId>\n\t  <version>2.6.2</version>\n\t</dependency>\n\t<!-- 注册中心使用的是zookeeper，引入操作zookeeper的客户端端 -->\n\t<dependency>\n\t  <groupId>org.apache.curator</groupId>\n\t  <artifactId>curator-framework</artifactId>\n\t  <version>2.12.0</version>\n\t</dependency>\n\n2、配置提供者provider.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\n\t\thttp://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd\">\n\n    <!-- 1、指定当前服务/应用的名字（同样的服务名字相同，不要和别的服务同名） -->\n    <dubbo:application name=\"user-service-provider\"></dubbo:application>\n\n    <!-- 2、指定注册中心的位置 -->\n    <!-- <dubbo:registry address=\"zookeeper://127.0.0.1:2181\"></dubbo:registry> -->\n    <dubbo:registry protocol=\"zookeeper\" address=\"127.0.0.1:2181\"></dubbo:registry>\n\n    <!-- 3、指定通信规则（通信协议？通信端口） -->\n    <dubbo:protocol name=\"dubbo\" port=\"20882\"></dubbo:protocol>\n\n    <!-- 4、暴露服务   ref：指向服务的真正的实现对象 -->\n    <dubbo:service interface=\"gmall.service.UserService\"\n                   ref=\"userServiceImpl\" timeout=\"1000\" version=\"1.0.0\">\n        <!--<dubbo:method name=\"getUserAddressList\" timeout=\"1000\"/>-->\n    </dubbo:service>\n\n    <!-- 服务的真正实现 -->\n    <bean id=\"userServiceImpl\" class=\"com.atguigu.gmall.service.impl.UserServiceImpl\"></bean>\n</beans>\n\n3.启动服务\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\npublic class MainApplication {\n    public static void main(String[] args) throws Exception {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[]{\"provider.xml\"});\n        context.start();\n        //为了不让服务终止，在这阻塞读取一个字符\n        System.in.read(); // 按任意键退出\n    }\n}\n```\n\n2、改造user-service-consumer作为服务消费者\n\n```jsx\n1、pom.xml\n\t<!-- 引入dubbo -->\n\t<!-- https://mvnrepository.com/artifact/com.alibaba/dubbo -->\n\t<dependency>\n\t  <groupId>com.alibaba</groupId>\n\t  <artifactId>dubbo</artifactId>\n\t  <version>2.6.2</version>\n\t</dependency>\n\t<!-- 注册中心使用的是zookeeper，引入操作zookeeper的客户端端 -->\n\t<dependency>\n\t  <groupId>org.apache.curator</groupId>\n\t  <artifactId>curator-framework</artifactId>\n\t  <version>2.12.0</version>\n\t</dependency>\n\n2、配置消费者consumer.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd\n\t\thttp://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\n\t\thttp://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd\">\n\n    <!-- 让注解能够生效 -->\n    <context:component-scan base-package=\"com.atguigu.gmall.service.impl\"/>\n\n    <!-- 1、指定当前服务/应用的名字（同样的服务名字相同，不要和别的服务同名） -->\n    <dubbo:application name=\"order-service-consumer\"></dubbo:application>\n\n    <!-- 2、指定注册中心的位置 -->\n    <dubbo:registry address=\"zookeeper://127.0.0.1:2181\"></dubbo:registry>\n\t\t\n\t\t<!-- 3、生成远程服务代理，可以和本地bean一样使用demoService -->\n    <dubbo:reference interface=\"gmall.service.UserService\"\n                     id=\"userService\">\n        <dubbo:method name=\"getUserAddressList\"/>\n    </dubbo:reference>\n\n    <!-- 6、连接监控中心 -->\n    <dubbo:monitor protocol=\"registry\"></dubbo:monitor>\n</beans>\n```\n\n3、调用测试\n\n```jsx\npackage com.atguigu.gmall.service.impl;\n\nimport gmall.bean.UserAddress;\nimport gmall.service.OrderService;\nimport gmall.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n/**\n * @author guoyh\n * @date 2021/7/5\n */\n@Service\npublic class OrderServiceImpl implements OrderService {\n\n    @Autowired\n    UserService userService;\n\n    @Override\n    public List<UserAddress> initOrder(String userId) {\n        System.out.println(\"用户id:\" + userId);\n        // 1、查询用户收获地址\n        List<UserAddress> userAddressList = userService.getUserAddressList(userId);\n        for (UserAddress address : userAddressList) {\n            System.out.println(address.getUserAddress());\n        }\n        return userAddressList;\n    }\n}\n```\n\n4、注解版本\n\n```jsx\n1、服务提供方\n<dubbo:application name=\"gmall-user\"></dubbo:application>\n  <dubbo:registry address=\"zookeeper://118.24.44.169:2181\" />\n  <dubbo:protocol name=\"dubbo\" port=\"20880\" />\n<dubbo:annotation package=\"com.atguigu.gmall.user.impl\"/>\n\nimport com.alibaba.dubbo.config.annotation.Service;\nimport com.atguigu.gmall.bean.UserAddress;\nimport com.atguigu.gmall.service.UserService;\nimport com.atguigu.gmall.user.mapper.UserAddressMapper;\n\n@Service //使用dubbo提供的service注解，注册暴露服务\npublic class UserServiceImpl implements UserService {\n\n\t@Autowired\n\tUserAddressMapper userAddressMapper;\n\n2、服务消费方\n<dubbo:application name=\"gmall-order-web\"></dubbo:application>\n<dubbo:registry address=\"zookeeper://118.24.44.169:2181\" />\n<dubbo:annotation package=\"com.atguigu.gmall.order.controller\"/>\n\nimport com.alibaba.dubbo.config.annotation.Reference;\nimport gmall.bean.UserAddress;\nimport gmall.service.OrderService;\nimport gmall.service.UserService;\n@Controller\npublic class OrderController {\n\t\n\t@Reference  //使用dubbo提供的reference注解引用远程服务\n\tUserService userService;\n\t\n  @Override\n    public List<UserAddress> initOrder(String userId) {\n        System.out.println(\"用户id:\" + userId);\n        // 1、查询用户收获地址\n        List<UserAddress> userAddressList = userService.getUserAddressList(userId);\n        return userAddressList;\n    }\n}\n```\n\n### 5、监控中心\n\n5.1、dubbo-admin\n\n图形化的服务管理页面；安装时需要指定注册中心地址，即可从注册中心中获取到所有的提供者/消费者进行配置管理\n\n5.2、dubbo-monitor-simple\n\n简单的监控中心；\n\n1)、安装\n\n```jsx\n1、下载 dubbo-ops\nhttps://github.com/apache/incubator-dubbo-ops\n2、修改配置指定注册中心地址\n进入 dubbo-monitor-simple\\src\\main\\resources\\conf\n修改 dubbo.properties文件\n3、打包dubbo-monitor-simple\nmvn clean package -Dmaven.test.skip=true\n4、解压 tar.gz 文件，并运行start.bat\n如果缺少servlet-api，自行导入servlet-api再访问监控中心\n5、启动访问8080\n```\n\n2)、监控中心配置\n\n```jsx\n所有服务配置连接监控中心，进行监控统计\n<!-- 监控中心协议，如果为protocol=\"registry\"，表示从注册中心发现监控中心地址，否则直连监控中心 -->\n<dubbo:monitor protocol=\"registry\"></dubbo:monitor>\n```\n\nSimple Monitor 挂掉不会影响到 Consumer 和 Provider 之间的调用，所以用于生产环境不会有风险。\n\nSimple Monitor 采用磁盘存储统计信息，请注意安装机器的磁盘限制，如果要集群，建议用mount共享磁盘。\n\n### 6、SpringBoot 整合 Dubbo\n\n```jsx\n<!-- SpringBoot版本 -->\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.0.4.RELEASE</version>\n    <relativePath/> <!-- lookup parent from repository -->\n</parent>\n\n<!-- JDK 1.8-->\n<properties>\n    <java.version>1.8</java.version>\n</properties>\n\n<!-- 引入公共接口项目-->\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>gmall-interface</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n  </dependency>\n```\n\n6.1、引入spring-boot-starter以及dubbo和curator的依赖\n\n注意starter版本适配：\n\n![Untitled%2010.png](Untitled%2010.png)\n\n```jsx\n<!-- Dubbo Spring Boot Starter -->\n<dependency>\n  <groupId>com.alibaba.boot</groupId>\n  <artifactId>dubbo-spring-boot-starter</artifactId>\n  <version>0.2.0</version>\n</dependency>\n```\n\n6.2、配置application.properties\n\n```jsx\n1、提供者配置\n#dubbo服务名称\ndubbo.application.name=boot-order-service-provider\n#注册中心地址\ndubbo.registry.address=127.0.0.1:2181\n#注册中心协议\ndubbo.registry.protocol=zookeeper\n#通信协议\ndubbo.protocol.name=dubbo\ndubbo.protocol.prot=20880\n#监控中心地址:registry从注册中心自动发现\ndubbo.monitor.protocol=registry\n#application.name就是服务名，不能跟别的dubbo提供端重复\n#registry.protocol 是指定注册中心协议\n#registry.address 是注册中心的地址加端口号\n#protocol.name 是分布式固定是dubbo,不要改。\n#base-package  注解方式要扫描的包\n\n2、消费者配置\ndubbo.application.name=gmall-order-web\ndubbo.registry.protocol=zookeeper\ndubbo.registry.address=192.168.67.159:2181\ndubbo.scan.base-package=com.atguigu.gmall\ndubbo.protocol.name=dubbo\n```\n\n3、dubbo注解\n\n```jsx\n#提供者:实现类开放服务\nimport com.alibaba.dubbo.config.annotation.Service;\n@Service\n\n#消费者:从注册中心自动获取可用的实现服务\nimport com.alibaba.dubbo.config.annotation.Reference;\n@Reference\n\n如果没有在配置中写dubbo.scan.base-package,还需要使用@EnableDubbo注解\nimport com.alibaba.dubbo.config.spring.context.annotation.EnableDubbo;\n@EnableDubbo\n```\n\n# 二、dubbo配置\n\n## 1、配置原则\n\n![Untitled%2011.png](Untitled%2011.png)\n\nJVM 启动 -D 参数优先，这样可以使用户在部署和启动时进行参数重写，比如在启动时需改变协议的端口。\n\nXML /applicatoin.properties次之，如果在 XML 中有配置，则 dubbo.properties 中的相应配置项无效。(自己测试结果为dubbo.properties 比XML/application.properties高)\n\nProperties 最后，相当于缺省值，只有 XML 没有配置时，dubbo.properties 的相应配置项才会生效，通常用于共享公共配置，比如应用名。\n\n[https://dubbo.apache.org/zh/docsv2.7/user/examples/preflight-check/](https://dubbo.apache.org/zh/docsv2.7/user/examples/preflight-check/)\n\n**启动时检查：**\n\nDubbo 缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止 Spring 初始化完成，以便上线时，能及早发现问题，默认 `check=\"true\"`。\n\n可以通过 `check=\"false\"` 关闭检查，比如，测试时，有些服务不关心，或者出现了循环依赖，必须有一方先启动。\n\n```jsx\n-D\njava -Ddubbo.reference.com.foo.BarService.check=false\njava -Ddubbo.reference.check=false\njava -Ddubbo.consumer.check=false \njava -Ddubbo.registry.check=false\n\nXML\n<dubbo:reference interface=\"com.foo.BarService\" check=\"false\" />\n<dubbo:consumer check=\"false\" />\n<dubbo:registry check=\"false\" />\n\ndubbo.properties\ndubbo.reference.com.foo.BarService.check=false\ndubbo.reference.check=false\ndubbo.consumer.check=false\ndubbo.registry.check=false\n```\n\n## 2、重试次数\n\n失败自动切换，当出现失败，重试其它服务器，但重试会带来更长延迟。可通过 retries=\"2\" 来设置重试次数(不含第一次)。\n\n```jsx\n重试次数配置如下：\n<dubbo:service retries=\"2\" />\n或\n<dubbo:reference retries=\"2\" />\n或\n<dubbo:reference>\n    <dubbo:method name=\"findFoo\" retries=\"2\" />\n</dubbo:reference>\n```\n\n## 3、超时时间\n\n由于网络或服务端不可靠，会导致调用出现一种不确定的中间状态（超时）。为了避免超时导致客户端资源（线程）挂起耗尽，必须设置超时时间.\n\n3.1、消费端\n\n```jsx\n全局超时配置\n<dubbo:consumer timeout=\"5000\" />\n\n指定接口以及特定方法超时配置\n<dubbo:reference interface=\"com.foo.BarService\" timeout=\"2000\">\n    <dubbo:method name=\"sayHello\" timeout=\"3000\" />\n</dubbo:reference>\n```\n\n3.2、提供方\n\n```jsx\n全局超时配置\n<dubbo:provider timeout=\"5000\" />\n\n指定接口以及特定方法超时配置\n<dubbo:provider interface=\"com.foo.BarService\" timeout=\"2000\">\n    <dubbo:method name=\"sayHello\" timeout=\"3000\" />\n</dubbo:provider>\n```\n\n3.3、配置规则\n\nDubbo推荐在Provider上尽量多配置Consumer端属性\n\n```jsx\n1、作服务的提供者，比服务使用方更清楚服务性能参数，如调用的超时时间，合理的重试次数，等等\n2、在Provider配置后，Consumer不配置则会使用Provider的配置值，即Provider配置可以作为Consumer的缺省值。否则，Consumer会使用Consumer端的全局设置，这对于Provider不可控的，并且往往是不合理的\n```\n\n配置的覆盖规则：\n\n1) 方法级配置别优于接口级别，即小Scope优先\n\n2) Consumer端配置 优于 Provider配置 优于 全局配置，\n\n3) 最后是缺省值（见配置文档）\n\n## 4、版本号\n\n[https://dubbo.apache.org/zh/docsv2.7/user/examples/multi-versions/](https://dubbo.apache.org/zh/docsv2.7/user/examples/multi-versions/)\n\n当一个接口实现，出现不兼容升级时，可以用版本号过渡，版本号不同的服务相互间不引用。可以按照以下的步骤进行版本迁移：\n\n在低压力时间段，先升级一半提供者为新版本\n\n再将所有消费者升级为新版本\n\n然后将剩下的一半提供者升级为新版本\n\n```jsx\n服务老版本提供者配置：\n<dubbo:service interface=\"com.foo.BarService\" version=\"1.0.0\" />\n\n服务新版本提供者配置：\n<dubbo:service interface=\"com.foo.BarService\" version=\"2.0.0\" />\n\n服务老版本消费者配置：\n<dubbo:reference id=\"barService\" interface=\"com.foo.BarService\" version=\"1.0.0\" />\n\n新版本服务消费者配置：\n<dubbo:reference id=\"barService\" interface=\"com.foo.BarService\" version=\"2.0.0\" />\n\n如果不需要区分版本，可以按照以下的方式配置：\n<dubbo:reference id=\"barService\" interface=\"com.foo.BarService\" version=\"*\" />\n```\n\n## 5、本地存根\n\n[https://dubbo.apache.org/zh/docsv2.7/user/examples/local-stub/](https://dubbo.apache.org/zh/docsv2.7/user/examples/local-stub/)\n\n远程服务后，客户端通常只剩下接口，而实现全在服务器端，但提供方有些时候想在客户端也执行部分逻辑，比如：做 ThreadLocal 缓存，提前验证参数，调用失败后伪造容错数据等等，此时就需要在 API 中带上 Stub，客户端生成 Proxy 实例，会把 Proxy 通过构造函数传给 Stub [1](https://dubbo.apache.org/zh/docsv2.7/user/examples/local-stub/#fn:1)，然后把 Stub 暴露给用户，Stub 可以决定要不要去调 Proxy。\n\n![stub.jpg](stub.jpg)\n\n在消费方，写一个远程接口本地的实现，提供 Stub 的实现 ：\n\n```jsx\npackage com.foo;\npublic class BarServiceStub implements BarService {\n    private final BarService barService;\n    \n    // 必须有一个有参构造，并且使构造函数传入真正的远程代理对象\n    public BarServiceStub(BarService barService){\n        this.barService = barService;\n    }\n \n    public String sayHello(String name) {\n        // 此代码在客户端执行, 你可以在客户端做ThreadLocal本地缓存，或预先验证参数是否合法，等等\n        // ...自己的代码\n\t\t\t\t// 当自己代码执行结束后，再调真正的远程服务\n\t\t\t\ttry {\n            return barService.sayHello(name);\n        } catch (Exception e) {\n            // 你可以容错，可以做任何AOP拦截事项\n            return \"容错数据\";\n        }\n    }\n}\n```\n\n在 spring 配置文件中按以下方式配置：\n\n```jsx\n提供者方配置\n<dubbo:service interface=\"com.foo.BarService\" stub=\"true\" />\n\n消费者方配置\n<dubbo:reference interface=\"gmall.service.UserService\"\n  id=\"userService\" timeout=\"5000\" retries=\"3\" version=\"*\" \n\tstub=\"com.atguigu.gmall.service.impl.UserServiceStub\">\n<dubbo:method name=\"getUserAddressList\" timeout=\"1000\"/>\n</dubbo:reference>\n```\n\n---\n\n1. Stub 必须有可传入 Proxy 的构造函数。 \n2. 在 interface 旁边放一个 Stub 实现，它实现 BarService 接口，并有一个传入远程 BarService 实例的构造函数 \n\n## 6、SpringBoot方式配置\n\n### 6.1、超时属性\n\n```jsx\nimport com.alibaba.dubbo.config.annotation.Service;\n@Service(timeout)\nimport com.alibaba.dubbo.config.annotation.Reference;\n@Reference(timeout = 0)\n```\n\n### 6.2、SpringBoot与Dubbo整合的三种方式\n\n**6.2.1、第一种**\n\n```jsx\n1.导入dobuuo-starter\n<dependency>\n\t<groupId>com.alibaba.boot</groupId>\n\t<artifactId>dubbo-spring-boot-starter</artifactId>\n\t<version>0.2.0</version>\n</dependency>\n\n2.配置application.properties\n#dubbo服务名称\ndubbo.application.name=boot-order-service-provider\n#注册中心地址\ndubbo.registry.address=127.0.0.1:2181\n#注册中心协议\ndubbo.registry.protocol=zookeeper\n#通信协议\ndubbo.protocol.name=dubbo\ndubbo.protocol.prot=20880\n#监控中心地址:registry从注册中心自动发现\ndubbo.monitor.protocol=registry\n\n3.暴漏服务注解@Service\n\n4.使用远程服务@Reference\n\n5.开启Dubbo注解功能@EnableDubbo\n\n#老版本会指定包扫描规则\ndubbo.scan.base-packages=com\n```\n\n**6.2.2、第二种：保留XML**\n\n想要做到方法级别的配置，保留dubbo的xml配置文件，之后可以在xml中做到method方法级别的配置。\n\n```jsx\n# 拷贝xml文件到resource目录,删除application.properties中dubbo的相关配置\n# 所有配置都在xml中\n1.导入dobuuo-starter\n<dependency>\n\t<groupId>com.alibaba.boot</groupId>\n\t<artifactId>dubbo-spring-boot-starter</artifactId>\n\t<version>0.2.0</version>\n</dependency>\n\n2.使用@ImportResource导入dubbo的xml配置文件\n//@EnableDubbo\n@ImportResource(location=\"classpath:provider.xml\")\n```\n\n**6.2.3、第三种:注解API配置类**\n\n将每一个组件手动创建到容器中\n\n```jsx\n1.创建配置类\npackage com.atguigu.gmall.config;\n\nimport com.alibaba.dubbo.config.*;\nimport gmall.service.UserService;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.Arrays;\n\n@Configuration\npublic class MyDubboConfig {\n\n    /**\n     * 提供者名\n     * @return\n     */\n    @Bean\n    public ApplicationConfig applicationConfig() {\n        ApplicationConfig applicationConfig = new ApplicationConfig();\n        applicationConfig.setName(\"boot-order-service-provider-config\");\n        return applicationConfig;\n    }\n\n    /**\n     * 注册中心地址\n     * @return\n     */\n    @Bean\n    public RegistryConfig registryConfig() {\n        RegistryConfig registryConfig = new RegistryConfig();\n        registryConfig.setProtocol(\"zookeeper\");\n        registryConfig.setAddress(\"127.0.0.1:2181\");\n        return registryConfig;\n    }\n\n    /**\n     * 通信规则\n     * @return\n     */\n    @Bean\n    public ProtocolConfig protocolConfig() {\n        ProtocolConfig protocolConfig = new ProtocolConfig();\n        protocolConfig.setName(\"dubbo\");\n        protocolConfig.setPort(20882);\n        return protocolConfig;\n    }\n\n    /**\n     * 配置暴漏服务\n     * @return\n     */\n    @Bean\n    public ServiceConfig<UserService> userServiceConfig(UserService userService) {\n        ServiceConfig<UserService> userServiceConfig = new ServiceConfig<>();\n        //配置接口级别\n        userServiceConfig.setInterface(UserService.class);\n        userServiceConfig.setRef(userService);\n        userServiceConfig.setVersion(\"1.0.0\");\n\n        //配置方法级别\n        MethodConfig methodConfig = new MethodConfig();\n        methodConfig.setName(\"getUserAddressList\");\n        methodConfig.setTimeout(1000);\n\n        userServiceConfig.setMethods(Arrays.asList(methodConfig));\n        return userServiceConfig;\n    }\n\n    /**\n     * 设置监控中心\n     * @return\n     */\n    @Bean\n    public MonitorConfig monitorConfig() {\n        MonitorConfig monitorConfig = new MonitorConfig();\n        monitorConfig.setProtocol(\"registry\");\n        return monitorConfig;\n    }\n}\n\n2.暴露服务接口\n@Service //暴露服务\n\n3.启动dubbo并指定扫描路径\n@EnableDubbo(scanBasePackages = \"com.atguigu.gmall\")\n```\n\n# 三、高可用\n\n## 3.1、zookeeper宕机与dubbo直连\n\n![Untitled%2012.png](Untitled%2012.png)\n\n注册中心的作用就是保存服务提供者位置信息，我们完全可以绕过注册中心使用dubbo直连.\n\n宕机了有缓存，依旧可以调用。没有注册中心使用直连\n\n```jsx\n@Reference(timeout = 0,url = \"127.0.0.1:20880\")\nUserService userService;\n```\n\n## 3.2、集群下dubbo负载均衡机制\n\n[https://dubbo.apache.org/zh/docsv2.7/user/examples/loadbalance/](https://dubbo.apache.org/zh/docsv2.7/user/examples/loadbalance/)\n\n在集群负载均衡时，Dubbo 提供了多种均衡策略，缺省为 random 随机调用,\n\n```jsx\n**Random LoadBalance**\n随机，按权重设置随机概率。\n在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。\n**RoundRobin LoadBalance**\n轮循，按公约后的权重设置轮循比率。\n存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。\n**LeastActive LoadBalance**\n最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。\n使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。\n**ConsistentHash LoadBalance**\n一致性 Hash，相同参数的请求总是发到同一提供者。\n当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。算法参见：http://en.wikipedia.org/wiki/Consistent_hashing\n缺省只对第一个参数 Hash，如果要修改，请配置 <dubbo:parameter key=\"hash.arguments\" value=\"0,1\" />\n缺省用 160 份虚拟节点，如果要修改，请配置 <dubbo:parameter key=\"hash.nodes\" value=\"320\" />\n```\n\n### 3.2.1、Random LoadBalance\n\n![Untitled%2013.png](Untitled%2013.png)\n\n### 3.2.2、RoundRobin LoadBalance\n\n第一调完，必须去第二个,根据权重1只能占2次，2占4次，3占1次。\n\n![Untitled%2014.png](Untitled%2014.png)\n\n### 3.2.3、LeastActive LoadBalance\n\n![Untitled%2015.png](Untitled%2015.png)\n\n每次都统计上次请求时间\n\n调哪个前会查那个上次最快\n\n### 3.2.4、ConsistentHash LoadBalance\n\n比如getUser,id都等于1的，根据hash分布都会来到1号机器。\n\n![Untitled%2016.png](Untitled%2016.png)\n\n### 3.2.5、配置\n\n默认为随机负载均衡机制\n\n![Untitled%2017.png](Untitled%2017.png)\n\n![Untitled%2018.png](Untitled%2018.png)\n\nXML：\n\n```jsx\n### **服务端服务级别**\n\n`<dubbo:service interface=\"...\" loadbalance=\"roundrobin\" />`\n\n### **客户端服务级别**\n\n`<dubbo:reference interface=\"...\" loadbalance=\"roundrobin\" />`\n\n### **服务端方法级别**\n\n`<dubbo:service interface=\"...\">\n    <dubbo:method name=\"...\" loadbalance=\"roundrobin\"/>\n</dubbo:service>`\n\n### **客户端方法级别**\n\n`<dubbo:reference interface=\"...\">\n    <dubbo:method name=\"...\" loadbalance=\"roundrobin\"/>\n</dubbo:reference>`\n```\n\n注解：\n\n```jsx\n@Reference(timeout = 0,loadbalance = \"roundrobin\") \n\n```\n\n![Untitled%2019.png](Untitled%2019.png)\n\n## 3.3、整合hystrix，服务熔断与降级处理\n\n### 3.3.1、服务降级\n\n什么是服务降级？\n\n当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理或换种简单的方式处理，从而释放服务器资源以保证核心交易正常运作或高效运作\n\n可以通过服务降级功能临时屏蔽某个出错的非关键服务，并定义降级后的返回策略。\n\n支持2种：\n\n- mock=force:return+null 表示消费方对该服务的方法调用都直接返回 null 值，不发起远程调用。用来屏蔽不重要服务不可用时对调用方的影响。（直接在客户端返回null，不发起远程调用）\n- 还可以改为 mock=fail:return+null 表示消费方对该服务的方法调用在失败后，再返回 null 值，不抛异常。用来容忍不重要服务不稳定时对调用方的影响。（到达一定超时时间，超时后调用在失败后，再返回 null 值，这个是服务已经调用了）\n\n通过服务降级手段，牺牲非核心业务的占用的资源，达到让其他核心业务能占用服务器更多资源\n\n**配置，在消费者端**\n\n第一种：屏蔽（不进行远程调用，返回null）\n\n![Untitled%2020.png](Untitled%2020.png)\n\n第二种：容错（当远程调用失败后，返回null）\n\n![Untitled%2021.png](Untitled%2021.png)\n\n### 3.3.2、集群容错\n\n在集群调用失败时，Dubbo 提供了多种容错方案，缺省为 failover 重试。\n\n```jsx\n1.**Failover Cluster**\n失败自动切换，当出现失败，重试其它服务器。通常**用于读操作**，但重试会带来更长延迟。\n可通过 retries=\"2\" 来设置重试次数(不含第一次)。\n\n重试次数配置如下：\n<dubbo:service retries=\"2\" />\n或\n<dubbo:reference retries=\"2\" />\n或\n<dubbo:reference>\n    <dubbo:method name=\"findFoo\" retries=\"2\" />\n</dubbo:reference>\n\n2.**Failfast Cluster**\n快速失败，只发起一次调用，失败立即报错。通常用于**非幂等性**的写操作，比如新增记录。\n\n3.**Failsafe Cluster**\n失败安全，出现异常时，直接**忽略**。通常用于写入审计日志等操作。\n\n4.**Failback Cluster**\n**失败自动恢复**，后台记录失败请求，定时重发。通常**用于消息通知**操作。\n\n5.**Forking Cluster**\n**并行调用**多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，\n但需要浪费更多服务资源。可通过 forks=\"2\" 来设置最大并行数。太浪费资源。\n\n6.**Broadcast Cluster**\n广播**调用所有提供者，逐个调用，任意一台报错则报错** [2]。\n通常**用于通知所有提供者更新缓存**或日志等本地资源信息。\n\n7.**集群模式配置**\n按照以下示例在服务提供方和消费方配置集群模式\n<dubbo:service cluster=\"failsafe\" />\n或\n<dubbo:reference cluster=\"failsafe\" />\n```\n\n### 3.3.3、实际开发整合hystrix提供容错（SpringCloud默认整合的框架）\n\nHystrix 旨在通过控制那些访问远程系统、服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力。Hystrix具备拥有回退机制和断路器功能的线程和信号隔离，请求缓存和请求打包，以及监控和配置等功能。\n\n**1、配置spring-cloud-starter-netflix-hystrix**\n\nspring boot官方提供了对hystrix的集成，直接在消费者、提供者的pom.xml里加入依赖：\n\n```jsx\n<dependency>\n\t<groupId>org.springframework.cloud</groupId>\n\t<artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n\t<version>1.4.4.RELEASE</version>\n</dependency>\n```\n\n然后在Application类上增加@EnableHystrix来启用hystrix starter：\n\n```jsx\n@SpringBootApplication\n@EnableHystrix\npublic class ProviderApplication {\n}\n```\n\n**2、配置Provider端**\n\n在Dubbo的Provider上增加@HystrixCommand配置，这样子调用就会经过Hystrix代理。\n\n```jsx\n@Service(version = \"1.0.0\")\npublic class HelloServiceImpl implements HelloService {\n\t\t//使用Hystrix代理，进行处理容错异常\n    @HystrixCommand(commandProperties = {\n     @HystrixProperty(name = \"circuitBreaker.requestVolumeThreshold\", value = \"10\"),\n     @HystrixProperty(name = \"execution.isolation.thread.timeoutInMilliseconds\", value = \"2000\") })\n    @Override\n    public String sayHello(String name) {\n        // System.out.println(\"async provider received: \" + name);\n        // return \"annotation: hello, \" + name;\n        throw new RuntimeException(\"Exception to show hystrix enabled.\");\n    }\n}\n```\n\n**3、配置Consumer端**\n\n对于Consumer端，则可以增加一层method调用，并在method上配置@HystrixCommand。当调用出错时，会走到fallbackMethod = \"reliable\"的调用里。\n\n```jsx\n@Reference(version = \"1.0.0\")\n    private HelloService demoService;\n\t\t//fallbackMethod 回调方法,一旦调用失败出错后，调用reliable方法\n\t\t//就不用在调用代码中trycatch了\n    @HystrixCommand(fallbackMethod = \"reliable\")\n    public String doSayHello(String name) {\n        return demoService.sayHello(name);\n    }\n    public String reliable(String name) {\n        return \"hystrix fallback value\";\n    }\n```\n\n# 四、Dubbo原理\n\n## 4.1、RPC原理\n\nrpc就是想完成一次远程调用\n\n![Untitled%2022.png](Untitled%2022.png)\n\n一次完整的RPC调用流程（同步调用，异步另说）如下：\n\n1）Computer01（client）发起远程调用请求,接下来有一个代理对象client stub\n\n**2）client stub接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体；**\n\n**3）client stub找到服务地址，并将消息发送到服务端server stub；**\n\n**4）server stub收到消息后进行解码(可能传输的是序列化对象，需要反序列化)；**\n\n**5）server stub根据解码结果调用本地的方法服务；**\n\n**6）本地方法服务执行完成后，将数据结果返回给server stub；**\n\n**7）server stub将返回结果打包(序列化)成消息通过网络发送至消费方client stub；**\n\n**8）client stub接收到消息，并进行解码(反序列化)；**\n\n9）服务消费方Computer01得到最终结果。\n\nRPC框架的目标就是要2~8这些步骤都封装起来，这些细节对用户来说是透明的，不可见的。\n\n## 4.2、netty通信原理\n\nDubbo底层通信时是使用netty，Netty时基于Java的NIO(Non-Blocking IO)非阻塞,BIO(Blocking IO)阻塞IO。\n\n**BIO：**\n\n![Untitled%2023.png](Untitled%2023.png)\n\n每一个请求进来开一个线程Socket，读取Socket的输入流、进行业务逻辑等等。同时在这操作，并且此时在我们业务逻辑没完成之前，我们线程都不能得到释放的，这样我们的服务器就不能同时处理大量的请求。因为有大量的线程在等待业务逻辑的完成。\n\n**NIO：**\n\n![Untitled%2024.png](Untitled%2024.png)\n\nChannel：通道，通道里还有Buffer，利用Buffer进行数据传输。\n\nSelector ：一般称 为**选择器** ，也可以翻译为 **多路复用器。**\n\n通道状态：Connect（连接就绪）、Accept（接受就绪）、Read（读就绪）、Write（写就绪）。\n\n**基本原理：**\n\n1个Selector会有很多通道注册了进来，Selector通过监听多个通道，监听会有很多事件，如当Connect了发生什么，Accept了会做什么，Read或Write发生了时要做什么，当发现某一个通道数据准备好了。所以我们通过1个Selector监听多个通道的方式，当某个通道任何一个状态准备好了，我们可以额外开一个线程进行处理。这叫多路复用模型。\n\n![Untitled%2025.png](Untitled%2025.png)\n\n1.启动\n\n2.监听某一个端口\n\n3.初始化一个通道，注册到Selector中\n\n4.轮询监听通道的accept事件\n\n5.当accept事件发生后，扔到任务队列，处理通道信息，就与客户端建立连接来生成SocketChannel\n\n6.然后把刚生成的SocketChannel通道再注册到Selector里面，进行监听read、wirte事件\n\n7.read、wirte事件准备就绪了就来处理，抛给任务队列。\n\n注意：有2个Selector，一个是boss来进行监听准备就绪事件，另一个woker是当准备就绪后要做什么工作，把这个工作抛给woker慢慢来做。\n\n## 4.3、dubbo原理\n\n### 4.3.1、dubbo原理\t-   框架设计\n\n![Untitled%2026.png](Untitled%2026.png)\n\n**各层说明**\n\n- **config 配置层**：对外配置接口，以 `ServiceConfig`, `ReferenceConfig` 为中心，可以直接初始化配置类，也可以通过 spring 解析**配置生成配置类**\n- **proxy 服务代理层**：服务接口透明代理，**生成服务的客户端 Stub 和服务器端 Skeleton,** 以 `ServiceProxy` 为中心，扩展接口为 `ProxyFactory`\n- **registry 注册中心层**：封装服务地址的**注册与发现**，以服务 URL 为中心，扩展接口为 `RegistryFactory`, `Registry`, `RegistryService`\n- **cluster 路由层**：封装多个提供者的路由及**负载均衡**，并桥接注册中心，以 `Invoker` 为中心，扩展接口为 `Cluster`, `Directory`, `Router`, `LoadBalance`\n- **monitor 监控层**：RPC **调用次数和调用时间监控**，以 `Statistics` 为中心，扩展接口为 `MonitorFactory`, `Monitor`, `MonitorService`\n- **protocol 远程调用层**：**封装 RPC 调用**，以 `Invocation`, `Result` 为中心，扩展接口为 `Protocol`, `Invoker`, `Exporter`\n- **exchange 信息交换层**：封装请求响应模式，同步转异步，以 `Request`, `Response` 为中心，扩展接口为 `Exchanger`, `ExchangeChannel`, `ExchangeClient`, `ExchangeServer`，创建客户端和服务端，两个架起管道进行数据互联互通。\n- **transport 网络传输层**：抽象 mina 和 **netty (transport 底层)**为统一接口，以 `Message` 为中心，扩展接口为 `Channel`, `Transporter`, `Client`, `Server`, `Codec`\n- **serialize 数据序列化层**：可复用的一些工具，扩展接口为 `Serialization`, `ObjectInput`, `ObjectOutput`, `ThreadPool`\n\n**说明：**Consumer在左边，Provider在右边。Call为调用逻辑，黑颜色是依赖顺序。\n\n### 4.3.2、dubbo原理\t-   启动解析、加载配置信息\n\nBeanDefinitionParser定义解析器\n\nDubboBeanDefinitionParser中的parse方法来解析标签。挨个标签来解析。\n\nDubboBeanDefinitionParser构造器打断点看怎么创建出来的。\n\n![Untitled%2027.png](Untitled%2027.png)\n\ninit方法注册很多标签解析器。容器启动，解析每一个标签，每一个标签都有对应的***Config.class，保存到指定的对象中,Service标签牵扯到服务暴漏的功能。\n\n![Untitled%2028.png](Untitled%2028.png)\n\n### 4.3.3、dubbo原理\t-   服务暴露\n\n![dubbo-%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2.jpg](dubbo-%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2.jpg)\n\nService标签牵扯到服务暴漏的功能，ServiceBean它实现了InitalizingBean（它在创建完对象以后调用afterPropertisSet方法）、ApplicationListener(事件是ContextRefreshedEvent(当IOC容器完成后会回调onApplicationEvent方法))\n\nafterPropertisSet方法和onApplicationEvent方法都做了什么：\n\nafterPropertisSet方法保存配置的属性信息。\n\nonApplicationEvent方法判断当没有爆露时调用export方法暴漏服务，调用doExport方法。调用doExportUrls方法，第一步加载注册信息，再调用doExportUrlsFor1Portocol方法，创建invoker，调用protocol(DubboProtocol).export(wrapperInvoker)\n\n暴漏URL,OPENServer(url)，启动netty服务器，监听20880端口\n\n创建服务器createServer(url)\n\nExchangers.bind(url,requestHandler)绑定url和处理器\n\nTransporters.bind(url,new DecodeHandler(new HanderExchangesHandler()))这都是netty的底层，创建一个netty的服务器。\n\n注册提供者。\n\n总共2步：\n\n启动netty服务器，监听20880端口。\n\n注册中心进行注册服务，把注册好的地址，把注册信息保存在注册中心。\n\nmicrokernel plugin模式\n\n### 4.3.4、dubbo原理\t-   服务引用\n\n如何通过配置reference标签远程引用暴漏的服务。\n\n![Untitled](Untitled%2029.png)\n\n前置类似暴漏服务原理，对应的是ReferenceBean,特殊在implement FactoryBean，FactoryBean作用是当我们要获取userService，在引用userService的类中需要自动注入userService，需要从spring容器中找，通过调用FactoryBean的getObject方法获取userService对象，getObject调用ReferenceConfig的getT方法，如果ref引用是空的，就init（）初始化对象，ref = createProxy（map）。\n\n![Untitled](Untitled%2030.png)\n\n![Untitled](Untitled%2031.png)\n\n然后远程引用接口，urls保存了注册中心的地址。\n\n![Untitled](Untitled%2032.png)\n\nrefprotocal还是Protocal，Protocal有2种，1个是DubboProtocal，另一个是RegistryProtocol，这里调用RegistryProtocol的refer方法。\n\n![Untitled](Untitled%2033.png)\n\n先根据注册中心地址得到注册中心信息。然后调用doRefer,传入了注册中心地址，还有要引用的userService\n\n![Untitled](Untitled%2034.png)\n\n之后进行订阅服务\n\n![Untitled](Untitled%2035.png)\n\n订阅服务会进入到DubboProtocol，DubboProtocol会getClients获取客户端。\n\n![Untitled](Untitled%2036.png)\n\n拿到客户端，初始化客户端\n\n![Untitled](Untitled%2037.png)\n\n然偶会进行连接\n\n![Untitled](Untitled%2038.png)\n\n获取返回连接，调用Transporter.connect（），之后就到达了netty的底层。\n\n![Untitled](Untitled%2039.png)\n\n![Untitled](Untitled%2040.png)\n\n![Untitled](Untitled%2041.png)\n\n相当于创建一个netty客户端，根据url地址监听一个端口。创建完连接后返回DubboProtocol中，创建好invoker，返回invoker。\n\n![Untitled](Untitled%2042.png)\n\n获取创建好的invoker，里面有url地址，消费者地址。之后在消费者注册表里把刚创建的invoker注册进去。注册进入subscribeUrl订阅地址。记录消费者消费哪个服务。\n\n![Untitled](Untitled%2043.png)\n\n保存好了后返回到doRefer()\n\n![Untitled](Untitled%2044.png)\n\n但后一直返回到createProxy。ref代理对象就创建好了，远程信息等都在里面存好了。\n\n之后使用代理对象来执行远程调用方法。\n\n![Untitled](Untitled%2045.png)\n\n### 4.3.5、dubbo原理\t-   服务调用\n\n整体流程：\n\n![Untitled](Untitled%2046.png)\n\n代理对象如何执行方法呢，在这里打个断点。\n\n![Untitled](Untitled%2047.png)\n\n会调用invoke，并且会传入method和args并封装成一个叫RpcInvocation远程调用的对象。\n\n![Untitled](Untitled%2048.png)\n\n之后再进一个Invoker，它里面封装了FailOverCluster，他是dubbo带集群容错功能的invoker\n\n![Untitled](Untitled%2049.png)\n\n进去后查询有多少个可执行版本的方法，再获取负载均衡的机制，之后继续doInvoke\n\n![Untitled](Untitled%2050.png)\n\n之后有个select能根据我们的负载均衡策略进行负载随机选择1个invoker\n\n![Untitled](Untitled%2051.png)\n\n接下来调用invoker.invoke执行，到了真正要执行时还封装了一些filter，这个filter在最开始proxy代理对象要用invoker时会在外面封装filter来做（local、mock、cache）\n\n[https://dubbo.apache.org/zh/docsv2.7/user/examples/local-mock/](https://dubbo.apache.org/zh/docsv2.7/user/examples/local-mock/)\n\n[https://dubbo.apache.org/zh/docsv2.7/user/examples/result-cache/](https://dubbo.apache.org/zh/docsv2.7/user/examples/result-cache/)\n\n缓存功能时，然后invoker选中了负载均衡功能后，又进入filter，filter就是各个统计信息（监控中心等）ProtocolFilter，ProtocolFilter里封装到最终时DubboInvoker.\n\n![Untitled](Untitled%2052.png)\n\n![Untitled](Untitled%2053.png)\n\n![Untitled](Untitled%2054.png)\n\n在DubboInvoker中获取到在服务引用时建立的客户端，拿到引用的哪个远程服务，之后再request发起请求，返回结果。这里request就已经进入到底层了。之后拿客户端，拿通道。\n\n![Untitled](Untitled%2055.png)\n\n![Untitled](Untitled%2056.png)\n\n![Untitled](Untitled%2057.png)\n\n然后给通道发送出去。\n\n![Untitled](Untitled%2058.png)\n\n之后返回拿到返回结果对象，里面封装了结果数据\n\n![Untitled](Untitled%2059.png)\n\n返回返回， 之后打印到控制台。\n\n![Untitled](Untitled%2060.png)\n\n# 5.结束语\n\n祝大家学业有成","slug":"Dubbo学习笔记","published":1,"updated":"2021-08-14T06:21:44.053Z","layout":"post","photos":[],"link":"","_id":"cksbelm9t000h5ouc1ywgfso2","content":"<h1 id=\"一、基本知识\"><a href=\"#一、基本知识\" class=\"headerlink\" title=\"一、基本知识\"></a>一、基本知识</h1><h2 id=\"1-分布式基础理论\"><a href=\"#1-分布式基础理论\" class=\"headerlink\" title=\"1 分布式基础理论\"></a>1 分布式基础理论</h2><h3 id=\"1-1什么是分布式\"><a href=\"#1-1什么是分布式\" class=\"headerlink\" title=\"1.1什么是分布式\"></a>1.1什么是分布式</h3><p>分布式系统是若干个独立计算机的集合，，计算机对于用户来说就像个单个系统，建立在网络上的软件系统。</p>\n<p>随着互联网的发展，规模不断扩大，垂直应用架构无法应付，需要一个治理系统确保架构有条不紊的演进。</p>\n<p>dubbo作用：治理和维护各个分系统。</p>\n<h3 id=\"1-2-发展演变：\"><a href=\"#1-2-发展演变：\" class=\"headerlink\" title=\"1.2 发展演变：\"></a>1.2 发展演变：</h3><p><img src=\"Untitled.png\" alt=\"Untitled.png\"></p>\n<p><strong>单一应用架构：</strong></p>\n<p>流量小时，所有功能放到一起，减少部署节点和成本。</p>\n<p><img src=\"Untitled%201.png\" alt=\"Untitled%201.png\"></p>\n<p>缺点：</p>\n<p>扩展不容易，需要重新打包重新部署</p>\n<p>协同开发不容易</p>\n<p>扩大性能提升不容易</p>\n<p><strong>垂直应用架构：</strong></p>\n<p>小功能独立为单个应用，部署在多个服务器上</p>\n<p><img src=\"Untitled%202.png\" alt=\"Untitled%202.png\"></p>\n<p>优点：</p>\n<p>分工合作容易，分别负责开发</p>\n<p>性能扩展容易，多部署到几个服务器</p>\n<p>缺点：</p>\n<p>单个应用从头到尾都有的，包括页面逻辑和数据库。但是市场上界面改变快，改了需要重新部署，没法做到页面和业务逻辑的分离</p>\n<p>垂直应用越来越多，不可能完全应用于应用完全独立。用户调用订单和商品，物流调用订单等。应用之间需要交互</p>\n<p><strong>分布式服务架构：</strong></p>\n<p>核心业务单独抽取出来，用户应用抽取为页面和业务逻辑。当业务逻辑不变时只改界面，界面重新部署就行了。</p>\n<p><img src=\"Untitled%203.png\" alt=\"Untitled%203.png\"></p>\n<p>问题：</p>\n<p>用户web可能再A服务器上，业务再B服务器。如果A服务器调用B服务器功能时，因为不在一个进程内，分隔异地了，这2个代码调用需要RPC远程过程调用。</p>\n<p>难点：</p>\n<p>如何远程过程调用</p>\n<p>如何拆分业务，增加业务的复用程度</p>\n<p>好的分布式服务框架（RPC），应该有调度中心，来实时的监控业务中心实现动态调度，增加利用率，当某一个业务调用多了，可以让更多的服务器来跑业务量更大的业务，这是用流动计算架构</p>\n<p><strong>流动计算架构：</strong></p>\n<p><img src=\"Untitled%204.png\" alt=\"Untitled%204.png\"></p>\n<p>它负责维护业务之间复杂的关系，以及实时管理服务集群，当A访问量大了，可以多来几台服务器。而且多个A服务器中按照访问量动态调用，以此来提高集群的利用率。</p>\n<h3 id=\"1-3-RPC\"><a href=\"#1-3-RPC\" class=\"headerlink\" title=\"1.3 RPC\"></a>1.3 RPC</h3><p><strong>什么叫RPC</strong></p>\n<p>远程过程调用，A服务器调用B服务器上功能。是一种技术思想，不是规范。它允许程序调用另一个共享空间（通常是共享网络的另一台服务器）上的过程或函数。而不是程序员显示编码这个远程调用的细节。即程序员无论调用本地的还是远程的函数，本质上编写的调用代码基本相同。</p>\n<p><strong>RPC基本原理</strong></p>\n<p><img src=\"Untitled%205.png\" alt=\"Untitled%205.png\"></p>\n<p>clent functions想调用server functions时，通过小助手请求，通过sockets创建和server的sockets连接，将想调用的信息传递个server服务器，server小助手收到信息后确定调用函数，server用传递过来的信息调用自己方法后把返回值再通过网络sockets返回给client</p>\n<p>A和B架起网络连接后调用</p>\n<p><strong>例子：</strong></p>\n<p><img src=\"Untitled%206.png\" alt=\"Untitled%206.png\"></p>\n<p>A调用B时传递对象需要序列化，B先反序列化为对象，B服务器调用一下，拿到返回值，通过网络传输，序列化后传输给A服务器，A服务器需要反序列化后拿到返回值。</p>\n<p><strong>调用核心：</strong></p>\n<p>AB两个需要建立连接</p>\n<p>传递数据需要序列化和反序列化</p>\n<p><strong>决定性能有两点：</strong></p>\n<p>看RPC能否快速建立连接</p>\n<p>序列化于反序列化是否快</p>\n<p><strong>RPC框架：</strong></p>\n<p>dubbo、gRPC、Thrift、HSF</p>\n<p>思想相同，用法不同</p>\n<h2 id=\"2-dubbo核心概念\"><a href=\"#2-dubbo核心概念\" class=\"headerlink\" title=\"2 dubbo核心概念\"></a>2 dubbo核心概念</h2><h3 id=\"2-1-简介\"><a href=\"#2-1-简介\" class=\"headerlink\" title=\"2.1 简介\"></a>2.1 简介</h3><p>Apache Dubbo 是一款高性能、轻量级的开源 Java 服务框架</p>\n<p>注：rpc面向服务、cloud的是restful面向资源</p>\n<p>14.10停止更新，18.1将dubbo和dubbox合并后发布为2.6版本，最终将dubbo开放到apache。</p>\n<p>netty功能负责网络传输，dubbo使用netty作为网络传输框架。说到网络传输自然离不开Socket，Socket是端到端的连接。dubbo是无中心化，每个client端都能与server端连接，每个client端同时又是server端。</p>\n<p><strong>特性：</strong></p>\n<p>1.<strong>面向接口代理的高性能RPC调用</strong></p>\n<p>提供高性能的基于代理的远程调用能力，服务以接口为粒度，为开发者屏蔽远程调用底层细节。</p>\n<p>A调用B只需要将接口拿来调用，dubbo会自动的找B服务器的这段代码，屏蔽了整个调用细节。</p>\n<p>类似Mybatis，调用数据库是只需要写do-mapping接口，调用接口方法就行了。</p>\n<p><strong>2.智能负载均衡</strong></p>\n<p>内置多种负载均衡策略，智能感知下游节点健康状况，显著减少调用延迟，提高系统吞吐量。</p>\n<p>一个服务1台服务器不够时部署多台后，会自动找空闲服务器运行。</p>\n<p>不会压垮某一台服务器，也不会让某服务器太闲浪费资源。</p>\n<p><strong>3.服务自动注册与发现</strong></p>\n<p>支持多种注册中心服务，服务实例上下线实时感知。</p>\n<p>业务非常多，订单调用支付业务时如何知道业务服务器是否知道有问题切在哪，为了动态感知，将所有程序注册到注册中心，维护注册清单。调用时会问一下调用的服务在哪个服务器，选择请求量最小的。建立通信，进行远程调用。</p>\n<p><strong>4.高度可扩展能力</strong></p>\n<p>遵循微内核+插件的设计原则，所有核心能力如Protocol、Transport、Serialization被设计为扩展点，平等对待内置实现和第三方实现。</p>\n<p>所有东西都可扩展。</p>\n<p><strong>5.运行期流量调度</strong></p>\n<p>内置条件、脚本等路由策略，通过配置不同的路由规则，轻松实现灰度发布，同机房优先等功能。</p>\n<p>灰度发布：比如有个用户服务，现在在100台上服务器在跑，用户服务做了升级，害怕升级不稳定，可以先选定20台服务器，让他们用新版本的用户服务，剩下80台用旧版本的用户服务。等20台用的没问题了，再选20台，一点一点增加，知道100台都过度到新版本用户服务。可以配置不同路由规则，请求进来后一部分用新版本服务。慢慢从旧服务转变到新服务的过程。</p>\n<p><strong>6.可视化的服务治理与运维</strong></p>\n<p>提供丰富服务治理、运维工具：随时查询服务元数据、服务健康状态及调用统计，实时下发路由策略、调整配置参数。</p>\n<p>可以随时查询服务的信息、健康状况、调用统计记录等等。通过可视化界面。</p>\n<h3 id=\"2-2-dubbo设计架构\"><a href=\"#2-2-dubbo设计架构\" class=\"headerlink\" title=\"2.2 dubbo设计架构\"></a>2.2 dubbo设计架构</h3><p><img src=\"Untitled%207.png\" alt=\"Untitled%207.png\"></p>\n<p><a href=\"https://www.notion.so/6c6f03ae75794978a31ec967f82fec02\">节点角色说明</a></p>\n<p><strong>运行流程</strong></p>\n<ol>\n<li>服务容器负责启动，加载，运行服务提供者。</li>\n<li>服务提供者在启动时，向注册中心注册自己提供的服务。</li>\n<li>服务消费者在启动时，向注册中心订阅自己所需的服务。当某一个提供者下线了，基于长连接方式，将这个变更推送给消费者，可以实时知道有一个提供者不能调用了。当消费者拿到所有可以调的服务后，可以调用提供者提供的服务，调用时根据负载均衡算法选择一个提供者调用。</li>\n<li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li>\n<li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li>\n<li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li>\n</ol>\n<p>Dubbo 架构具有以下几个特点，分别是连通性、健壮性、伸缩性、以及向未来架构的升级性。</p>\n<p>0、1、2是初始时启动完成的，第3、5布是异步的。第4步是同步调用。</p>\n<p>应先创建提供者，注册到注册中心，再编写消费者，消费者从注册中心调用提供者。然后再编写消费者如何消费提供者提供的功能。</p>\n<p><strong>连通性<a href=\"https://dubbo.apache.org/zh/docs/v2.7/user/preface/architecture/#%E8%BF%9E%E9%80%9A%E6%80%A7\"></a></strong></p>\n<ul>\n<li>注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力较小</li>\n<li>监控中心负责统计各服务调用次数，调用时间等，统计先在内存汇总后每分钟一次发送到监控中心服务器，并以报表展示</li>\n<li>服务提供者向注册中心注册其提供的服务，并汇报调用时间到监控中心，此时间不包含网络开销</li>\n<li>服务消费者向注册中心获取服务提供者地址列表，并根据负载算法直接调用提供者，同时汇报调用时间到监控中心，此时间包含网络开销</li>\n<li>注册中心，服务提供者，服务消费者三者之间均为长连接，监控中心除外</li>\n<li>注册中心通过长连接感知服务提供者的存在，服务提供者宕机，注册中心将立即推送事件通知消费者</li>\n<li>注册中心和监控中心全部宕机，不影响已运行的提供者和消费者，消费者在本地缓存了提供者列表</li>\n<li>注册中心和监控中心都是可选的，服务消费者可以直连服务提供者</li>\n</ul>\n<p><strong>健壮性</strong></p>\n<ul>\n<li>监控中心宕掉不影响使用，只是丢失部分采样数据</li>\n<li>数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务</li>\n<li>注册中心对等集群，任意一台宕掉后，将自动切换到另一台</li>\n<li>注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯</li>\n<li>服务提供者无状态，任意一台宕掉后，不影响使用</li>\n<li>服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复</li>\n</ul>\n<p><strong>伸缩性</strong></p>\n<ul>\n<li>注册中心为对等集群，可动态增加机器部署实例，所有客户端将自动发现新的注册中心</li>\n<li>服务提供者无状态，可动态增加机器部署实例，注册中心将推送新的服务提供者信息给消费者</li>\n</ul>\n<p><strong>升级性<a href=\"https://dubbo.apache.org/zh/docs/v2.7/user/preface/architecture/#%E5%8D%87%E7%BA%A7%E6%80%A7\"></a></strong></p>\n<p>当服务集群规模进一步扩大，带动IT治理结构进一步升级，需要实现动态部署，进行流动计算，现有分布式服务架构不会带来阻力。</p>\n<h2 id=\"3-dubbo环境搭建\"><a href=\"#3-dubbo环境搭建\" class=\"headerlink\" title=\"3 dubbo环境搭建\"></a>3 dubbo环境搭建</h2><h3 id=\"3-1-搭建Zookeeper注册中心\"><a href=\"#3-1-搭建Zookeeper注册中心\" class=\"headerlink\" title=\"3.1 搭建Zookeeper注册中心\"></a>3.1 搭建Zookeeper注册中心</h3><p><strong>3.1.1 安装jdk</strong></p>\n<p>上传jdk包到/opt/software</p>\n<p>tar -zxvf jdk-8u291-linux-x64.tar.gz</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> JAVA_HOME=<span class=\"regexp\">/opt/</span>software/jdk1<span class=\"number\">.8</span><span class=\"number\">.0_291</span>/  #jdk安装目录</span><br><span class=\"line\"><span class=\"keyword\">export</span> JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class=\"line\"><span class=\"keyword\">export</span> CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib:$CLASSPATH</span><br><span class=\"line\"><span class=\"keyword\">export</span> JAVA_PATH=$&#123;JAVA_HOME&#125;/bin:$&#123;JRE_HOME&#125;/bin</span><br><span class=\"line\"><span class=\"keyword\">export</span> PATH=$PATH:$&#123;JAVA_PATH&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3.1.2安装zookeeper</strong></p>\n<p>拷贝到/opt/software</p>\n<p>解压</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf apache-zookeeper-<span class=\"number\">3.7</span><span class=\"number\">.0</span>.tar.gz</span><br></pre></td></tr></table></figure>\n<p><strong>3.1.3修改zookeeper配置</strong></p>\n<p>将”/opt/software/apache-zookeeper-3.7.0/conf/zoo_sample.cfg”拷贝份zoo.cfg</p>\n<p>打开zoo.cfg，修改vim zoo.cfg</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataDir=<span class=\"regexp\">/opt/</span>software/apache-zookeeper-<span class=\"number\">3.7</span><span class=\"number\">.0</span>/zkData/</span><br></pre></td></tr></table></figure>\n<p><strong>3.1.4操作zookeeper</strong></p>\n<p>(1) 启动zookeeper</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/software/apache-zookeeper-<span class=\"number\">3.7</span><span class=\"number\">.0</span>/bin</span><br><span class=\"line\">./zkServer.sh start</span><br></pre></td></tr></table></figure>\n<p>(2) 查看进程</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jps</span><br><span class=\"line\">./zkServer.sh status</span><br></pre></td></tr></table></figure>\n<p>(3)启动客户端</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./zkCli.sh</span><br><span class=\"line\">quit</span><br></pre></td></tr></table></figure>\n<p>(4) 关闭zookeeper</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./zkServer.sh stop</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-搭建监控中心\"><a href=\"#3-2-搭建监控中心\" class=\"headerlink\" title=\"3.2. 搭建监控中心\"></a>3.2. 搭建监控中心</h3><p><a href=\"https://github.com/apache/dubbo-admin\">https://github.com/apache/dubbo-admin</a></p>\n<p>root</p>\n<p>root</p>\n<p>3.2.1 <strong>服务治理</strong></p>\n<p>服务治理的部分，按照Dubbo 2.7的格式进行配置，同时兼容Dubbo 2.6，详见<a href=\"https://github.com/apache/dubbo-admin/wiki/%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E5%85%BC%E5%AE%B9%E6%80%A7%E8%AF%B4%E6%98%8E\">这里</a></p>\n<p>3.2.2 <strong>前端部分</strong></p>\n<ul>\n<li>使用<a href=\"https://vuejs.org/\">Vue.js</a>作为javascript框架</li>\n<li><a href=\"https://github.com/apache/dubbo-admin/blob/develop/dubbo-admin-ui/README.md\">dubbo-admin-ui/README.md</a>中有更详细的介绍</li>\n<li>设置 npm <strong>代理镜像</strong> : 如果遇到了网络问题，可以设置npm代理镜像来加速npm install的过程：在~/.npmrc中增加 <code>registry =https://registry.npm.taobao.org</code></li>\n</ul>\n<p>3.2.3 <strong>后端部分</strong></p>\n<ul>\n<li>标准spring boot工程</li>\n<li><a href=\"https://github.com/apache/dubbo-admin/wiki/Dubbo-Admin%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E\">application.properties配置说明</a></li>\n</ul>\n<p>3.2.4 <strong>生产环境配置</strong></p>\n<ol>\n<li><p>下载代码: <code>git clone https://github.com/apache/dubbo-admin.git</code></p>\n</li>\n<li><p>在 <code>dubbo-admin-server/src/main/resources/application.properties</code>中指定注册中心地址</p>\n</li>\n<li><p>构建</p>\n<blockquote>\n<p>mvn clean package -Dmaven.test.skip=true</p>\n</blockquote>\n</li>\n<li><p>启动</p>\n<ul>\n<li><code>mvn --projects dubbo-admin-server spring-boot:run</code>或者</li>\n<li><code>cd dubbo-admin-distribution/target; java -jar dubbo-admin-0.1.jar</code></li>\n</ul>\n</li>\n<li><p>访问 <code>http://localhost:8080</code></p>\n</li>\n</ol>\n<hr>\n<p>3.2.5 <strong>开发环境配置</strong></p>\n<ul>\n<li>运行<code>dubbo admin server, dubbo admin server</code>是一个标准的spring boot项目, 可以在任何java IDE中运行它</li>\n<li>运行<code>dubbo admin ui</code> <code>dubbo admin ui</code>由npm管理和构建，在开发环境中，可以单独运行: <code>npm run dev</code></li>\n<li>页面访问 访问 <code>http://localhost:8081</code>, 由于前后端分开部署，前端支持热加载，任何页面的修改都可以实时反馈，不需要重启应用。</li>\n</ul>\n<p>3.2.6 <strong>Swagger 支持</strong></p>\n<p>部署完成后，可以访问 <a href=\"http://localhost:8080/swagger-ui.html\">http://localhost:8080/swagger-ui.html</a> 来查看所有的restful api</p>\n<h3 id=\"4-dubbo-helloworld\"><a href=\"#4-dubbo-helloworld\" class=\"headerlink\" title=\"4 dubbo-helloworld\"></a>4 dubbo-helloworld</h3><p><strong>4.1 需求</strong></p>\n<p><img src=\"Untitled%208.png\" alt=\"Untitled%208.png\"></p>\n<p><strong>4.2 工程架构</strong> </p>\n<p><img src=\"Untitled%209.png\" alt=\"Untitled%209.png\"></p>\n<p>服务化最佳实践</p>\n<p><a href=\"https://dubbo.apache.org/zh/docs/v2.7/user/best-practice/\">https://dubbo.apache.org/zh/docs/v2.7/user/best-practice/</a></p>\n<p>分包：</p>\n<p>建议将服务接口、服务模型、服务异常等均放在 API 包中，因为服务模型和异常也是 API 的一部分，这样做也符合分包原则：重用发布等价原则(REP)，共同重用原则(CRP)。</p>\n<p>如果需要，也可以考虑在 API 包中放置一份 Spring 的引用配置，这样使用方只需在 Spring 加载过程中引用此配置即可。配置建议放在模块的包目录下，以免冲突，如：<code>com/alibaba/china/xxx/dubbo-reference.xml</code>。</p>\n<p>粒度：</p>\n<p>服务接口尽可能大粒度，每个服务方法应代表一个功能，而不是某功能的一个步骤，否则将面临分布式事务问题，Dubbo 暂未提供分布式事务支持。</p>\n<p>服务接口建议以业务场景为单位划分，并对相近业务做抽象，防止接口数量爆炸。</p>\n<p>不建议使用过于抽象的通用接口，如：<code>Map query(Map)</code>，这样的接口没有明确语义，会给后期维护带来不便。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- <span class=\"number\">1</span>、指定当前服务/应用的名字（同样的服务名字相同，不要和别的服务同名） --&gt;</span><br><span class=\"line\">&lt;dubbo:application name=<span class=\"string\">&quot;user-service-provider&quot;</span>&gt;&lt;/dubbo:application&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- <span class=\"number\">2</span>、指定注册中心的位置 --&gt;</span><br><span class=\"line\">&lt;!-- <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">dubbo:registry</span> <span class=\"attr\">address</span>=<span class=\"string\">&quot;zookeeper://127.0.0.1:2181&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dubbo:registry</span>&gt;</span></span> --&gt;</span><br><span class=\"line\">&lt;dubbo:registry protocol=<span class=\"string\">&quot;zookeeper&quot;</span> address=<span class=\"string\">&quot;127.0.0.1:2181&quot;</span>&gt;&lt;/dubbo:registry&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- <span class=\"number\">3</span>、指定通信规则（通信协议？通信端口） --&gt;</span><br><span class=\"line\">&lt;dubbo:protocol name=<span class=\"string\">&quot;dubbo&quot;</span> port=<span class=\"string\">&quot;20882&quot;</span>&gt;&lt;/dubbo:protocol&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- <span class=\"number\">4</span>、暴露服务   ref：指向服务的真正的实现对象 --&gt;</span><br><span class=\"line\">&lt;dubbo:service interface=<span class=\"string\">&quot;gmall.service.OrderService&quot;</span></span><br><span class=\"line\">\tref=<span class=\"string\">&quot;userServiceImpl01&quot;</span> timeout=<span class=\"string\">&quot;1000&quot;</span> version=<span class=\"string\">&quot;1.0.0&quot;</span>&gt;</span><br><span class=\"line\">\t&lt;dubbo:method name=<span class=\"string\">&quot;getUserAddressList&quot;</span> timeout=<span class=\"string\">&quot;1000&quot;</span>&gt;&lt;/dubbo:method&gt;</span><br><span class=\"line\">&lt;/dubbo:service&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--统一设置服务提供方的规则  --&gt;</span><br><span class=\"line\">&lt;dubbo:provider timeout=<span class=\"string\">&quot;1000&quot;</span>&gt;&lt;/dubbo:provider&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>4.3 创建模块</strong></p>\n<p>1、gmall-interface：公共接口层（model，service，exception…）</p>\n<p>作用：定义公共接口，也可以导入公共依赖</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、Bean模型</span><br><span class=\"line\">package gmall.bean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户地址</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author <span class=\"variable\">lfy</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserAddress</span> <span class=\"title\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Integer id;</span><br><span class=\"line\">    private <span class=\"built_in\">String</span> userAddress; <span class=\"comment\">//用户地址</span></span><br><span class=\"line\">    private <span class=\"built_in\">String</span> userId; <span class=\"comment\">//用户id</span></span><br><span class=\"line\">    private <span class=\"built_in\">String</span> consignee; <span class=\"comment\">//收货人</span></span><br><span class=\"line\">    private <span class=\"built_in\">String</span> phoneNum; <span class=\"comment\">//电话号码</span></span><br><span class=\"line\">    private <span class=\"built_in\">String</span> isDefault; <span class=\"comment\">//是否为默认地址    Y-是     N-否</span></span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"function\"><span class=\"title\">UserAddress</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public UserAddress(Integer id, <span class=\"built_in\">String</span> userAddress, <span class=\"built_in\">String</span> userId, <span class=\"built_in\">String</span> consignee, <span class=\"built_in\">String</span> phoneNum,</span><br><span class=\"line\">                       <span class=\"built_in\">String</span> isDefault) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.userAddress = userAddress;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.userId = userId;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.consignee = consignee;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.phoneNum = phoneNum;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.isDefault = isDefault;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Integer <span class=\"function\"><span class=\"title\">getId</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">setId</span>(<span class=\"params\">Integer id</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"built_in\">String</span> <span class=\"function\"><span class=\"title\">getUserAddress</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userAddress;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">setUserAddress</span>(<span class=\"params\"><span class=\"built_in\">String</span> userAddress</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.userAddress = userAddress;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"built_in\">String</span> <span class=\"function\"><span class=\"title\">getUserId</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">setUserId</span>(<span class=\"params\"><span class=\"built_in\">String</span> userId</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.userId = userId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"built_in\">String</span> <span class=\"function\"><span class=\"title\">getConsignee</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> consignee;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">setConsignee</span>(<span class=\"params\"><span class=\"built_in\">String</span> consignee</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.consignee = consignee;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"built_in\">String</span> <span class=\"function\"><span class=\"title\">getPhoneNum</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> phoneNum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">setPhoneNum</span>(<span class=\"params\"><span class=\"built_in\">String</span> phoneNum</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.phoneNum = phoneNum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"built_in\">String</span> <span class=\"function\"><span class=\"title\">getIsDefault</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isDefault;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">setIsDefault</span>(<span class=\"params\"><span class=\"built_in\">String</span> isDefault</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.isDefault = isDefault;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、OrderService 接口</span><br><span class=\"line\">package gmall.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.bean.UserAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 订单服务</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author <span class=\"variable\">guoyh</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date </span>2021/7/5</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public interface OrderService &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;UserAddress&gt; initOrder(<span class=\"built_in\">String</span> userId);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>、UserService接口</span><br><span class=\"line\">package gmall.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.bean.UserAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户服务</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author <span class=\"variable\">guoyh</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date </span>2021/7/5</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public interface UserService &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 按照用户id返回所有收货地址</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param <span class=\"variable\">userId</span></span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return </span>List&lt;UserAddress&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    public List&lt;UserAddress&gt; getUserAddressList(<span class=\"built_in\">String</span> userId);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、user-service-provider：用户模块（对用户接口的实现）</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、pom.xml</span><br><span class=\"line\">\t&lt;!-- 引入公共接口 --&gt;</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t  &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class=\"line\">\t  &lt;artifactId&gt;gmall-interface&lt;/artifactId&gt;</span><br><span class=\"line\">\t  &lt;version&gt;<span class=\"number\">0.0</span><span class=\"number\">.1</span>-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、UserServiceImpl服务</span><br><span class=\"line\">package com.atguigu.gmall.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.bean.UserAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.service.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、将服务提供者将服务注册到注册中心（暴漏服务）</span></span><br><span class=\"line\"><span class=\"comment\"> * 1) 导入dubbo依赖</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、让服务消费者去注册中心订阅服务的服务地址</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author <span class=\"variable\">guoyh</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date </span>2021/7/5</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"title\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public List&lt;UserAddress&gt; <span class=\"function\"><span class=\"title\">getUserAddressList</span>(<span class=\"params\"><span class=\"built_in\">String</span> userId</span>)</span> &#123;</span><br><span class=\"line\">        UserAddress userAddressOne = <span class=\"keyword\">new</span> UserAddress();</span><br><span class=\"line\">        userAddressOne.setUserAddress(<span class=\"string\">&quot;北京市区昌平&quot;</span>);</span><br><span class=\"line\">        UserAddress userAddressTwo = <span class=\"keyword\">new</span> UserAddress();</span><br><span class=\"line\">        userAddressTwo.setUserAddress(<span class=\"string\">&quot;天安门&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.asList(userAddressOne, userAddressTwo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、user-service-consumer：订单模块（调用用户模块）</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、pom.xml</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t  &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class=\"line\">\t  &lt;artifactId&gt;gmall-interface&lt;/artifactId&gt;</span><br><span class=\"line\">\t  &lt;version&gt;<span class=\"number\">0.0</span><span class=\"number\">.1</span>-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"number\">2</span>、OrderServiceImpl服务</span><br><span class=\"line\">package com.atguigu.gmall.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.bean.UserAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.service.OrderService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.service.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author <span class=\"variable\">guoyh</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date </span>2021/7/5</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">@Service</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderServiceImpl</span> <span class=\"title\">implements</span> <span class=\"title\">OrderService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public List&lt;UserAddress&gt; <span class=\"function\"><span class=\"title\">initOrder</span>(<span class=\"params\"><span class=\"built_in\">String</span> userId</span>)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;用户id:&quot;</span> + userId);</span><br><span class=\"line\">        <span class=\"comment\">// 1、查询用户收获地址</span></span><br><span class=\"line\">        List&lt;UserAddress&gt; userAddressList = userService.getUserAddressList(userId);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (UserAddress address : userAddressList) &#123;</span><br><span class=\"line\">            System.out.println(address.getUserAddress());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userAddressList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在这样是无法进行调用的。我们gmall-order-web引入了gmall-interface，但是interface的实现是gmall-user，我们并没有引入，而且实际他可能还在别的服务器中。</p>\n<p><strong>4.4 使用dubbo改造</strong></p>\n<p>1、改造user-service-provider作为服务提供者</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、pom.xml</span><br><span class=\"line\">\t&lt;!-- 引入dubbo --&gt;</span><br><span class=\"line\">\t&lt;!-- https:<span class=\"comment\">//mvnrepository.com/artifact/com.alibaba/dubbo --&gt;</span></span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">\t  &lt;artifactId&gt;dubbo&lt;/artifactId&gt;</span><br><span class=\"line\">\t  &lt;version&gt;<span class=\"number\">2.6</span><span class=\"number\">.2</span>&lt;/version&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;!-- 注册中心使用的是zookeeper，引入操作zookeeper的客户端端 --&gt;</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t  &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;</span><br><span class=\"line\">\t  &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;</span><br><span class=\"line\">\t  &lt;version&gt;<span class=\"number\">2.12</span><span class=\"number\">.0</span>&lt;/version&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、配置提供者provider.xml</span><br><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;beans xmlns=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"line\">       xmlns:xsi=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"line\">       xmlns:dubbo=<span class=\"string\">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span><br><span class=\"line\">       xsi:schemaLocation=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"line\"><span class=\"string\">\t\thttp://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd</span></span><br><span class=\"line\"><span class=\"string\">\t\thttp://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- <span class=\"number\">1</span>、指定当前服务/应用的名字（同样的服务名字相同，不要和别的服务同名） --&gt;</span><br><span class=\"line\">    &lt;dubbo:application name=<span class=\"string\">&quot;user-service-provider&quot;</span>&gt;&lt;/dubbo:application&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- <span class=\"number\">2</span>、指定注册中心的位置 --&gt;</span><br><span class=\"line\">    &lt;!-- <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">dubbo:registry</span> <span class=\"attr\">address</span>=<span class=\"string\">&quot;zookeeper://127.0.0.1:2181&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dubbo:registry</span>&gt;</span></span> --&gt;</span><br><span class=\"line\">    &lt;dubbo:registry protocol=<span class=\"string\">&quot;zookeeper&quot;</span> address=<span class=\"string\">&quot;127.0.0.1:2181&quot;</span>&gt;&lt;/dubbo:registry&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- <span class=\"number\">3</span>、指定通信规则（通信协议？通信端口） --&gt;</span><br><span class=\"line\">    &lt;dubbo:protocol name=<span class=\"string\">&quot;dubbo&quot;</span> port=<span class=\"string\">&quot;20882&quot;</span>&gt;&lt;/dubbo:protocol&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- <span class=\"number\">4</span>、暴露服务   ref：指向服务的真正的实现对象 --&gt;</span><br><span class=\"line\">    &lt;dubbo:service interface=<span class=\"string\">&quot;gmall.service.UserService&quot;</span></span><br><span class=\"line\">                   ref=<span class=\"string\">&quot;userServiceImpl&quot;</span> timeout=<span class=\"string\">&quot;1000&quot;</span> version=<span class=\"string\">&quot;1.0.0&quot;</span>&gt;</span><br><span class=\"line\">        &lt;!--<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">dubbo:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;getUserAddressList&quot;</span> <span class=\"attr\">timeout</span>=<span class=\"string\">&quot;1000&quot;</span>/&gt;</span></span>--&gt;</span><br><span class=\"line\">    &lt;/dubbo:service&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 服务的真正实现 --&gt;</span><br><span class=\"line\">    &lt;bean id=<span class=\"string\">&quot;userServiceImpl&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;com.atguigu.gmall.service.impl.UserServiceImpl&quot;</span>&gt;&lt;/bean&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>启动服务</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainApplication</span> </span>&#123;</span><br><span class=\"line\">    public <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"built_in\">String</span>[] args) throws Exception &#123;</span><br><span class=\"line\">        ClassPathXmlApplicationContext context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"keyword\">new</span> <span class=\"built_in\">String</span>[]&#123;<span class=\"string\">&quot;provider.xml&quot;</span>&#125;);</span><br><span class=\"line\">        context.start();</span><br><span class=\"line\">        <span class=\"comment\">//为了不让服务终止，在这阻塞读取一个字符</span></span><br><span class=\"line\">        System.in.read(); <span class=\"comment\">// 按任意键退出</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、改造user-service-consumer作为服务消费者</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、pom.xml</span><br><span class=\"line\">\t&lt;!-- 引入dubbo --&gt;</span><br><span class=\"line\">\t&lt;!-- https:<span class=\"comment\">//mvnrepository.com/artifact/com.alibaba/dubbo --&gt;</span></span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">\t  &lt;artifactId&gt;dubbo&lt;/artifactId&gt;</span><br><span class=\"line\">\t  &lt;version&gt;<span class=\"number\">2.6</span><span class=\"number\">.2</span>&lt;/version&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;!-- 注册中心使用的是zookeeper，引入操作zookeeper的客户端端 --&gt;</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t  &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;</span><br><span class=\"line\">\t  &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;</span><br><span class=\"line\">\t  &lt;version&gt;<span class=\"number\">2.12</span><span class=\"number\">.0</span>&lt;/version&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、配置消费者consumer.xml</span><br><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;beans xmlns=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"line\">       xmlns:xsi=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"line\">       xmlns:dubbo=<span class=\"string\">&quot;http://dubbo.apache.org/schema/dubbo&quot;</span></span><br><span class=\"line\">       xmlns:context=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class=\"line\">       xsi:schemaLocation=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"line\"><span class=\"string\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span><br><span class=\"line\"><span class=\"string\">\t\thttp://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd</span></span><br><span class=\"line\"><span class=\"string\">\t\thttp://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 让注解能够生效 --&gt;</span><br><span class=\"line\">    &lt;context:component-scan base-package=<span class=\"string\">&quot;com.atguigu.gmall.service.impl&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- <span class=\"number\">1</span>、指定当前服务/应用的名字（同样的服务名字相同，不要和别的服务同名） --&gt;</span><br><span class=\"line\">    &lt;dubbo:application name=<span class=\"string\">&quot;order-service-consumer&quot;</span>&gt;&lt;/dubbo:application&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- <span class=\"number\">2</span>、指定注册中心的位置 --&gt;</span><br><span class=\"line\">    &lt;dubbo:registry address=<span class=\"string\">&quot;zookeeper://127.0.0.1:2181&quot;</span>&gt;&lt;/dubbo:registry&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&lt;!-- <span class=\"number\">3</span>、生成远程服务代理，可以和本地bean一样使用demoService --&gt;</span><br><span class=\"line\">    &lt;dubbo:reference interface=<span class=\"string\">&quot;gmall.service.UserService&quot;</span></span><br><span class=\"line\">                     id=<span class=\"string\">&quot;userService&quot;</span>&gt;</span><br><span class=\"line\">        &lt;dubbo:method name=<span class=\"string\">&quot;getUserAddressList&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/dubbo:reference&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- <span class=\"number\">6</span>、连接监控中心 --&gt;</span><br><span class=\"line\">    &lt;dubbo:monitor protocol=<span class=\"string\">&quot;registry&quot;</span>&gt;&lt;/dubbo:monitor&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<p>3、调用测试</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.atguigu.gmall.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.bean.UserAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.service.OrderService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.service.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author <span class=\"variable\">guoyh</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date </span>2021/7/5</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">@Service</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderServiceImpl</span> <span class=\"title\">implements</span> <span class=\"title\">OrderService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public List&lt;UserAddress&gt; <span class=\"function\"><span class=\"title\">initOrder</span>(<span class=\"params\"><span class=\"built_in\">String</span> userId</span>)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;用户id:&quot;</span> + userId);</span><br><span class=\"line\">        <span class=\"comment\">// 1、查询用户收获地址</span></span><br><span class=\"line\">        List&lt;UserAddress&gt; userAddressList = userService.getUserAddressList(userId);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (UserAddress address : userAddressList) &#123;</span><br><span class=\"line\">            System.out.println(address.getUserAddress());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userAddressList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4、注解版本</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、服务提供方</span><br><span class=\"line\">&lt;dubbo:application name=<span class=\"string\">&quot;gmall-user&quot;</span>&gt;&lt;/dubbo:application&gt;</span><br><span class=\"line\">  &lt;dubbo:registry address=<span class=\"string\">&quot;zookeeper://118.24.44.169:2181&quot;</span> /&gt;</span><br><span class=\"line\">  &lt;dubbo:protocol name=<span class=\"string\">&quot;dubbo&quot;</span> port=<span class=\"string\">&quot;20880&quot;</span> /&gt;</span><br><span class=\"line\">&lt;dubbo:annotation package=<span class=\"string\">&quot;com.atguigu.gmall.user.impl&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.gmall.bean.UserAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.gmall.service.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.gmall.user.mapper.UserAddressMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">@Service <span class=\"comment\">//使用dubbo提供的service注解，注册暴露服务</span></span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"title\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Autowired</span><br><span class=\"line\">\tUserAddressMapper userAddressMapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、服务消费方</span><br><span class=\"line\">&lt;dubbo:application name=<span class=\"string\">&quot;gmall-order-web&quot;</span>&gt;&lt;/dubbo:application&gt;</span><br><span class=\"line\">&lt;dubbo:registry address=<span class=\"string\">&quot;zookeeper://118.24.44.169:2181&quot;</span> /&gt;</span><br><span class=\"line\">&lt;dubbo:annotation package=<span class=\"string\">&quot;com.atguigu.gmall.order.controller&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.bean.UserAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.service.OrderService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.service.UserService;</span><br><span class=\"line\">@Controller</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderController</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Reference  <span class=\"comment\">//使用dubbo提供的reference注解引用远程服务</span></span><br><span class=\"line\">\tUserService userService;</span><br><span class=\"line\">\t</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">    public List&lt;UserAddress&gt; <span class=\"function\"><span class=\"title\">initOrder</span>(<span class=\"params\"><span class=\"built_in\">String</span> userId</span>)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;用户id:&quot;</span> + userId);</span><br><span class=\"line\">        <span class=\"comment\">// 1、查询用户收获地址</span></span><br><span class=\"line\">        List&lt;UserAddress&gt; userAddressList = userService.getUserAddressList(userId);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userAddressList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、监控中心\"><a href=\"#5、监控中心\" class=\"headerlink\" title=\"5、监控中心\"></a>5、监控中心</h3><p>5.1、dubbo-admin</p>\n<p>图形化的服务管理页面；安装时需要指定注册中心地址，即可从注册中心中获取到所有的提供者/消费者进行配置管理</p>\n<p>5.2、dubbo-monitor-simple</p>\n<p>简单的监控中心；</p>\n<p>1)、安装</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、下载 dubbo-ops</span><br><span class=\"line\">https:<span class=\"comment\">//github.com/apache/incubator-dubbo-ops</span></span><br><span class=\"line\"><span class=\"number\">2</span>、修改配置指定注册中心地址</span><br><span class=\"line\">进入 dubbo-monitor-simple\\src\\main\\resources\\conf</span><br><span class=\"line\">修改 dubbo.properties文件</span><br><span class=\"line\"><span class=\"number\">3</span>、打包dubbo-monitor-simple</span><br><span class=\"line\">mvn clean package -Dmaven.test.skip=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"number\">4</span>、解压 tar.gz 文件，并运行start.bat</span><br><span class=\"line\">如果缺少servlet-api，自行导入servlet-api再访问监控中心</span><br><span class=\"line\"><span class=\"number\">5</span>、启动访问<span class=\"number\">8080</span></span><br></pre></td></tr></table></figure>\n<p>2)、监控中心配置</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所有服务配置连接监控中心，进行监控统计</span><br><span class=\"line\">&lt;!-- 监控中心协议，如果为protocol=<span class=\"string\">&quot;registry&quot;</span>，表示从注册中心发现监控中心地址，否则直连监控中心 --&gt;</span><br><span class=\"line\">&lt;dubbo:monitor protocol=<span class=\"string\">&quot;registry&quot;</span>&gt;&lt;/dubbo:monitor&gt;</span><br></pre></td></tr></table></figure>\n<p>Simple Monitor 挂掉不会影响到 Consumer 和 Provider 之间的调用，所以用于生产环境不会有风险。</p>\n<p>Simple Monitor 采用磁盘存储统计信息，请注意安装机器的磁盘限制，如果要集群，建议用mount共享磁盘。</p>\n<h3 id=\"6、SpringBoot-整合-Dubbo\"><a href=\"#6、SpringBoot-整合-Dubbo\" class=\"headerlink\" title=\"6、SpringBoot 整合 Dubbo\"></a>6、SpringBoot 整合 Dubbo</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- SpringBoot版本 --&gt;</span><br><span class=\"line\">&lt;parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">2.0</span><span class=\"number\">.4</span>.RELEASE&lt;/version&gt;</span><br><span class=\"line\">    &lt;relativePath/&gt; &lt;!-- lookup parent <span class=\"keyword\">from</span> repository --&gt;</span><br><span class=\"line\">&lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- JDK <span class=\"number\">1.8</span>--&gt;</span><br><span class=\"line\">&lt;properties&gt;</span><br><span class=\"line\">    &lt;java.version&gt;<span class=\"number\">1.8</span>&lt;/java.version&gt;</span><br><span class=\"line\">&lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 引入公共接口项目--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;gmall-interface&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">0.0</span><span class=\"number\">.1</span>-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>6.1、引入spring-boot-starter以及dubbo和curator的依赖</p>\n<p>注意starter版本适配：</p>\n<p><img src=\"Untitled%2010.png\" alt=\"Untitled%2010.png\"></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Dubbo Spring Boot Starter --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;<span class=\"number\">0.2</span><span class=\"number\">.0</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>6.2、配置application.properties</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、提供者配置</span><br><span class=\"line\">#dubbo服务名称</span><br><span class=\"line\">dubbo.application.name=boot-order-service-provider</span><br><span class=\"line\">#注册中心地址</span><br><span class=\"line\">dubbo.registry.address=<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">2181</span></span><br><span class=\"line\">#注册中心协议</span><br><span class=\"line\">dubbo.registry.protocol=zookeeper</span><br><span class=\"line\">#通信协议</span><br><span class=\"line\">dubbo.protocol.name=dubbo</span><br><span class=\"line\">dubbo.protocol.prot=<span class=\"number\">20880</span></span><br><span class=\"line\">#监控中心地址:registry从注册中心自动发现</span><br><span class=\"line\">dubbo.monitor.protocol=registry</span><br><span class=\"line\">#application.name就是服务名，不能跟别的dubbo提供端重复</span><br><span class=\"line\">#registry.protocol 是指定注册中心协议</span><br><span class=\"line\">#registry.address 是注册中心的地址加端口号</span><br><span class=\"line\">#protocol.name 是分布式固定是dubbo,不要改。</span><br><span class=\"line\">#base-package  注解方式要扫描的包</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、消费者配置</span><br><span class=\"line\">dubbo.application.name=gmall-order-web</span><br><span class=\"line\">dubbo.registry.protocol=zookeeper</span><br><span class=\"line\">dubbo.registry.address=<span class=\"number\">192.168</span><span class=\"number\">.67</span><span class=\"number\">.159</span>:<span class=\"number\">2181</span></span><br><span class=\"line\">dubbo.scan.base-package=com.atguigu.gmall</span><br><span class=\"line\">dubbo.protocol.name=dubbo</span><br></pre></td></tr></table></figure>\n<p>3、dubbo注解</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#提供者:实现类开放服务</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class=\"line\">@Service</span><br><span class=\"line\"></span><br><span class=\"line\">#消费者:从注册中心自动获取可用的实现服务</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class=\"line\">@Reference</span><br><span class=\"line\"></span><br><span class=\"line\">如果没有在配置中写dubbo.scan.base-package,还需要使用@EnableDubbo注解</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.spring.context.annotation.EnableDubbo;</span><br><span class=\"line\">@EnableDubbo</span><br></pre></td></tr></table></figure>\n<h1 id=\"二、dubbo配置\"><a href=\"#二、dubbo配置\" class=\"headerlink\" title=\"二、dubbo配置\"></a>二、dubbo配置</h1><h2 id=\"1、配置原则\"><a href=\"#1、配置原则\" class=\"headerlink\" title=\"1、配置原则\"></a>1、配置原则</h2><p><img src=\"Untitled%2011.png\" alt=\"Untitled%2011.png\"></p>\n<p>JVM 启动 -D 参数优先，这样可以使用户在部署和启动时进行参数重写，比如在启动时需改变协议的端口。</p>\n<p>XML /applicatoin.properties次之，如果在 XML 中有配置，则 dubbo.properties 中的相应配置项无效。(自己测试结果为dubbo.properties 比XML/application.properties高)</p>\n<p>Properties 最后，相当于缺省值，只有 XML 没有配置时，dubbo.properties 的相应配置项才会生效，通常用于共享公共配置，比如应用名。</p>\n<p><a href=\"https://dubbo.apache.org/zh/docsv2.7/user/examples/preflight-check/\">https://dubbo.apache.org/zh/docsv2.7/user/examples/preflight-check/</a></p>\n<p><strong>启动时检查：</strong></p>\n<p>Dubbo 缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止 Spring 初始化完成，以便上线时，能及早发现问题，默认 <code>check=&quot;true&quot;</code>。</p>\n<p>可以通过 <code>check=&quot;false&quot;</code> 关闭检查，比如，测试时，有些服务不关心，或者出现了循环依赖，必须有一方先启动。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-D</span><br><span class=\"line\">java -Ddubbo.reference.com.foo.BarService.check=<span class=\"literal\">false</span></span><br><span class=\"line\">java -Ddubbo.reference.check=<span class=\"literal\">false</span></span><br><span class=\"line\">java -Ddubbo.consumer.check=<span class=\"literal\">false</span> </span><br><span class=\"line\">java -Ddubbo.registry.check=<span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">XML</span><br><span class=\"line\">&lt;dubbo:reference interface=<span class=\"string\">&quot;com.foo.BarService&quot;</span> check=<span class=\"string\">&quot;false&quot;</span> /&gt;</span><br><span class=\"line\">&lt;dubbo:consumer check=<span class=\"string\">&quot;false&quot;</span> /&gt;</span><br><span class=\"line\">&lt;dubbo:registry check=<span class=\"string\">&quot;false&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">dubbo.properties</span><br><span class=\"line\">dubbo.reference.com.foo.BarService.check=<span class=\"literal\">false</span></span><br><span class=\"line\">dubbo.reference.check=<span class=\"literal\">false</span></span><br><span class=\"line\">dubbo.consumer.check=<span class=\"literal\">false</span></span><br><span class=\"line\">dubbo.registry.check=<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2、重试次数\"><a href=\"#2、重试次数\" class=\"headerlink\" title=\"2、重试次数\"></a>2、重试次数</h2><p>失败自动切换，当出现失败，重试其它服务器，但重试会带来更长延迟。可通过 retries=”2” 来设置重试次数(不含第一次)。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">重试次数配置如下：</span><br><span class=\"line\">&lt;dubbo:service retries=<span class=\"string\">&quot;2&quot;</span> /&gt;</span><br><span class=\"line\">或</span><br><span class=\"line\">&lt;dubbo:reference retries=<span class=\"string\">&quot;2&quot;</span> /&gt;</span><br><span class=\"line\">或</span><br><span class=\"line\">&lt;dubbo:reference&gt;</span><br><span class=\"line\">    &lt;dubbo:method name=<span class=\"string\">&quot;findFoo&quot;</span> retries=<span class=\"string\">&quot;2&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/dubbo:reference&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3、超时时间\"><a href=\"#3、超时时间\" class=\"headerlink\" title=\"3、超时时间\"></a>3、超时时间</h2><p>由于网络或服务端不可靠，会导致调用出现一种不确定的中间状态（超时）。为了避免超时导致客户端资源（线程）挂起耗尽，必须设置超时时间.</p>\n<p>3.1、消费端</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局超时配置</span><br><span class=\"line\">&lt;dubbo:consumer timeout=<span class=\"string\">&quot;5000&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">指定接口以及特定方法超时配置</span><br><span class=\"line\">&lt;dubbo:reference interface=<span class=\"string\">&quot;com.foo.BarService&quot;</span> timeout=<span class=\"string\">&quot;2000&quot;</span>&gt;</span><br><span class=\"line\">    &lt;dubbo:method name=<span class=\"string\">&quot;sayHello&quot;</span> timeout=<span class=\"string\">&quot;3000&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/dubbo:reference&gt;</span><br></pre></td></tr></table></figure>\n<p>3.2、提供方</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局超时配置</span><br><span class=\"line\">&lt;dubbo:provider timeout=<span class=\"string\">&quot;5000&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">指定接口以及特定方法超时配置</span><br><span class=\"line\">&lt;dubbo:provider interface=<span class=\"string\">&quot;com.foo.BarService&quot;</span> timeout=<span class=\"string\">&quot;2000&quot;</span>&gt;</span><br><span class=\"line\">    &lt;dubbo:method name=<span class=\"string\">&quot;sayHello&quot;</span> timeout=<span class=\"string\">&quot;3000&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/dubbo:provider&gt;</span><br></pre></td></tr></table></figure>\n<p>3.3、配置规则</p>\n<p>Dubbo推荐在Provider上尽量多配置Consumer端属性</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、作服务的提供者，比服务使用方更清楚服务性能参数，如调用的超时时间，合理的重试次数，等等</span><br><span class=\"line\"><span class=\"number\">2</span>、在Provider配置后，Consumer不配置则会使用Provider的配置值，即Provider配置可以作为Consumer的缺省值。否则，Consumer会使用Consumer端的全局设置，这对于Provider不可控的，并且往往是不合理的</span><br></pre></td></tr></table></figure>\n<p>配置的覆盖规则：</p>\n<ol>\n<li><p>方法级配置别优于接口级别，即小Scope优先</p>\n</li>\n<li><p>Consumer端配置 优于 Provider配置 优于 全局配置，</p>\n</li>\n</ol>\n<p>3) 最后是缺省值（见配置文档）</p>\n<h2 id=\"4、版本号\"><a href=\"#4、版本号\" class=\"headerlink\" title=\"4、版本号\"></a>4、版本号</h2><p><a href=\"https://dubbo.apache.org/zh/docsv2.7/user/examples/multi-versions/\">https://dubbo.apache.org/zh/docsv2.7/user/examples/multi-versions/</a></p>\n<p>当一个接口实现，出现不兼容升级时，可以用版本号过渡，版本号不同的服务相互间不引用。可以按照以下的步骤进行版本迁移：</p>\n<p>在低压力时间段，先升级一半提供者为新版本</p>\n<p>再将所有消费者升级为新版本</p>\n<p>然后将剩下的一半提供者升级为新版本</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务老版本提供者配置：</span><br><span class=\"line\">&lt;dubbo:service interface=<span class=\"string\">&quot;com.foo.BarService&quot;</span> version=<span class=\"string\">&quot;1.0.0&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">服务新版本提供者配置：</span><br><span class=\"line\">&lt;dubbo:service interface=<span class=\"string\">&quot;com.foo.BarService&quot;</span> version=<span class=\"string\">&quot;2.0.0&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">服务老版本消费者配置：</span><br><span class=\"line\">&lt;dubbo:reference id=<span class=\"string\">&quot;barService&quot;</span> interface=<span class=\"string\">&quot;com.foo.BarService&quot;</span> version=<span class=\"string\">&quot;1.0.0&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">新版本服务消费者配置：</span><br><span class=\"line\">&lt;dubbo:reference id=<span class=\"string\">&quot;barService&quot;</span> interface=<span class=\"string\">&quot;com.foo.BarService&quot;</span> version=<span class=\"string\">&quot;2.0.0&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">如果不需要区分版本，可以按照以下的方式配置：</span><br><span class=\"line\">&lt;dubbo:reference id=<span class=\"string\">&quot;barService&quot;</span> interface=<span class=\"string\">&quot;com.foo.BarService&quot;</span> version=<span class=\"string\">&quot;*&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5、本地存根\"><a href=\"#5、本地存根\" class=\"headerlink\" title=\"5、本地存根\"></a>5、本地存根</h2><p><a href=\"https://dubbo.apache.org/zh/docsv2.7/user/examples/local-stub/\">https://dubbo.apache.org/zh/docsv2.7/user/examples/local-stub/</a></p>\n<p>远程服务后，客户端通常只剩下接口，而实现全在服务器端，但提供方有些时候想在客户端也执行部分逻辑，比如：做 ThreadLocal 缓存，提前验证参数，调用失败后伪造容错数据等等，此时就需要在 API 中带上 Stub，客户端生成 Proxy 实例，会把 Proxy 通过构造函数传给 Stub <a href=\"https://dubbo.apache.org/zh/docsv2.7/user/examples/local-stub/#fn:1\">1</a>，然后把 Stub 暴露给用户，Stub 可以决定要不要去调 Proxy。</p>\n<p><img src=\"stub.jpg\" alt=\"stub.jpg\"></p>\n<p>在消费方，写一个远程接口本地的实现，提供 Stub 的实现 ：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.foo;</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BarServiceStub</span> <span class=\"title\">implements</span> <span class=\"title\">BarService</span> </span>&#123;</span><br><span class=\"line\">    private final BarService barService;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 必须有一个有参构造，并且使构造函数传入真正的远程代理对象</span></span><br><span class=\"line\">    public <span class=\"function\"><span class=\"title\">BarServiceStub</span>(<span class=\"params\">BarService barService</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.barService = barService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    public <span class=\"built_in\">String</span> <span class=\"function\"><span class=\"title\">sayHello</span>(<span class=\"params\"><span class=\"built_in\">String</span> name</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 此代码在客户端执行, 你可以在客户端做ThreadLocal本地缓存，或预先验证参数是否合法，等等</span></span><br><span class=\"line\">        <span class=\"comment\">// ...自己的代码</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 当自己代码执行结束后，再调真正的远程服务</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> barService.sayHello(name);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 你可以容错，可以做任何AOP拦截事项</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;容错数据&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 spring 配置文件中按以下方式配置：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">提供者方配置</span><br><span class=\"line\">&lt;dubbo:service interface=<span class=\"string\">&quot;com.foo.BarService&quot;</span> stub=<span class=\"string\">&quot;true&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">消费者方配置</span><br><span class=\"line\">&lt;dubbo:reference interface=<span class=\"string\">&quot;gmall.service.UserService&quot;</span></span><br><span class=\"line\">  id=<span class=\"string\">&quot;userService&quot;</span> timeout=<span class=\"string\">&quot;5000&quot;</span> retries=<span class=\"string\">&quot;3&quot;</span> version=<span class=\"string\">&quot;*&quot;</span> </span><br><span class=\"line\">\tstub=<span class=\"string\">&quot;com.atguigu.gmall.service.impl.UserServiceStub&quot;</span>&gt;</span><br><span class=\"line\">&lt;dubbo:method name=<span class=\"string\">&quot;getUserAddressList&quot;</span> timeout=<span class=\"string\">&quot;1000&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/dubbo:reference&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<ol>\n<li>Stub 必须有可传入 Proxy 的构造函数。 </li>\n<li>在 interface 旁边放一个 Stub 实现，它实现 BarService 接口，并有一个传入远程 BarService 实例的构造函数 </li>\n</ol>\n<h2 id=\"6、SpringBoot方式配置\"><a href=\"#6、SpringBoot方式配置\" class=\"headerlink\" title=\"6、SpringBoot方式配置\"></a>6、SpringBoot方式配置</h2><h3 id=\"6-1、超时属性\"><a href=\"#6-1、超时属性\" class=\"headerlink\" title=\"6.1、超时属性\"></a>6.1、超时属性</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class=\"line\">@Service(timeout)</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class=\"line\">@Reference(timeout = <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-2、SpringBoot与Dubbo整合的三种方式\"><a href=\"#6-2、SpringBoot与Dubbo整合的三种方式\" class=\"headerlink\" title=\"6.2、SpringBoot与Dubbo整合的三种方式\"></a>6.2、SpringBoot与Dubbo整合的三种方式</h3><p><strong>6.2.1、第一种</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>导入dobuuo-starter</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;<span class=\"number\">0.2</span><span class=\"number\">.0</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>配置application.properties</span><br><span class=\"line\">#dubbo服务名称</span><br><span class=\"line\">dubbo.application.name=boot-order-service-provider</span><br><span class=\"line\">#注册中心地址</span><br><span class=\"line\">dubbo.registry.address=<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">2181</span></span><br><span class=\"line\">#注册中心协议</span><br><span class=\"line\">dubbo.registry.protocol=zookeeper</span><br><span class=\"line\">#通信协议</span><br><span class=\"line\">dubbo.protocol.name=dubbo</span><br><span class=\"line\">dubbo.protocol.prot=<span class=\"number\">20880</span></span><br><span class=\"line\">#监控中心地址:registry从注册中心自动发现</span><br><span class=\"line\">dubbo.monitor.protocol=registry</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>暴漏服务注解@Service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span>使用远程服务@Reference</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5.</span>开启Dubbo注解功能@EnableDubbo</span><br><span class=\"line\"></span><br><span class=\"line\">#老版本会指定包扫描规则</span><br><span class=\"line\">dubbo.scan.base-packages=com</span><br></pre></td></tr></table></figure>\n<p><strong>6.2.2、第二种：保留XML</strong></p>\n<p>想要做到方法级别的配置，保留dubbo的xml配置文件，之后可以在xml中做到method方法级别的配置。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 拷贝xml文件到resource目录,删除application.properties中dubbo的相关配置</span><br><span class=\"line\"># 所有配置都在xml中</span><br><span class=\"line\"><span class=\"number\">1.</span>导入dobuuo-starter</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;<span class=\"number\">0.2</span><span class=\"number\">.0</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>使用@ImportResource导入dubbo的xml配置文件</span><br><span class=\"line\"><span class=\"comment\">//@EnableDubbo</span></span><br><span class=\"line\">@ImportResource(location=<span class=\"string\">&quot;classpath:provider.xml&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>6.2.3、第三种:注解API配置类</strong></p>\n<p>将每一个组件手动创建到容器中</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>创建配置类</span><br><span class=\"line\">package com.atguigu.gmall.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.service.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDubboConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供者名</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public ApplicationConfig <span class=\"function\"><span class=\"title\">applicationConfig</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        ApplicationConfig applicationConfig = <span class=\"keyword\">new</span> ApplicationConfig();</span><br><span class=\"line\">        applicationConfig.setName(<span class=\"string\">&quot;boot-order-service-provider-config&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> applicationConfig;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注册中心地址</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public RegistryConfig <span class=\"function\"><span class=\"title\">registryConfig</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        RegistryConfig registryConfig = <span class=\"keyword\">new</span> RegistryConfig();</span><br><span class=\"line\">        registryConfig.setProtocol(<span class=\"string\">&quot;zookeeper&quot;</span>);</span><br><span class=\"line\">        registryConfig.setAddress(<span class=\"string\">&quot;127.0.0.1:2181&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> registryConfig;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通信规则</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public ProtocolConfig <span class=\"function\"><span class=\"title\">protocolConfig</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        ProtocolConfig protocolConfig = <span class=\"keyword\">new</span> ProtocolConfig();</span><br><span class=\"line\">        protocolConfig.setName(<span class=\"string\">&quot;dubbo&quot;</span>);</span><br><span class=\"line\">        protocolConfig.setPort(<span class=\"number\">20882</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> protocolConfig;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 配置暴漏服务</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public ServiceConfig&lt;UserService&gt; <span class=\"function\"><span class=\"title\">userServiceConfig</span>(<span class=\"params\">UserService userService</span>)</span> &#123;</span><br><span class=\"line\">        ServiceConfig&lt;UserService&gt; userServiceConfig = <span class=\"keyword\">new</span> ServiceConfig&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//配置接口级别</span></span><br><span class=\"line\">        userServiceConfig.setInterface(UserService.class);</span><br><span class=\"line\">        userServiceConfig.setRef(userService);</span><br><span class=\"line\">        userServiceConfig.setVersion(<span class=\"string\">&quot;1.0.0&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//配置方法级别</span></span><br><span class=\"line\">        MethodConfig methodConfig = <span class=\"keyword\">new</span> MethodConfig();</span><br><span class=\"line\">        methodConfig.setName(<span class=\"string\">&quot;getUserAddressList&quot;</span>);</span><br><span class=\"line\">        methodConfig.setTimeout(<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        userServiceConfig.setMethods(Arrays.asList(methodConfig));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userServiceConfig;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置监控中心</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public MonitorConfig <span class=\"function\"><span class=\"title\">monitorConfig</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        MonitorConfig monitorConfig = <span class=\"keyword\">new</span> MonitorConfig();</span><br><span class=\"line\">        monitorConfig.setProtocol(<span class=\"string\">&quot;registry&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> monitorConfig;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>暴露服务接口</span><br><span class=\"line\">@Service <span class=\"comment\">//暴露服务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>启动dubbo并指定扫描路径</span><br><span class=\"line\">@EnableDubbo(scanBasePackages = <span class=\"string\">&quot;com.atguigu.gmall&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"三、高可用\"><a href=\"#三、高可用\" class=\"headerlink\" title=\"三、高可用\"></a>三、高可用</h1><h2 id=\"3-1、zookeeper宕机与dubbo直连\"><a href=\"#3-1、zookeeper宕机与dubbo直连\" class=\"headerlink\" title=\"3.1、zookeeper宕机与dubbo直连\"></a>3.1、zookeeper宕机与dubbo直连</h2><p><img src=\"Untitled%2012.png\" alt=\"Untitled%2012.png\"></p>\n<p>注册中心的作用就是保存服务提供者位置信息，我们完全可以绕过注册中心使用dubbo直连.</p>\n<p>宕机了有缓存，依旧可以调用。没有注册中心使用直连</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Reference(timeout = <span class=\"number\">0</span>,url = <span class=\"string\">&quot;127.0.0.1:20880&quot;</span>)</span><br><span class=\"line\">UserService userService;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2、集群下dubbo负载均衡机制\"><a href=\"#3-2、集群下dubbo负载均衡机制\" class=\"headerlink\" title=\"3.2、集群下dubbo负载均衡机制\"></a>3.2、集群下dubbo负载均衡机制</h2><p><a href=\"https://dubbo.apache.org/zh/docsv2.7/user/examples/loadbalance/\">https://dubbo.apache.org/zh/docsv2.7/user/examples/loadbalance/</a></p>\n<p>在集群负载均衡时，Dubbo 提供了多种均衡策略，缺省为 random 随机调用,</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**Random LoadBalance**</span><br><span class=\"line\">随机，按权重设置随机概率。</span><br><span class=\"line\">在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。</span><br><span class=\"line\">**RoundRobin LoadBalance**</span><br><span class=\"line\">轮循，按公约后的权重设置轮循比率。</span><br><span class=\"line\">存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。</span><br><span class=\"line\">**LeastActive LoadBalance**</span><br><span class=\"line\">最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。</span><br><span class=\"line\">使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。</span><br><span class=\"line\">**ConsistentHash LoadBalance**</span><br><span class=\"line\">一致性 Hash，相同参数的请求总是发到同一提供者。</span><br><span class=\"line\">当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。算法参见：http:<span class=\"comment\">//en.wikipedia.org/wiki/Consistent_hashing</span></span><br><span class=\"line\">缺省只对第一个参数 Hash，如果要修改，请配置 &lt;dubbo:parameter key=<span class=\"string\">&quot;hash.arguments&quot;</span> value=<span class=\"string\">&quot;0,1&quot;</span> /&gt;</span><br><span class=\"line\">缺省用 <span class=\"number\">160</span> 份虚拟节点，如果要修改，请配置 &lt;dubbo:parameter key=<span class=\"string\">&quot;hash.nodes&quot;</span> value=<span class=\"string\">&quot;320&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-1、Random-LoadBalance\"><a href=\"#3-2-1、Random-LoadBalance\" class=\"headerlink\" title=\"3.2.1、Random LoadBalance\"></a>3.2.1、Random LoadBalance</h3><p><img src=\"Untitled%2013.png\" alt=\"Untitled%2013.png\"></p>\n<h3 id=\"3-2-2、RoundRobin-LoadBalance\"><a href=\"#3-2-2、RoundRobin-LoadBalance\" class=\"headerlink\" title=\"3.2.2、RoundRobin LoadBalance\"></a>3.2.2、RoundRobin LoadBalance</h3><p>第一调完，必须去第二个,根据权重1只能占2次，2占4次，3占1次。</p>\n<p><img src=\"Untitled%2014.png\" alt=\"Untitled%2014.png\"></p>\n<h3 id=\"3-2-3、LeastActive-LoadBalance\"><a href=\"#3-2-3、LeastActive-LoadBalance\" class=\"headerlink\" title=\"3.2.3、LeastActive LoadBalance\"></a>3.2.3、LeastActive LoadBalance</h3><p><img src=\"Untitled%2015.png\" alt=\"Untitled%2015.png\"></p>\n<p>每次都统计上次请求时间</p>\n<p>调哪个前会查那个上次最快</p>\n<h3 id=\"3-2-4、ConsistentHash-LoadBalance\"><a href=\"#3-2-4、ConsistentHash-LoadBalance\" class=\"headerlink\" title=\"3.2.4、ConsistentHash LoadBalance\"></a>3.2.4、ConsistentHash LoadBalance</h3><p>比如getUser,id都等于1的，根据hash分布都会来到1号机器。</p>\n<p><img src=\"Untitled%2016.png\" alt=\"Untitled%2016.png\"></p>\n<h3 id=\"3-2-5、配置\"><a href=\"#3-2-5、配置\" class=\"headerlink\" title=\"3.2.5、配置\"></a>3.2.5、配置</h3><p>默认为随机负载均衡机制</p>\n<p><img src=\"Untitled%2017.png\" alt=\"Untitled%2017.png\"></p>\n<p><img src=\"Untitled%2018.png\" alt=\"Untitled%2018.png\"></p>\n<p>XML：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### **服务端服务级别**</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`&lt;dubbo:service interface=&quot;...&quot; loadbalance=&quot;roundrobin&quot; /&gt;`</span></span><br><span class=\"line\"></span><br><span class=\"line\">### **客户端服务级别**</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`&lt;dubbo:reference interface=&quot;...&quot; loadbalance=&quot;roundrobin&quot; /&gt;`</span></span><br><span class=\"line\"></span><br><span class=\"line\">### **服务端方法级别**</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`&lt;dubbo:service interface=&quot;...&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;dubbo:method name=&quot;...&quot; loadbalance=&quot;roundrobin&quot;/&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/dubbo:service&gt;`</span></span><br><span class=\"line\"></span><br><span class=\"line\">### **客户端方法级别**</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`&lt;dubbo:reference interface=&quot;...&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;dubbo:method name=&quot;...&quot; loadbalance=&quot;roundrobin&quot;/&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/dubbo:reference&gt;`</span></span><br></pre></td></tr></table></figure>\n<p>注解：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Reference(timeout = <span class=\"number\">0</span>,loadbalance = <span class=\"string\">&quot;roundrobin&quot;</span>) </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"Untitled%2019.png\" alt=\"Untitled%2019.png\"></p>\n<h2 id=\"3-3、整合hystrix，服务熔断与降级处理\"><a href=\"#3-3、整合hystrix，服务熔断与降级处理\" class=\"headerlink\" title=\"3.3、整合hystrix，服务熔断与降级处理\"></a>3.3、整合hystrix，服务熔断与降级处理</h2><h3 id=\"3-3-1、服务降级\"><a href=\"#3-3-1、服务降级\" class=\"headerlink\" title=\"3.3.1、服务降级\"></a>3.3.1、服务降级</h3><p>什么是服务降级？</p>\n<p>当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理或换种简单的方式处理，从而释放服务器资源以保证核心交易正常运作或高效运作</p>\n<p>可以通过服务降级功能临时屏蔽某个出错的非关键服务，并定义降级后的返回策略。</p>\n<p>支持2种：</p>\n<ul>\n<li>mock=force:return+null 表示消费方对该服务的方法调用都直接返回 null 值，不发起远程调用。用来屏蔽不重要服务不可用时对调用方的影响。（直接在客户端返回null，不发起远程调用）</li>\n<li>还可以改为 mock=fail:return+null 表示消费方对该服务的方法调用在失败后，再返回 null 值，不抛异常。用来容忍不重要服务不稳定时对调用方的影响。（到达一定超时时间，超时后调用在失败后，再返回 null 值，这个是服务已经调用了）</li>\n</ul>\n<p>通过服务降级手段，牺牲非核心业务的占用的资源，达到让其他核心业务能占用服务器更多资源</p>\n<p><strong>配置，在消费者端</strong></p>\n<p>第一种：屏蔽（不进行远程调用，返回null）</p>\n<p><img src=\"Untitled%2020.png\" alt=\"Untitled%2020.png\"></p>\n<p>第二种：容错（当远程调用失败后，返回null）</p>\n<p><img src=\"Untitled%2021.png\" alt=\"Untitled%2021.png\"></p>\n<h3 id=\"3-3-2、集群容错\"><a href=\"#3-3-2、集群容错\" class=\"headerlink\" title=\"3.3.2、集群容错\"></a>3.3.2、集群容错</h3><p>在集群调用失败时，Dubbo 提供了多种容错方案，缺省为 failover 重试。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>**Failover Cluster**</span><br><span class=\"line\">失败自动切换，当出现失败，重试其它服务器。通常**用于读操作**，但重试会带来更长延迟。</span><br><span class=\"line\">可通过 retries=<span class=\"string\">&quot;2&quot;</span> 来设置重试次数(不含第一次)。</span><br><span class=\"line\"></span><br><span class=\"line\">重试次数配置如下：</span><br><span class=\"line\">&lt;dubbo:service retries=<span class=\"string\">&quot;2&quot;</span> /&gt;</span><br><span class=\"line\">或</span><br><span class=\"line\">&lt;dubbo:reference retries=<span class=\"string\">&quot;2&quot;</span> /&gt;</span><br><span class=\"line\">或</span><br><span class=\"line\">&lt;dubbo:reference&gt;</span><br><span class=\"line\">    &lt;dubbo:method name=<span class=\"string\">&quot;findFoo&quot;</span> retries=<span class=\"string\">&quot;2&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/dubbo:reference&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>**Failfast Cluster**</span><br><span class=\"line\">快速失败，只发起一次调用，失败立即报错。通常用于**非幂等性**的写操作，比如新增记录。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>**Failsafe Cluster**</span><br><span class=\"line\">失败安全，出现异常时，直接**忽略**。通常用于写入审计日志等操作。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span>**Failback Cluster**</span><br><span class=\"line\">**失败自动恢复**，后台记录失败请求，定时重发。通常**用于消息通知**操作。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5.</span>**Forking Cluster**</span><br><span class=\"line\">**并行调用**多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，</span><br><span class=\"line\">但需要浪费更多服务资源。可通过 forks=<span class=\"string\">&quot;2&quot;</span> 来设置最大并行数。太浪费资源。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">6.</span>**Broadcast Cluster**</span><br><span class=\"line\">广播**调用所有提供者，逐个调用，任意一台报错则报错** [<span class=\"number\">2</span>]。</span><br><span class=\"line\">通常**用于通知所有提供者更新缓存**或日志等本地资源信息。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">7.</span>**集群模式配置**</span><br><span class=\"line\">按照以下示例在服务提供方和消费方配置集群模式</span><br><span class=\"line\">&lt;dubbo:service cluster=<span class=\"string\">&quot;failsafe&quot;</span> /&gt;</span><br><span class=\"line\">或</span><br><span class=\"line\">&lt;dubbo:reference cluster=<span class=\"string\">&quot;failsafe&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-3、实际开发整合hystrix提供容错（SpringCloud默认整合的框架）\"><a href=\"#3-3-3、实际开发整合hystrix提供容错（SpringCloud默认整合的框架）\" class=\"headerlink\" title=\"3.3.3、实际开发整合hystrix提供容错（SpringCloud默认整合的框架）\"></a>3.3.3、实际开发整合hystrix提供容错（SpringCloud默认整合的框架）</h3><p>Hystrix 旨在通过控制那些访问远程系统、服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力。Hystrix具备拥有回退机制和断路器功能的线程和信号隔离，请求缓存和请求打包，以及监控和配置等功能。</p>\n<p><strong>1、配置spring-cloud-starter-netflix-hystrix</strong></p>\n<p>spring boot官方提供了对hystrix的集成，直接在消费者、提供者的pom.xml里加入依赖：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;<span class=\"number\">1.4</span><span class=\"number\">.4</span>.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>然后在Application类上增加@EnableHystrix来启用hystrix starter：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@EnableHystrix</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProviderApplication</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2、配置Provider端</strong></p>\n<p>在Dubbo的Provider上增加@HystrixCommand配置，这样子调用就会经过Hystrix代理。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service(version = <span class=\"string\">&quot;1.0.0&quot;</span>)</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServiceImpl</span> <span class=\"title\">implements</span> <span class=\"title\">HelloService</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//使用Hystrix代理，进行处理容错异常</span></span><br><span class=\"line\">    @HystrixCommand(commandProperties = &#123;</span><br><span class=\"line\">     @HystrixProperty(name = <span class=\"string\">&quot;circuitBreaker.requestVolumeThreshold&quot;</span>, value = <span class=\"string\">&quot;10&quot;</span>),</span><br><span class=\"line\">     @HystrixProperty(name = <span class=\"string\">&quot;execution.isolation.thread.timeoutInMilliseconds&quot;</span>, value = <span class=\"string\">&quot;2000&quot;</span>) &#125;)</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public <span class=\"built_in\">String</span> <span class=\"function\"><span class=\"title\">sayHello</span>(<span class=\"params\"><span class=\"built_in\">String</span> name</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// System.out.println(&quot;async provider received: &quot; + name);</span></span><br><span class=\"line\">        <span class=\"comment\">// return &quot;annotation: hello, &quot; + name;</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;Exception to show hystrix enabled.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3、配置Consumer端</strong></p>\n<p>对于Consumer端，则可以增加一层method调用，并在method上配置@HystrixCommand。当调用出错时，会走到fallbackMethod = “reliable”的调用里。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Reference(version = <span class=\"string\">&quot;1.0.0&quot;</span>)</span><br><span class=\"line\">    private HelloService demoService;</span><br><span class=\"line\">\t\t<span class=\"comment\">//fallbackMethod 回调方法,一旦调用失败出错后，调用reliable方法</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//就不用在调用代码中trycatch了</span></span><br><span class=\"line\">    @HystrixCommand(fallbackMethod = <span class=\"string\">&quot;reliable&quot;</span>)</span><br><span class=\"line\">    public <span class=\"built_in\">String</span> <span class=\"function\"><span class=\"title\">doSayHello</span>(<span class=\"params\"><span class=\"built_in\">String</span> name</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> demoService.sayHello(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public <span class=\"built_in\">String</span> <span class=\"function\"><span class=\"title\">reliable</span>(<span class=\"params\"><span class=\"built_in\">String</span> name</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hystrix fallback value&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"四、Dubbo原理\"><a href=\"#四、Dubbo原理\" class=\"headerlink\" title=\"四、Dubbo原理\"></a>四、Dubbo原理</h1><h2 id=\"4-1、RPC原理\"><a href=\"#4-1、RPC原理\" class=\"headerlink\" title=\"4.1、RPC原理\"></a>4.1、RPC原理</h2><p>rpc就是想完成一次远程调用</p>\n<p><img src=\"Untitled%2022.png\" alt=\"Untitled%2022.png\"></p>\n<p>一次完整的RPC调用流程（同步调用，异步另说）如下：</p>\n<p>1）Computer01（client）发起远程调用请求,接下来有一个代理对象client stub</p>\n<p><strong>2）client stub接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体；</strong></p>\n<p><strong>3）client stub找到服务地址，并将消息发送到服务端server stub；</strong></p>\n<p><strong>4）server stub收到消息后进行解码(可能传输的是序列化对象，需要反序列化)；</strong></p>\n<p><strong>5）server stub根据解码结果调用本地的方法服务；</strong></p>\n<p><strong>6）本地方法服务执行完成后，将数据结果返回给server stub；</strong></p>\n<p><strong>7）server stub将返回结果打包(序列化)成消息通过网络发送至消费方client stub；</strong></p>\n<p><strong>8）client stub接收到消息，并进行解码(反序列化)；</strong></p>\n<p>9）服务消费方Computer01得到最终结果。</p>\n<p>RPC框架的目标就是要2~8这些步骤都封装起来，这些细节对用户来说是透明的，不可见的。</p>\n<h2 id=\"4-2、netty通信原理\"><a href=\"#4-2、netty通信原理\" class=\"headerlink\" title=\"4.2、netty通信原理\"></a>4.2、netty通信原理</h2><p>Dubbo底层通信时是使用netty，Netty时基于Java的NIO(Non-Blocking IO)非阻塞,BIO(Blocking IO)阻塞IO。</p>\n<p><strong>BIO：</strong></p>\n<p><img src=\"Untitled%2023.png\" alt=\"Untitled%2023.png\"></p>\n<p>每一个请求进来开一个线程Socket，读取Socket的输入流、进行业务逻辑等等。同时在这操作，并且此时在我们业务逻辑没完成之前，我们线程都不能得到释放的，这样我们的服务器就不能同时处理大量的请求。因为有大量的线程在等待业务逻辑的完成。</p>\n<p><strong>NIO：</strong></p>\n<p><img src=\"Untitled%2024.png\" alt=\"Untitled%2024.png\"></p>\n<p>Channel：通道，通道里还有Buffer，利用Buffer进行数据传输。</p>\n<p>Selector ：一般称 为<strong>选择器</strong> ，也可以翻译为 <strong>多路复用器。</strong></p>\n<p>通道状态：Connect（连接就绪）、Accept（接受就绪）、Read（读就绪）、Write（写就绪）。</p>\n<p><strong>基本原理：</strong></p>\n<p>1个Selector会有很多通道注册了进来，Selector通过监听多个通道，监听会有很多事件，如当Connect了发生什么，Accept了会做什么，Read或Write发生了时要做什么，当发现某一个通道数据准备好了。所以我们通过1个Selector监听多个通道的方式，当某个通道任何一个状态准备好了，我们可以额外开一个线程进行处理。这叫多路复用模型。</p>\n<p><img src=\"Untitled%2025.png\" alt=\"Untitled%2025.png\"></p>\n<p>1.启动</p>\n<p>2.监听某一个端口</p>\n<p>3.初始化一个通道，注册到Selector中</p>\n<p>4.轮询监听通道的accept事件</p>\n<p>5.当accept事件发生后，扔到任务队列，处理通道信息，就与客户端建立连接来生成SocketChannel</p>\n<p>6.然后把刚生成的SocketChannel通道再注册到Selector里面，进行监听read、wirte事件</p>\n<p>7.read、wirte事件准备就绪了就来处理，抛给任务队列。</p>\n<p>注意：有2个Selector，一个是boss来进行监听准备就绪事件，另一个woker是当准备就绪后要做什么工作，把这个工作抛给woker慢慢来做。</p>\n<h2 id=\"4-3、dubbo原理\"><a href=\"#4-3、dubbo原理\" class=\"headerlink\" title=\"4.3、dubbo原理\"></a>4.3、dubbo原理</h2><h3 id=\"4-3-1、dubbo原理-框架设计\"><a href=\"#4-3-1、dubbo原理-框架设计\" class=\"headerlink\" title=\"4.3.1、dubbo原理    -   框架设计\"></a>4.3.1、dubbo原理    -   框架设计</h3><p><img src=\"Untitled%2026.png\" alt=\"Untitled%2026.png\"></p>\n<p><strong>各层说明</strong></p>\n<ul>\n<li><strong>config 配置层</strong>：对外配置接口，以 <code>ServiceConfig</code>, <code>ReferenceConfig</code> 为中心，可以直接初始化配置类，也可以通过 spring 解析<strong>配置生成配置类</strong></li>\n<li><strong>proxy 服务代理层</strong>：服务接口透明代理，<strong>生成服务的客户端 Stub 和服务器端 Skeleton,</strong> 以 <code>ServiceProxy</code> 为中心，扩展接口为 <code>ProxyFactory</code></li>\n<li><strong>registry 注册中心层</strong>：封装服务地址的<strong>注册与发现</strong>，以服务 URL 为中心，扩展接口为 <code>RegistryFactory</code>, <code>Registry</code>, <code>RegistryService</code></li>\n<li><strong>cluster 路由层</strong>：封装多个提供者的路由及<strong>负载均衡</strong>，并桥接注册中心，以 <code>Invoker</code> 为中心，扩展接口为 <code>Cluster</code>, <code>Directory</code>, <code>Router</code>, <code>LoadBalance</code></li>\n<li><strong>monitor 监控层</strong>：RPC <strong>调用次数和调用时间监控</strong>，以 <code>Statistics</code> 为中心，扩展接口为 <code>MonitorFactory</code>, <code>Monitor</code>, <code>MonitorService</code></li>\n<li><strong>protocol 远程调用层</strong>：<strong>封装 RPC 调用</strong>，以 <code>Invocation</code>, <code>Result</code> 为中心，扩展接口为 <code>Protocol</code>, <code>Invoker</code>, <code>Exporter</code></li>\n<li><strong>exchange 信息交换层</strong>：封装请求响应模式，同步转异步，以 <code>Request</code>, <code>Response</code> 为中心，扩展接口为 <code>Exchanger</code>, <code>ExchangeChannel</code>, <code>ExchangeClient</code>, <code>ExchangeServer</code>，创建客户端和服务端，两个架起管道进行数据互联互通。</li>\n<li><strong>transport 网络传输层</strong>：抽象 mina 和 **netty (transport 底层)**为统一接口，以 <code>Message</code> 为中心，扩展接口为 <code>Channel</code>, <code>Transporter</code>, <code>Client</code>, <code>Server</code>, <code>Codec</code></li>\n<li><strong>serialize 数据序列化层</strong>：可复用的一些工具，扩展接口为 <code>Serialization</code>, <code>ObjectInput</code>, <code>ObjectOutput</code>, <code>ThreadPool</code></li>\n</ul>\n<p><strong>说明：</strong>Consumer在左边，Provider在右边。Call为调用逻辑，黑颜色是依赖顺序。</p>\n<h3 id=\"4-3-2、dubbo原理-启动解析、加载配置信息\"><a href=\"#4-3-2、dubbo原理-启动解析、加载配置信息\" class=\"headerlink\" title=\"4.3.2、dubbo原理    -   启动解析、加载配置信息\"></a>4.3.2、dubbo原理    -   启动解析、加载配置信息</h3><p>BeanDefinitionParser定义解析器</p>\n<p>DubboBeanDefinitionParser中的parse方法来解析标签。挨个标签来解析。</p>\n<p>DubboBeanDefinitionParser构造器打断点看怎么创建出来的。</p>\n<p><img src=\"Untitled%2027.png\" alt=\"Untitled%2027.png\"></p>\n<p>init方法注册很多标签解析器。容器启动，解析每一个标签，每一个标签都有对应的***Config.class，保存到指定的对象中,Service标签牵扯到服务暴漏的功能。</p>\n<p><img src=\"Untitled%2028.png\" alt=\"Untitled%2028.png\"></p>\n<h3 id=\"4-3-3、dubbo原理-服务暴露\"><a href=\"#4-3-3、dubbo原理-服务暴露\" class=\"headerlink\" title=\"4.3.3、dubbo原理    -   服务暴露\"></a>4.3.3、dubbo原理    -   服务暴露</h3><p><img src=\"dubbo-%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2.jpg\" alt=\"dubbo-%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2.jpg\"></p>\n<p>Service标签牵扯到服务暴漏的功能，ServiceBean它实现了InitalizingBean（它在创建完对象以后调用afterPropertisSet方法）、ApplicationListener(事件是ContextRefreshedEvent(当IOC容器完成后会回调onApplicationEvent方法))</p>\n<p>afterPropertisSet方法和onApplicationEvent方法都做了什么：</p>\n<p>afterPropertisSet方法保存配置的属性信息。</p>\n<p>onApplicationEvent方法判断当没有爆露时调用export方法暴漏服务，调用doExport方法。调用doExportUrls方法，第一步加载注册信息，再调用doExportUrlsFor1Portocol方法，创建invoker，调用protocol(DubboProtocol).export(wrapperInvoker)</p>\n<p>暴漏URL,OPENServer(url)，启动netty服务器，监听20880端口</p>\n<p>创建服务器createServer(url)</p>\n<p>Exchangers.bind(url,requestHandler)绑定url和处理器</p>\n<p>Transporters.bind(url,new DecodeHandler(new HanderExchangesHandler()))这都是netty的底层，创建一个netty的服务器。</p>\n<p>注册提供者。</p>\n<p>总共2步：</p>\n<p>启动netty服务器，监听20880端口。</p>\n<p>注册中心进行注册服务，把注册好的地址，把注册信息保存在注册中心。</p>\n<p>microkernel plugin模式</p>\n<h3 id=\"4-3-4、dubbo原理-服务引用\"><a href=\"#4-3-4、dubbo原理-服务引用\" class=\"headerlink\" title=\"4.3.4、dubbo原理    -   服务引用\"></a>4.3.4、dubbo原理    -   服务引用</h3><p>如何通过配置reference标签远程引用暴漏的服务。</p>\n<p><img src=\"Untitled%2029.png\" alt=\"Untitled\"></p>\n<p>前置类似暴漏服务原理，对应的是ReferenceBean,特殊在implement FactoryBean，FactoryBean作用是当我们要获取userService，在引用userService的类中需要自动注入userService，需要从spring容器中找，通过调用FactoryBean的getObject方法获取userService对象，getObject调用ReferenceConfig的getT方法，如果ref引用是空的，就init（）初始化对象，ref = createProxy（map）。</p>\n<p><img src=\"Untitled%2030.png\" alt=\"Untitled\"></p>\n<p><img src=\"Untitled%2031.png\" alt=\"Untitled\"></p>\n<p>然后远程引用接口，urls保存了注册中心的地址。</p>\n<p><img src=\"Untitled%2032.png\" alt=\"Untitled\"></p>\n<p>refprotocal还是Protocal，Protocal有2种，1个是DubboProtocal，另一个是RegistryProtocol，这里调用RegistryProtocol的refer方法。</p>\n<p><img src=\"Untitled%2033.png\" alt=\"Untitled\"></p>\n<p>先根据注册中心地址得到注册中心信息。然后调用doRefer,传入了注册中心地址，还有要引用的userService</p>\n<p><img src=\"Untitled%2034.png\" alt=\"Untitled\"></p>\n<p>之后进行订阅服务</p>\n<p><img src=\"Untitled%2035.png\" alt=\"Untitled\"></p>\n<p>订阅服务会进入到DubboProtocol，DubboProtocol会getClients获取客户端。</p>\n<p><img src=\"Untitled%2036.png\" alt=\"Untitled\"></p>\n<p>拿到客户端，初始化客户端</p>\n<p><img src=\"Untitled%2037.png\" alt=\"Untitled\"></p>\n<p>然偶会进行连接</p>\n<p><img src=\"Untitled%2038.png\" alt=\"Untitled\"></p>\n<p>获取返回连接，调用Transporter.connect（），之后就到达了netty的底层。</p>\n<p><img src=\"Untitled%2039.png\" alt=\"Untitled\"></p>\n<p><img src=\"Untitled%2040.png\" alt=\"Untitled\"></p>\n<p><img src=\"Untitled%2041.png\" alt=\"Untitled\"></p>\n<p>相当于创建一个netty客户端，根据url地址监听一个端口。创建完连接后返回DubboProtocol中，创建好invoker，返回invoker。</p>\n<p><img src=\"Untitled%2042.png\" alt=\"Untitled\"></p>\n<p>获取创建好的invoker，里面有url地址，消费者地址。之后在消费者注册表里把刚创建的invoker注册进去。注册进入subscribeUrl订阅地址。记录消费者消费哪个服务。</p>\n<p><img src=\"Untitled%2043.png\" alt=\"Untitled\"></p>\n<p>保存好了后返回到doRefer()</p>\n<p><img src=\"Untitled%2044.png\" alt=\"Untitled\"></p>\n<p>但后一直返回到createProxy。ref代理对象就创建好了，远程信息等都在里面存好了。</p>\n<p>之后使用代理对象来执行远程调用方法。</p>\n<p><img src=\"Untitled%2045.png\" alt=\"Untitled\"></p>\n<h3 id=\"4-3-5、dubbo原理-服务调用\"><a href=\"#4-3-5、dubbo原理-服务调用\" class=\"headerlink\" title=\"4.3.5、dubbo原理    -   服务调用\"></a>4.3.5、dubbo原理    -   服务调用</h3><p>整体流程：</p>\n<p><img src=\"Untitled%2046.png\" alt=\"Untitled\"></p>\n<p>代理对象如何执行方法呢，在这里打个断点。</p>\n<p><img src=\"Untitled%2047.png\" alt=\"Untitled\"></p>\n<p>会调用invoke，并且会传入method和args并封装成一个叫RpcInvocation远程调用的对象。</p>\n<p><img src=\"Untitled%2048.png\" alt=\"Untitled\"></p>\n<p>之后再进一个Invoker，它里面封装了FailOverCluster，他是dubbo带集群容错功能的invoker</p>\n<p><img src=\"Untitled%2049.png\" alt=\"Untitled\"></p>\n<p>进去后查询有多少个可执行版本的方法，再获取负载均衡的机制，之后继续doInvoke</p>\n<p><img src=\"Untitled%2050.png\" alt=\"Untitled\"></p>\n<p>之后有个select能根据我们的负载均衡策略进行负载随机选择1个invoker</p>\n<p><img src=\"Untitled%2051.png\" alt=\"Untitled\"></p>\n<p>接下来调用invoker.invoke执行，到了真正要执行时还封装了一些filter，这个filter在最开始proxy代理对象要用invoker时会在外面封装filter来做（local、mock、cache）</p>\n<p><a href=\"https://dubbo.apache.org/zh/docsv2.7/user/examples/local-mock/\">https://dubbo.apache.org/zh/docsv2.7/user/examples/local-mock/</a></p>\n<p><a href=\"https://dubbo.apache.org/zh/docsv2.7/user/examples/result-cache/\">https://dubbo.apache.org/zh/docsv2.7/user/examples/result-cache/</a></p>\n<p>缓存功能时，然后invoker选中了负载均衡功能后，又进入filter，filter就是各个统计信息（监控中心等）ProtocolFilter，ProtocolFilter里封装到最终时DubboInvoker.</p>\n<p><img src=\"Untitled%2052.png\" alt=\"Untitled\"></p>\n<p><img src=\"Untitled%2053.png\" alt=\"Untitled\"></p>\n<p><img src=\"Untitled%2054.png\" alt=\"Untitled\"></p>\n<p>在DubboInvoker中获取到在服务引用时建立的客户端，拿到引用的哪个远程服务，之后再request发起请求，返回结果。这里request就已经进入到底层了。之后拿客户端，拿通道。</p>\n<p><img src=\"Untitled%2055.png\" alt=\"Untitled\"></p>\n<p><img src=\"Untitled%2056.png\" alt=\"Untitled\"></p>\n<p><img src=\"Untitled%2057.png\" alt=\"Untitled\"></p>\n<p>然后给通道发送出去。</p>\n<p><img src=\"Untitled%2058.png\" alt=\"Untitled\"></p>\n<p>之后返回拿到返回结果对象，里面封装了结果数据</p>\n<p><img src=\"Untitled%2059.png\" alt=\"Untitled\"></p>\n<p>返回返回， 之后打印到控制台。</p>\n<p><img src=\"Untitled%2060.png\" alt=\"Untitled\"></p>\n<h1 id=\"5-结束语\"><a href=\"#5-结束语\" class=\"headerlink\" title=\"5.结束语\"></a>5.结束语</h1><p>祝大家学业有成</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、基本知识\"><a href=\"#一、基本知识\" class=\"headerlink\" title=\"一、基本知识\"></a>一、基本知识</h1><h2 id=\"1-分布式基础理论\"><a href=\"#1-分布式基础理论\" class=\"headerlink\" title=\"1 分布式基础理论\"></a>1 分布式基础理论</h2><h3 id=\"1-1什么是分布式\"><a href=\"#1-1什么是分布式\" class=\"headerlink\" title=\"1.1什么是分布式\"></a>1.1什么是分布式</h3><p>分布式系统是若干个独立计算机的集合，，计算机对于用户来说就像个单个系统，建立在网络上的软件系统。</p>\n<p>随着互联网的发展，规模不断扩大，垂直应用架构无法应付，需要一个治理系统确保架构有条不紊的演进。</p>\n<p>dubbo作用：治理和维护各个分系统。</p>\n<h3 id=\"1-2-发展演变：\"><a href=\"#1-2-发展演变：\" class=\"headerlink\" title=\"1.2 发展演变：\"></a>1.2 发展演变：</h3><p><img src=\"Untitled.png\" alt=\"Untitled.png\"></p>\n<p><strong>单一应用架构：</strong></p>\n<p>流量小时，所有功能放到一起，减少部署节点和成本。</p>\n<p><img src=\"Untitled%201.png\" alt=\"Untitled%201.png\"></p>\n<p>缺点：</p>\n<p>扩展不容易，需要重新打包重新部署</p>\n<p>协同开发不容易</p>\n<p>扩大性能提升不容易</p>\n<p><strong>垂直应用架构：</strong></p>\n<p>小功能独立为单个应用，部署在多个服务器上</p>\n<p><img src=\"Untitled%202.png\" alt=\"Untitled%202.png\"></p>\n<p>优点：</p>\n<p>分工合作容易，分别负责开发</p>\n<p>性能扩展容易，多部署到几个服务器</p>\n<p>缺点：</p>\n<p>单个应用从头到尾都有的，包括页面逻辑和数据库。但是市场上界面改变快，改了需要重新部署，没法做到页面和业务逻辑的分离</p>\n<p>垂直应用越来越多，不可能完全应用于应用完全独立。用户调用订单和商品，物流调用订单等。应用之间需要交互</p>\n<p><strong>分布式服务架构：</strong></p>\n<p>核心业务单独抽取出来，用户应用抽取为页面和业务逻辑。当业务逻辑不变时只改界面，界面重新部署就行了。</p>\n<p><img src=\"Untitled%203.png\" alt=\"Untitled%203.png\"></p>\n<p>问题：</p>\n<p>用户web可能再A服务器上，业务再B服务器。如果A服务器调用B服务器功能时，因为不在一个进程内，分隔异地了，这2个代码调用需要RPC远程过程调用。</p>\n<p>难点：</p>\n<p>如何远程过程调用</p>\n<p>如何拆分业务，增加业务的复用程度</p>\n<p>好的分布式服务框架（RPC），应该有调度中心，来实时的监控业务中心实现动态调度，增加利用率，当某一个业务调用多了，可以让更多的服务器来跑业务量更大的业务，这是用流动计算架构</p>\n<p><strong>流动计算架构：</strong></p>\n<p><img src=\"Untitled%204.png\" alt=\"Untitled%204.png\"></p>\n<p>它负责维护业务之间复杂的关系，以及实时管理服务集群，当A访问量大了，可以多来几台服务器。而且多个A服务器中按照访问量动态调用，以此来提高集群的利用率。</p>\n<h3 id=\"1-3-RPC\"><a href=\"#1-3-RPC\" class=\"headerlink\" title=\"1.3 RPC\"></a>1.3 RPC</h3><p><strong>什么叫RPC</strong></p>\n<p>远程过程调用，A服务器调用B服务器上功能。是一种技术思想，不是规范。它允许程序调用另一个共享空间（通常是共享网络的另一台服务器）上的过程或函数。而不是程序员显示编码这个远程调用的细节。即程序员无论调用本地的还是远程的函数，本质上编写的调用代码基本相同。</p>\n<p><strong>RPC基本原理</strong></p>\n<p><img src=\"Untitled%205.png\" alt=\"Untitled%205.png\"></p>\n<p>clent functions想调用server functions时，通过小助手请求，通过sockets创建和server的sockets连接，将想调用的信息传递个server服务器，server小助手收到信息后确定调用函数，server用传递过来的信息调用自己方法后把返回值再通过网络sockets返回给client</p>\n<p>A和B架起网络连接后调用</p>\n<p><strong>例子：</strong></p>\n<p><img src=\"Untitled%206.png\" alt=\"Untitled%206.png\"></p>\n<p>A调用B时传递对象需要序列化，B先反序列化为对象，B服务器调用一下，拿到返回值，通过网络传输，序列化后传输给A服务器，A服务器需要反序列化后拿到返回值。</p>\n<p><strong>调用核心：</strong></p>\n<p>AB两个需要建立连接</p>\n<p>传递数据需要序列化和反序列化</p>\n<p><strong>决定性能有两点：</strong></p>\n<p>看RPC能否快速建立连接</p>\n<p>序列化于反序列化是否快</p>\n<p><strong>RPC框架：</strong></p>\n<p>dubbo、gRPC、Thrift、HSF</p>\n<p>思想相同，用法不同</p>\n<h2 id=\"2-dubbo核心概念\"><a href=\"#2-dubbo核心概念\" class=\"headerlink\" title=\"2 dubbo核心概念\"></a>2 dubbo核心概念</h2><h3 id=\"2-1-简介\"><a href=\"#2-1-简介\" class=\"headerlink\" title=\"2.1 简介\"></a>2.1 简介</h3><p>Apache Dubbo 是一款高性能、轻量级的开源 Java 服务框架</p>\n<p>注：rpc面向服务、cloud的是restful面向资源</p>\n<p>14.10停止更新，18.1将dubbo和dubbox合并后发布为2.6版本，最终将dubbo开放到apache。</p>\n<p>netty功能负责网络传输，dubbo使用netty作为网络传输框架。说到网络传输自然离不开Socket，Socket是端到端的连接。dubbo是无中心化，每个client端都能与server端连接，每个client端同时又是server端。</p>\n<p><strong>特性：</strong></p>\n<p>1.<strong>面向接口代理的高性能RPC调用</strong></p>\n<p>提供高性能的基于代理的远程调用能力，服务以接口为粒度，为开发者屏蔽远程调用底层细节。</p>\n<p>A调用B只需要将接口拿来调用，dubbo会自动的找B服务器的这段代码，屏蔽了整个调用细节。</p>\n<p>类似Mybatis，调用数据库是只需要写do-mapping接口，调用接口方法就行了。</p>\n<p><strong>2.智能负载均衡</strong></p>\n<p>内置多种负载均衡策略，智能感知下游节点健康状况，显著减少调用延迟，提高系统吞吐量。</p>\n<p>一个服务1台服务器不够时部署多台后，会自动找空闲服务器运行。</p>\n<p>不会压垮某一台服务器，也不会让某服务器太闲浪费资源。</p>\n<p><strong>3.服务自动注册与发现</strong></p>\n<p>支持多种注册中心服务，服务实例上下线实时感知。</p>\n<p>业务非常多，订单调用支付业务时如何知道业务服务器是否知道有问题切在哪，为了动态感知，将所有程序注册到注册中心，维护注册清单。调用时会问一下调用的服务在哪个服务器，选择请求量最小的。建立通信，进行远程调用。</p>\n<p><strong>4.高度可扩展能力</strong></p>\n<p>遵循微内核+插件的设计原则，所有核心能力如Protocol、Transport、Serialization被设计为扩展点，平等对待内置实现和第三方实现。</p>\n<p>所有东西都可扩展。</p>\n<p><strong>5.运行期流量调度</strong></p>\n<p>内置条件、脚本等路由策略，通过配置不同的路由规则，轻松实现灰度发布，同机房优先等功能。</p>\n<p>灰度发布：比如有个用户服务，现在在100台上服务器在跑，用户服务做了升级，害怕升级不稳定，可以先选定20台服务器，让他们用新版本的用户服务，剩下80台用旧版本的用户服务。等20台用的没问题了，再选20台，一点一点增加，知道100台都过度到新版本用户服务。可以配置不同路由规则，请求进来后一部分用新版本服务。慢慢从旧服务转变到新服务的过程。</p>\n<p><strong>6.可视化的服务治理与运维</strong></p>\n<p>提供丰富服务治理、运维工具：随时查询服务元数据、服务健康状态及调用统计，实时下发路由策略、调整配置参数。</p>\n<p>可以随时查询服务的信息、健康状况、调用统计记录等等。通过可视化界面。</p>\n<h3 id=\"2-2-dubbo设计架构\"><a href=\"#2-2-dubbo设计架构\" class=\"headerlink\" title=\"2.2 dubbo设计架构\"></a>2.2 dubbo设计架构</h3><p><img src=\"Untitled%207.png\" alt=\"Untitled%207.png\"></p>\n<p><a href=\"https://www.notion.so/6c6f03ae75794978a31ec967f82fec02\">节点角色说明</a></p>\n<p><strong>运行流程</strong></p>\n<ol>\n<li>服务容器负责启动，加载，运行服务提供者。</li>\n<li>服务提供者在启动时，向注册中心注册自己提供的服务。</li>\n<li>服务消费者在启动时，向注册中心订阅自己所需的服务。当某一个提供者下线了，基于长连接方式，将这个变更推送给消费者，可以实时知道有一个提供者不能调用了。当消费者拿到所有可以调的服务后，可以调用提供者提供的服务，调用时根据负载均衡算法选择一个提供者调用。</li>\n<li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li>\n<li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li>\n<li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li>\n</ol>\n<p>Dubbo 架构具有以下几个特点，分别是连通性、健壮性、伸缩性、以及向未来架构的升级性。</p>\n<p>0、1、2是初始时启动完成的，第3、5布是异步的。第4步是同步调用。</p>\n<p>应先创建提供者，注册到注册中心，再编写消费者，消费者从注册中心调用提供者。然后再编写消费者如何消费提供者提供的功能。</p>\n<p><strong>连通性<a href=\"https://dubbo.apache.org/zh/docs/v2.7/user/preface/architecture/#%E8%BF%9E%E9%80%9A%E6%80%A7\"></a></strong></p>\n<ul>\n<li>注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力较小</li>\n<li>监控中心负责统计各服务调用次数，调用时间等，统计先在内存汇总后每分钟一次发送到监控中心服务器，并以报表展示</li>\n<li>服务提供者向注册中心注册其提供的服务，并汇报调用时间到监控中心，此时间不包含网络开销</li>\n<li>服务消费者向注册中心获取服务提供者地址列表，并根据负载算法直接调用提供者，同时汇报调用时间到监控中心，此时间包含网络开销</li>\n<li>注册中心，服务提供者，服务消费者三者之间均为长连接，监控中心除外</li>\n<li>注册中心通过长连接感知服务提供者的存在，服务提供者宕机，注册中心将立即推送事件通知消费者</li>\n<li>注册中心和监控中心全部宕机，不影响已运行的提供者和消费者，消费者在本地缓存了提供者列表</li>\n<li>注册中心和监控中心都是可选的，服务消费者可以直连服务提供者</li>\n</ul>\n<p><strong>健壮性</strong></p>\n<ul>\n<li>监控中心宕掉不影响使用，只是丢失部分采样数据</li>\n<li>数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务</li>\n<li>注册中心对等集群，任意一台宕掉后，将自动切换到另一台</li>\n<li>注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯</li>\n<li>服务提供者无状态，任意一台宕掉后，不影响使用</li>\n<li>服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复</li>\n</ul>\n<p><strong>伸缩性</strong></p>\n<ul>\n<li>注册中心为对等集群，可动态增加机器部署实例，所有客户端将自动发现新的注册中心</li>\n<li>服务提供者无状态，可动态增加机器部署实例，注册中心将推送新的服务提供者信息给消费者</li>\n</ul>\n<p><strong>升级性<a href=\"https://dubbo.apache.org/zh/docs/v2.7/user/preface/architecture/#%E5%8D%87%E7%BA%A7%E6%80%A7\"></a></strong></p>\n<p>当服务集群规模进一步扩大，带动IT治理结构进一步升级，需要实现动态部署，进行流动计算，现有分布式服务架构不会带来阻力。</p>\n<h2 id=\"3-dubbo环境搭建\"><a href=\"#3-dubbo环境搭建\" class=\"headerlink\" title=\"3 dubbo环境搭建\"></a>3 dubbo环境搭建</h2><h3 id=\"3-1-搭建Zookeeper注册中心\"><a href=\"#3-1-搭建Zookeeper注册中心\" class=\"headerlink\" title=\"3.1 搭建Zookeeper注册中心\"></a>3.1 搭建Zookeeper注册中心</h3><p><strong>3.1.1 安装jdk</strong></p>\n<p>上传jdk包到/opt/software</p>\n<p>tar -zxvf jdk-8u291-linux-x64.tar.gz</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> JAVA_HOME=<span class=\"regexp\">/opt/</span>software/jdk1<span class=\"number\">.8</span><span class=\"number\">.0_291</span>/  #jdk安装目录</span><br><span class=\"line\"><span class=\"keyword\">export</span> JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class=\"line\"><span class=\"keyword\">export</span> CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib:$CLASSPATH</span><br><span class=\"line\"><span class=\"keyword\">export</span> JAVA_PATH=$&#123;JAVA_HOME&#125;/bin:$&#123;JRE_HOME&#125;/bin</span><br><span class=\"line\"><span class=\"keyword\">export</span> PATH=$PATH:$&#123;JAVA_PATH&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3.1.2安装zookeeper</strong></p>\n<p>拷贝到/opt/software</p>\n<p>解压</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf apache-zookeeper-<span class=\"number\">3.7</span><span class=\"number\">.0</span>.tar.gz</span><br></pre></td></tr></table></figure>\n<p><strong>3.1.3修改zookeeper配置</strong></p>\n<p>将”/opt/software/apache-zookeeper-3.7.0/conf/zoo_sample.cfg”拷贝份zoo.cfg</p>\n<p>打开zoo.cfg，修改vim zoo.cfg</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataDir=<span class=\"regexp\">/opt/</span>software/apache-zookeeper-<span class=\"number\">3.7</span><span class=\"number\">.0</span>/zkData/</span><br></pre></td></tr></table></figure>\n<p><strong>3.1.4操作zookeeper</strong></p>\n<p>(1) 启动zookeeper</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/software/apache-zookeeper-<span class=\"number\">3.7</span><span class=\"number\">.0</span>/bin</span><br><span class=\"line\">./zkServer.sh start</span><br></pre></td></tr></table></figure>\n<p>(2) 查看进程</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jps</span><br><span class=\"line\">./zkServer.sh status</span><br></pre></td></tr></table></figure>\n<p>(3)启动客户端</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./zkCli.sh</span><br><span class=\"line\">quit</span><br></pre></td></tr></table></figure>\n<p>(4) 关闭zookeeper</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./zkServer.sh stop</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-搭建监控中心\"><a href=\"#3-2-搭建监控中心\" class=\"headerlink\" title=\"3.2. 搭建监控中心\"></a>3.2. 搭建监控中心</h3><p><a href=\"https://github.com/apache/dubbo-admin\">https://github.com/apache/dubbo-admin</a></p>\n<p>root</p>\n<p>root</p>\n<p>3.2.1 <strong>服务治理</strong></p>\n<p>服务治理的部分，按照Dubbo 2.7的格式进行配置，同时兼容Dubbo 2.6，详见<a href=\"https://github.com/apache/dubbo-admin/wiki/%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E5%85%BC%E5%AE%B9%E6%80%A7%E8%AF%B4%E6%98%8E\">这里</a></p>\n<p>3.2.2 <strong>前端部分</strong></p>\n<ul>\n<li>使用<a href=\"https://vuejs.org/\">Vue.js</a>作为javascript框架</li>\n<li><a href=\"https://github.com/apache/dubbo-admin/blob/develop/dubbo-admin-ui/README.md\">dubbo-admin-ui/README.md</a>中有更详细的介绍</li>\n<li>设置 npm <strong>代理镜像</strong> : 如果遇到了网络问题，可以设置npm代理镜像来加速npm install的过程：在~/.npmrc中增加 <code>registry =https://registry.npm.taobao.org</code></li>\n</ul>\n<p>3.2.3 <strong>后端部分</strong></p>\n<ul>\n<li>标准spring boot工程</li>\n<li><a href=\"https://github.com/apache/dubbo-admin/wiki/Dubbo-Admin%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E\">application.properties配置说明</a></li>\n</ul>\n<p>3.2.4 <strong>生产环境配置</strong></p>\n<ol>\n<li><p>下载代码: <code>git clone https://github.com/apache/dubbo-admin.git</code></p>\n</li>\n<li><p>在 <code>dubbo-admin-server/src/main/resources/application.properties</code>中指定注册中心地址</p>\n</li>\n<li><p>构建</p>\n<blockquote>\n<p>mvn clean package -Dmaven.test.skip=true</p>\n</blockquote>\n</li>\n<li><p>启动</p>\n<ul>\n<li><code>mvn --projects dubbo-admin-server spring-boot:run</code>或者</li>\n<li><code>cd dubbo-admin-distribution/target; java -jar dubbo-admin-0.1.jar</code></li>\n</ul>\n</li>\n<li><p>访问 <code>http://localhost:8080</code></p>\n</li>\n</ol>\n<hr>\n<p>3.2.5 <strong>开发环境配置</strong></p>\n<ul>\n<li>运行<code>dubbo admin server, dubbo admin server</code>是一个标准的spring boot项目, 可以在任何java IDE中运行它</li>\n<li>运行<code>dubbo admin ui</code> <code>dubbo admin ui</code>由npm管理和构建，在开发环境中，可以单独运行: <code>npm run dev</code></li>\n<li>页面访问 访问 <code>http://localhost:8081</code>, 由于前后端分开部署，前端支持热加载，任何页面的修改都可以实时反馈，不需要重启应用。</li>\n</ul>\n<p>3.2.6 <strong>Swagger 支持</strong></p>\n<p>部署完成后，可以访问 <a href=\"http://localhost:8080/swagger-ui.html\">http://localhost:8080/swagger-ui.html</a> 来查看所有的restful api</p>\n<h3 id=\"4-dubbo-helloworld\"><a href=\"#4-dubbo-helloworld\" class=\"headerlink\" title=\"4 dubbo-helloworld\"></a>4 dubbo-helloworld</h3><p><strong>4.1 需求</strong></p>\n<p><img src=\"Untitled%208.png\" alt=\"Untitled%208.png\"></p>\n<p><strong>4.2 工程架构</strong> </p>\n<p><img src=\"Untitled%209.png\" alt=\"Untitled%209.png\"></p>\n<p>服务化最佳实践</p>\n<p><a href=\"https://dubbo.apache.org/zh/docs/v2.7/user/best-practice/\">https://dubbo.apache.org/zh/docs/v2.7/user/best-practice/</a></p>\n<p>分包：</p>\n<p>建议将服务接口、服务模型、服务异常等均放在 API 包中，因为服务模型和异常也是 API 的一部分，这样做也符合分包原则：重用发布等价原则(REP)，共同重用原则(CRP)。</p>\n<p>如果需要，也可以考虑在 API 包中放置一份 Spring 的引用配置，这样使用方只需在 Spring 加载过程中引用此配置即可。配置建议放在模块的包目录下，以免冲突，如：<code>com/alibaba/china/xxx/dubbo-reference.xml</code>。</p>\n<p>粒度：</p>\n<p>服务接口尽可能大粒度，每个服务方法应代表一个功能，而不是某功能的一个步骤，否则将面临分布式事务问题，Dubbo 暂未提供分布式事务支持。</p>\n<p>服务接口建议以业务场景为单位划分，并对相近业务做抽象，防止接口数量爆炸。</p>\n<p>不建议使用过于抽象的通用接口，如：<code>Map query(Map)</code>，这样的接口没有明确语义，会给后期维护带来不便。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- <span class=\"number\">1</span>、指定当前服务/应用的名字（同样的服务名字相同，不要和别的服务同名） --&gt;</span><br><span class=\"line\">&lt;dubbo:application name=<span class=\"string\">&quot;user-service-provider&quot;</span>&gt;&lt;/dubbo:application&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- <span class=\"number\">2</span>、指定注册中心的位置 --&gt;</span><br><span class=\"line\">&lt;!-- <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">dubbo:registry</span> <span class=\"attr\">address</span>=<span class=\"string\">&quot;zookeeper://127.0.0.1:2181&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dubbo:registry</span>&gt;</span></span> --&gt;</span><br><span class=\"line\">&lt;dubbo:registry protocol=<span class=\"string\">&quot;zookeeper&quot;</span> address=<span class=\"string\">&quot;127.0.0.1:2181&quot;</span>&gt;&lt;/dubbo:registry&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- <span class=\"number\">3</span>、指定通信规则（通信协议？通信端口） --&gt;</span><br><span class=\"line\">&lt;dubbo:protocol name=<span class=\"string\">&quot;dubbo&quot;</span> port=<span class=\"string\">&quot;20882&quot;</span>&gt;&lt;/dubbo:protocol&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- <span class=\"number\">4</span>、暴露服务   ref：指向服务的真正的实现对象 --&gt;</span><br><span class=\"line\">&lt;dubbo:service interface=<span class=\"string\">&quot;gmall.service.OrderService&quot;</span></span><br><span class=\"line\">\tref=<span class=\"string\">&quot;userServiceImpl01&quot;</span> timeout=<span class=\"string\">&quot;1000&quot;</span> version=<span class=\"string\">&quot;1.0.0&quot;</span>&gt;</span><br><span class=\"line\">\t&lt;dubbo:method name=<span class=\"string\">&quot;getUserAddressList&quot;</span> timeout=<span class=\"string\">&quot;1000&quot;</span>&gt;&lt;/dubbo:method&gt;</span><br><span class=\"line\">&lt;/dubbo:service&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--统一设置服务提供方的规则  --&gt;</span><br><span class=\"line\">&lt;dubbo:provider timeout=<span class=\"string\">&quot;1000&quot;</span>&gt;&lt;/dubbo:provider&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>4.3 创建模块</strong></p>\n<p>1、gmall-interface：公共接口层（model，service，exception…）</p>\n<p>作用：定义公共接口，也可以导入公共依赖</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、Bean模型</span><br><span class=\"line\">package gmall.bean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户地址</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author <span class=\"variable\">lfy</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserAddress</span> <span class=\"title\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Integer id;</span><br><span class=\"line\">    private <span class=\"built_in\">String</span> userAddress; <span class=\"comment\">//用户地址</span></span><br><span class=\"line\">    private <span class=\"built_in\">String</span> userId; <span class=\"comment\">//用户id</span></span><br><span class=\"line\">    private <span class=\"built_in\">String</span> consignee; <span class=\"comment\">//收货人</span></span><br><span class=\"line\">    private <span class=\"built_in\">String</span> phoneNum; <span class=\"comment\">//电话号码</span></span><br><span class=\"line\">    private <span class=\"built_in\">String</span> isDefault; <span class=\"comment\">//是否为默认地址    Y-是     N-否</span></span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"function\"><span class=\"title\">UserAddress</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public UserAddress(Integer id, <span class=\"built_in\">String</span> userAddress, <span class=\"built_in\">String</span> userId, <span class=\"built_in\">String</span> consignee, <span class=\"built_in\">String</span> phoneNum,</span><br><span class=\"line\">                       <span class=\"built_in\">String</span> isDefault) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.userAddress = userAddress;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.userId = userId;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.consignee = consignee;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.phoneNum = phoneNum;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.isDefault = isDefault;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Integer <span class=\"function\"><span class=\"title\">getId</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">setId</span>(<span class=\"params\">Integer id</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"built_in\">String</span> <span class=\"function\"><span class=\"title\">getUserAddress</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userAddress;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">setUserAddress</span>(<span class=\"params\"><span class=\"built_in\">String</span> userAddress</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.userAddress = userAddress;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"built_in\">String</span> <span class=\"function\"><span class=\"title\">getUserId</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">setUserId</span>(<span class=\"params\"><span class=\"built_in\">String</span> userId</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.userId = userId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"built_in\">String</span> <span class=\"function\"><span class=\"title\">getConsignee</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> consignee;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">setConsignee</span>(<span class=\"params\"><span class=\"built_in\">String</span> consignee</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.consignee = consignee;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"built_in\">String</span> <span class=\"function\"><span class=\"title\">getPhoneNum</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> phoneNum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">setPhoneNum</span>(<span class=\"params\"><span class=\"built_in\">String</span> phoneNum</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.phoneNum = phoneNum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"built_in\">String</span> <span class=\"function\"><span class=\"title\">getIsDefault</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isDefault;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">setIsDefault</span>(<span class=\"params\"><span class=\"built_in\">String</span> isDefault</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.isDefault = isDefault;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、OrderService 接口</span><br><span class=\"line\">package gmall.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.bean.UserAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 订单服务</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author <span class=\"variable\">guoyh</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date </span>2021/7/5</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public interface OrderService &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;UserAddress&gt; initOrder(<span class=\"built_in\">String</span> userId);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>、UserService接口</span><br><span class=\"line\">package gmall.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.bean.UserAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户服务</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author <span class=\"variable\">guoyh</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date </span>2021/7/5</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public interface UserService &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 按照用户id返回所有收货地址</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param <span class=\"variable\">userId</span></span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return </span>List&lt;UserAddress&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    public List&lt;UserAddress&gt; getUserAddressList(<span class=\"built_in\">String</span> userId);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、user-service-provider：用户模块（对用户接口的实现）</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、pom.xml</span><br><span class=\"line\">\t&lt;!-- 引入公共接口 --&gt;</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t  &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class=\"line\">\t  &lt;artifactId&gt;gmall-interface&lt;/artifactId&gt;</span><br><span class=\"line\">\t  &lt;version&gt;<span class=\"number\">0.0</span><span class=\"number\">.1</span>-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、UserServiceImpl服务</span><br><span class=\"line\">package com.atguigu.gmall.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.bean.UserAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.service.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、将服务提供者将服务注册到注册中心（暴漏服务）</span></span><br><span class=\"line\"><span class=\"comment\"> * 1) 导入dubbo依赖</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、让服务消费者去注册中心订阅服务的服务地址</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author <span class=\"variable\">guoyh</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date </span>2021/7/5</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"title\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public List&lt;UserAddress&gt; <span class=\"function\"><span class=\"title\">getUserAddressList</span>(<span class=\"params\"><span class=\"built_in\">String</span> userId</span>)</span> &#123;</span><br><span class=\"line\">        UserAddress userAddressOne = <span class=\"keyword\">new</span> UserAddress();</span><br><span class=\"line\">        userAddressOne.setUserAddress(<span class=\"string\">&quot;北京市区昌平&quot;</span>);</span><br><span class=\"line\">        UserAddress userAddressTwo = <span class=\"keyword\">new</span> UserAddress();</span><br><span class=\"line\">        userAddressTwo.setUserAddress(<span class=\"string\">&quot;天安门&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.asList(userAddressOne, userAddressTwo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、user-service-consumer：订单模块（调用用户模块）</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、pom.xml</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t  &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class=\"line\">\t  &lt;artifactId&gt;gmall-interface&lt;/artifactId&gt;</span><br><span class=\"line\">\t  &lt;version&gt;<span class=\"number\">0.0</span><span class=\"number\">.1</span>-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"number\">2</span>、OrderServiceImpl服务</span><br><span class=\"line\">package com.atguigu.gmall.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.bean.UserAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.service.OrderService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.service.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author <span class=\"variable\">guoyh</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date </span>2021/7/5</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">@Service</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderServiceImpl</span> <span class=\"title\">implements</span> <span class=\"title\">OrderService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public List&lt;UserAddress&gt; <span class=\"function\"><span class=\"title\">initOrder</span>(<span class=\"params\"><span class=\"built_in\">String</span> userId</span>)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;用户id:&quot;</span> + userId);</span><br><span class=\"line\">        <span class=\"comment\">// 1、查询用户收获地址</span></span><br><span class=\"line\">        List&lt;UserAddress&gt; userAddressList = userService.getUserAddressList(userId);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (UserAddress address : userAddressList) &#123;</span><br><span class=\"line\">            System.out.println(address.getUserAddress());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userAddressList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在这样是无法进行调用的。我们gmall-order-web引入了gmall-interface，但是interface的实现是gmall-user，我们并没有引入，而且实际他可能还在别的服务器中。</p>\n<p><strong>4.4 使用dubbo改造</strong></p>\n<p>1、改造user-service-provider作为服务提供者</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、pom.xml</span><br><span class=\"line\">\t&lt;!-- 引入dubbo --&gt;</span><br><span class=\"line\">\t&lt;!-- https:<span class=\"comment\">//mvnrepository.com/artifact/com.alibaba/dubbo --&gt;</span></span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">\t  &lt;artifactId&gt;dubbo&lt;/artifactId&gt;</span><br><span class=\"line\">\t  &lt;version&gt;<span class=\"number\">2.6</span><span class=\"number\">.2</span>&lt;/version&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;!-- 注册中心使用的是zookeeper，引入操作zookeeper的客户端端 --&gt;</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t  &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;</span><br><span class=\"line\">\t  &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;</span><br><span class=\"line\">\t  &lt;version&gt;<span class=\"number\">2.12</span><span class=\"number\">.0</span>&lt;/version&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、配置提供者provider.xml</span><br><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;beans xmlns=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"line\">       xmlns:xsi=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"line\">       xmlns:dubbo=<span class=\"string\">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span><br><span class=\"line\">       xsi:schemaLocation=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"line\"><span class=\"string\">\t\thttp://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd</span></span><br><span class=\"line\"><span class=\"string\">\t\thttp://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- <span class=\"number\">1</span>、指定当前服务/应用的名字（同样的服务名字相同，不要和别的服务同名） --&gt;</span><br><span class=\"line\">    &lt;dubbo:application name=<span class=\"string\">&quot;user-service-provider&quot;</span>&gt;&lt;/dubbo:application&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- <span class=\"number\">2</span>、指定注册中心的位置 --&gt;</span><br><span class=\"line\">    &lt;!-- <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">dubbo:registry</span> <span class=\"attr\">address</span>=<span class=\"string\">&quot;zookeeper://127.0.0.1:2181&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dubbo:registry</span>&gt;</span></span> --&gt;</span><br><span class=\"line\">    &lt;dubbo:registry protocol=<span class=\"string\">&quot;zookeeper&quot;</span> address=<span class=\"string\">&quot;127.0.0.1:2181&quot;</span>&gt;&lt;/dubbo:registry&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- <span class=\"number\">3</span>、指定通信规则（通信协议？通信端口） --&gt;</span><br><span class=\"line\">    &lt;dubbo:protocol name=<span class=\"string\">&quot;dubbo&quot;</span> port=<span class=\"string\">&quot;20882&quot;</span>&gt;&lt;/dubbo:protocol&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- <span class=\"number\">4</span>、暴露服务   ref：指向服务的真正的实现对象 --&gt;</span><br><span class=\"line\">    &lt;dubbo:service interface=<span class=\"string\">&quot;gmall.service.UserService&quot;</span></span><br><span class=\"line\">                   ref=<span class=\"string\">&quot;userServiceImpl&quot;</span> timeout=<span class=\"string\">&quot;1000&quot;</span> version=<span class=\"string\">&quot;1.0.0&quot;</span>&gt;</span><br><span class=\"line\">        &lt;!--<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">dubbo:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;getUserAddressList&quot;</span> <span class=\"attr\">timeout</span>=<span class=\"string\">&quot;1000&quot;</span>/&gt;</span></span>--&gt;</span><br><span class=\"line\">    &lt;/dubbo:service&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 服务的真正实现 --&gt;</span><br><span class=\"line\">    &lt;bean id=<span class=\"string\">&quot;userServiceImpl&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;com.atguigu.gmall.service.impl.UserServiceImpl&quot;</span>&gt;&lt;/bean&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>启动服务</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainApplication</span> </span>&#123;</span><br><span class=\"line\">    public <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"built_in\">String</span>[] args) throws Exception &#123;</span><br><span class=\"line\">        ClassPathXmlApplicationContext context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"keyword\">new</span> <span class=\"built_in\">String</span>[]&#123;<span class=\"string\">&quot;provider.xml&quot;</span>&#125;);</span><br><span class=\"line\">        context.start();</span><br><span class=\"line\">        <span class=\"comment\">//为了不让服务终止，在这阻塞读取一个字符</span></span><br><span class=\"line\">        System.in.read(); <span class=\"comment\">// 按任意键退出</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、改造user-service-consumer作为服务消费者</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、pom.xml</span><br><span class=\"line\">\t&lt;!-- 引入dubbo --&gt;</span><br><span class=\"line\">\t&lt;!-- https:<span class=\"comment\">//mvnrepository.com/artifact/com.alibaba/dubbo --&gt;</span></span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">\t  &lt;artifactId&gt;dubbo&lt;/artifactId&gt;</span><br><span class=\"line\">\t  &lt;version&gt;<span class=\"number\">2.6</span><span class=\"number\">.2</span>&lt;/version&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;!-- 注册中心使用的是zookeeper，引入操作zookeeper的客户端端 --&gt;</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t  &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;</span><br><span class=\"line\">\t  &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;</span><br><span class=\"line\">\t  &lt;version&gt;<span class=\"number\">2.12</span><span class=\"number\">.0</span>&lt;/version&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、配置消费者consumer.xml</span><br><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;beans xmlns=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"line\">       xmlns:xsi=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"line\">       xmlns:dubbo=<span class=\"string\">&quot;http://dubbo.apache.org/schema/dubbo&quot;</span></span><br><span class=\"line\">       xmlns:context=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class=\"line\">       xsi:schemaLocation=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"line\"><span class=\"string\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span><br><span class=\"line\"><span class=\"string\">\t\thttp://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd</span></span><br><span class=\"line\"><span class=\"string\">\t\thttp://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 让注解能够生效 --&gt;</span><br><span class=\"line\">    &lt;context:component-scan base-package=<span class=\"string\">&quot;com.atguigu.gmall.service.impl&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- <span class=\"number\">1</span>、指定当前服务/应用的名字（同样的服务名字相同，不要和别的服务同名） --&gt;</span><br><span class=\"line\">    &lt;dubbo:application name=<span class=\"string\">&quot;order-service-consumer&quot;</span>&gt;&lt;/dubbo:application&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- <span class=\"number\">2</span>、指定注册中心的位置 --&gt;</span><br><span class=\"line\">    &lt;dubbo:registry address=<span class=\"string\">&quot;zookeeper://127.0.0.1:2181&quot;</span>&gt;&lt;/dubbo:registry&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&lt;!-- <span class=\"number\">3</span>、生成远程服务代理，可以和本地bean一样使用demoService --&gt;</span><br><span class=\"line\">    &lt;dubbo:reference interface=<span class=\"string\">&quot;gmall.service.UserService&quot;</span></span><br><span class=\"line\">                     id=<span class=\"string\">&quot;userService&quot;</span>&gt;</span><br><span class=\"line\">        &lt;dubbo:method name=<span class=\"string\">&quot;getUserAddressList&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/dubbo:reference&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- <span class=\"number\">6</span>、连接监控中心 --&gt;</span><br><span class=\"line\">    &lt;dubbo:monitor protocol=<span class=\"string\">&quot;registry&quot;</span>&gt;&lt;/dubbo:monitor&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<p>3、调用测试</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.atguigu.gmall.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.bean.UserAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.service.OrderService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.service.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author <span class=\"variable\">guoyh</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date </span>2021/7/5</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">@Service</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderServiceImpl</span> <span class=\"title\">implements</span> <span class=\"title\">OrderService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public List&lt;UserAddress&gt; <span class=\"function\"><span class=\"title\">initOrder</span>(<span class=\"params\"><span class=\"built_in\">String</span> userId</span>)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;用户id:&quot;</span> + userId);</span><br><span class=\"line\">        <span class=\"comment\">// 1、查询用户收获地址</span></span><br><span class=\"line\">        List&lt;UserAddress&gt; userAddressList = userService.getUserAddressList(userId);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (UserAddress address : userAddressList) &#123;</span><br><span class=\"line\">            System.out.println(address.getUserAddress());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userAddressList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4、注解版本</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、服务提供方</span><br><span class=\"line\">&lt;dubbo:application name=<span class=\"string\">&quot;gmall-user&quot;</span>&gt;&lt;/dubbo:application&gt;</span><br><span class=\"line\">  &lt;dubbo:registry address=<span class=\"string\">&quot;zookeeper://118.24.44.169:2181&quot;</span> /&gt;</span><br><span class=\"line\">  &lt;dubbo:protocol name=<span class=\"string\">&quot;dubbo&quot;</span> port=<span class=\"string\">&quot;20880&quot;</span> /&gt;</span><br><span class=\"line\">&lt;dubbo:annotation package=<span class=\"string\">&quot;com.atguigu.gmall.user.impl&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.gmall.bean.UserAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.gmall.service.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.gmall.user.mapper.UserAddressMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">@Service <span class=\"comment\">//使用dubbo提供的service注解，注册暴露服务</span></span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"title\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Autowired</span><br><span class=\"line\">\tUserAddressMapper userAddressMapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、服务消费方</span><br><span class=\"line\">&lt;dubbo:application name=<span class=\"string\">&quot;gmall-order-web&quot;</span>&gt;&lt;/dubbo:application&gt;</span><br><span class=\"line\">&lt;dubbo:registry address=<span class=\"string\">&quot;zookeeper://118.24.44.169:2181&quot;</span> /&gt;</span><br><span class=\"line\">&lt;dubbo:annotation package=<span class=\"string\">&quot;com.atguigu.gmall.order.controller&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.bean.UserAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.service.OrderService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.service.UserService;</span><br><span class=\"line\">@Controller</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderController</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Reference  <span class=\"comment\">//使用dubbo提供的reference注解引用远程服务</span></span><br><span class=\"line\">\tUserService userService;</span><br><span class=\"line\">\t</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">    public List&lt;UserAddress&gt; <span class=\"function\"><span class=\"title\">initOrder</span>(<span class=\"params\"><span class=\"built_in\">String</span> userId</span>)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;用户id:&quot;</span> + userId);</span><br><span class=\"line\">        <span class=\"comment\">// 1、查询用户收获地址</span></span><br><span class=\"line\">        List&lt;UserAddress&gt; userAddressList = userService.getUserAddressList(userId);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userAddressList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、监控中心\"><a href=\"#5、监控中心\" class=\"headerlink\" title=\"5、监控中心\"></a>5、监控中心</h3><p>5.1、dubbo-admin</p>\n<p>图形化的服务管理页面；安装时需要指定注册中心地址，即可从注册中心中获取到所有的提供者/消费者进行配置管理</p>\n<p>5.2、dubbo-monitor-simple</p>\n<p>简单的监控中心；</p>\n<p>1)、安装</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、下载 dubbo-ops</span><br><span class=\"line\">https:<span class=\"comment\">//github.com/apache/incubator-dubbo-ops</span></span><br><span class=\"line\"><span class=\"number\">2</span>、修改配置指定注册中心地址</span><br><span class=\"line\">进入 dubbo-monitor-simple\\src\\main\\resources\\conf</span><br><span class=\"line\">修改 dubbo.properties文件</span><br><span class=\"line\"><span class=\"number\">3</span>、打包dubbo-monitor-simple</span><br><span class=\"line\">mvn clean package -Dmaven.test.skip=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"number\">4</span>、解压 tar.gz 文件，并运行start.bat</span><br><span class=\"line\">如果缺少servlet-api，自行导入servlet-api再访问监控中心</span><br><span class=\"line\"><span class=\"number\">5</span>、启动访问<span class=\"number\">8080</span></span><br></pre></td></tr></table></figure>\n<p>2)、监控中心配置</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所有服务配置连接监控中心，进行监控统计</span><br><span class=\"line\">&lt;!-- 监控中心协议，如果为protocol=<span class=\"string\">&quot;registry&quot;</span>，表示从注册中心发现监控中心地址，否则直连监控中心 --&gt;</span><br><span class=\"line\">&lt;dubbo:monitor protocol=<span class=\"string\">&quot;registry&quot;</span>&gt;&lt;/dubbo:monitor&gt;</span><br></pre></td></tr></table></figure>\n<p>Simple Monitor 挂掉不会影响到 Consumer 和 Provider 之间的调用，所以用于生产环境不会有风险。</p>\n<p>Simple Monitor 采用磁盘存储统计信息，请注意安装机器的磁盘限制，如果要集群，建议用mount共享磁盘。</p>\n<h3 id=\"6、SpringBoot-整合-Dubbo\"><a href=\"#6、SpringBoot-整合-Dubbo\" class=\"headerlink\" title=\"6、SpringBoot 整合 Dubbo\"></a>6、SpringBoot 整合 Dubbo</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- SpringBoot版本 --&gt;</span><br><span class=\"line\">&lt;parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">2.0</span><span class=\"number\">.4</span>.RELEASE&lt;/version&gt;</span><br><span class=\"line\">    &lt;relativePath/&gt; &lt;!-- lookup parent <span class=\"keyword\">from</span> repository --&gt;</span><br><span class=\"line\">&lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- JDK <span class=\"number\">1.8</span>--&gt;</span><br><span class=\"line\">&lt;properties&gt;</span><br><span class=\"line\">    &lt;java.version&gt;<span class=\"number\">1.8</span>&lt;/java.version&gt;</span><br><span class=\"line\">&lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 引入公共接口项目--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;gmall-interface&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">0.0</span><span class=\"number\">.1</span>-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>6.1、引入spring-boot-starter以及dubbo和curator的依赖</p>\n<p>注意starter版本适配：</p>\n<p><img src=\"Untitled%2010.png\" alt=\"Untitled%2010.png\"></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Dubbo Spring Boot Starter --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;<span class=\"number\">0.2</span><span class=\"number\">.0</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>6.2、配置application.properties</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、提供者配置</span><br><span class=\"line\">#dubbo服务名称</span><br><span class=\"line\">dubbo.application.name=boot-order-service-provider</span><br><span class=\"line\">#注册中心地址</span><br><span class=\"line\">dubbo.registry.address=<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">2181</span></span><br><span class=\"line\">#注册中心协议</span><br><span class=\"line\">dubbo.registry.protocol=zookeeper</span><br><span class=\"line\">#通信协议</span><br><span class=\"line\">dubbo.protocol.name=dubbo</span><br><span class=\"line\">dubbo.protocol.prot=<span class=\"number\">20880</span></span><br><span class=\"line\">#监控中心地址:registry从注册中心自动发现</span><br><span class=\"line\">dubbo.monitor.protocol=registry</span><br><span class=\"line\">#application.name就是服务名，不能跟别的dubbo提供端重复</span><br><span class=\"line\">#registry.protocol 是指定注册中心协议</span><br><span class=\"line\">#registry.address 是注册中心的地址加端口号</span><br><span class=\"line\">#protocol.name 是分布式固定是dubbo,不要改。</span><br><span class=\"line\">#base-package  注解方式要扫描的包</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、消费者配置</span><br><span class=\"line\">dubbo.application.name=gmall-order-web</span><br><span class=\"line\">dubbo.registry.protocol=zookeeper</span><br><span class=\"line\">dubbo.registry.address=<span class=\"number\">192.168</span><span class=\"number\">.67</span><span class=\"number\">.159</span>:<span class=\"number\">2181</span></span><br><span class=\"line\">dubbo.scan.base-package=com.atguigu.gmall</span><br><span class=\"line\">dubbo.protocol.name=dubbo</span><br></pre></td></tr></table></figure>\n<p>3、dubbo注解</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#提供者:实现类开放服务</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class=\"line\">@Service</span><br><span class=\"line\"></span><br><span class=\"line\">#消费者:从注册中心自动获取可用的实现服务</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class=\"line\">@Reference</span><br><span class=\"line\"></span><br><span class=\"line\">如果没有在配置中写dubbo.scan.base-package,还需要使用@EnableDubbo注解</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.spring.context.annotation.EnableDubbo;</span><br><span class=\"line\">@EnableDubbo</span><br></pre></td></tr></table></figure>\n<h1 id=\"二、dubbo配置\"><a href=\"#二、dubbo配置\" class=\"headerlink\" title=\"二、dubbo配置\"></a>二、dubbo配置</h1><h2 id=\"1、配置原则\"><a href=\"#1、配置原则\" class=\"headerlink\" title=\"1、配置原则\"></a>1、配置原则</h2><p><img src=\"Untitled%2011.png\" alt=\"Untitled%2011.png\"></p>\n<p>JVM 启动 -D 参数优先，这样可以使用户在部署和启动时进行参数重写，比如在启动时需改变协议的端口。</p>\n<p>XML /applicatoin.properties次之，如果在 XML 中有配置，则 dubbo.properties 中的相应配置项无效。(自己测试结果为dubbo.properties 比XML/application.properties高)</p>\n<p>Properties 最后，相当于缺省值，只有 XML 没有配置时，dubbo.properties 的相应配置项才会生效，通常用于共享公共配置，比如应用名。</p>\n<p><a href=\"https://dubbo.apache.org/zh/docsv2.7/user/examples/preflight-check/\">https://dubbo.apache.org/zh/docsv2.7/user/examples/preflight-check/</a></p>\n<p><strong>启动时检查：</strong></p>\n<p>Dubbo 缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止 Spring 初始化完成，以便上线时，能及早发现问题，默认 <code>check=&quot;true&quot;</code>。</p>\n<p>可以通过 <code>check=&quot;false&quot;</code> 关闭检查，比如，测试时，有些服务不关心，或者出现了循环依赖，必须有一方先启动。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-D</span><br><span class=\"line\">java -Ddubbo.reference.com.foo.BarService.check=<span class=\"literal\">false</span></span><br><span class=\"line\">java -Ddubbo.reference.check=<span class=\"literal\">false</span></span><br><span class=\"line\">java -Ddubbo.consumer.check=<span class=\"literal\">false</span> </span><br><span class=\"line\">java -Ddubbo.registry.check=<span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">XML</span><br><span class=\"line\">&lt;dubbo:reference interface=<span class=\"string\">&quot;com.foo.BarService&quot;</span> check=<span class=\"string\">&quot;false&quot;</span> /&gt;</span><br><span class=\"line\">&lt;dubbo:consumer check=<span class=\"string\">&quot;false&quot;</span> /&gt;</span><br><span class=\"line\">&lt;dubbo:registry check=<span class=\"string\">&quot;false&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">dubbo.properties</span><br><span class=\"line\">dubbo.reference.com.foo.BarService.check=<span class=\"literal\">false</span></span><br><span class=\"line\">dubbo.reference.check=<span class=\"literal\">false</span></span><br><span class=\"line\">dubbo.consumer.check=<span class=\"literal\">false</span></span><br><span class=\"line\">dubbo.registry.check=<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2、重试次数\"><a href=\"#2、重试次数\" class=\"headerlink\" title=\"2、重试次数\"></a>2、重试次数</h2><p>失败自动切换，当出现失败，重试其它服务器，但重试会带来更长延迟。可通过 retries=”2” 来设置重试次数(不含第一次)。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">重试次数配置如下：</span><br><span class=\"line\">&lt;dubbo:service retries=<span class=\"string\">&quot;2&quot;</span> /&gt;</span><br><span class=\"line\">或</span><br><span class=\"line\">&lt;dubbo:reference retries=<span class=\"string\">&quot;2&quot;</span> /&gt;</span><br><span class=\"line\">或</span><br><span class=\"line\">&lt;dubbo:reference&gt;</span><br><span class=\"line\">    &lt;dubbo:method name=<span class=\"string\">&quot;findFoo&quot;</span> retries=<span class=\"string\">&quot;2&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/dubbo:reference&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3、超时时间\"><a href=\"#3、超时时间\" class=\"headerlink\" title=\"3、超时时间\"></a>3、超时时间</h2><p>由于网络或服务端不可靠，会导致调用出现一种不确定的中间状态（超时）。为了避免超时导致客户端资源（线程）挂起耗尽，必须设置超时时间.</p>\n<p>3.1、消费端</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局超时配置</span><br><span class=\"line\">&lt;dubbo:consumer timeout=<span class=\"string\">&quot;5000&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">指定接口以及特定方法超时配置</span><br><span class=\"line\">&lt;dubbo:reference interface=<span class=\"string\">&quot;com.foo.BarService&quot;</span> timeout=<span class=\"string\">&quot;2000&quot;</span>&gt;</span><br><span class=\"line\">    &lt;dubbo:method name=<span class=\"string\">&quot;sayHello&quot;</span> timeout=<span class=\"string\">&quot;3000&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/dubbo:reference&gt;</span><br></pre></td></tr></table></figure>\n<p>3.2、提供方</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局超时配置</span><br><span class=\"line\">&lt;dubbo:provider timeout=<span class=\"string\">&quot;5000&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">指定接口以及特定方法超时配置</span><br><span class=\"line\">&lt;dubbo:provider interface=<span class=\"string\">&quot;com.foo.BarService&quot;</span> timeout=<span class=\"string\">&quot;2000&quot;</span>&gt;</span><br><span class=\"line\">    &lt;dubbo:method name=<span class=\"string\">&quot;sayHello&quot;</span> timeout=<span class=\"string\">&quot;3000&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/dubbo:provider&gt;</span><br></pre></td></tr></table></figure>\n<p>3.3、配置规则</p>\n<p>Dubbo推荐在Provider上尽量多配置Consumer端属性</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、作服务的提供者，比服务使用方更清楚服务性能参数，如调用的超时时间，合理的重试次数，等等</span><br><span class=\"line\"><span class=\"number\">2</span>、在Provider配置后，Consumer不配置则会使用Provider的配置值，即Provider配置可以作为Consumer的缺省值。否则，Consumer会使用Consumer端的全局设置，这对于Provider不可控的，并且往往是不合理的</span><br></pre></td></tr></table></figure>\n<p>配置的覆盖规则：</p>\n<ol>\n<li><p>方法级配置别优于接口级别，即小Scope优先</p>\n</li>\n<li><p>Consumer端配置 优于 Provider配置 优于 全局配置，</p>\n</li>\n</ol>\n<p>3) 最后是缺省值（见配置文档）</p>\n<h2 id=\"4、版本号\"><a href=\"#4、版本号\" class=\"headerlink\" title=\"4、版本号\"></a>4、版本号</h2><p><a href=\"https://dubbo.apache.org/zh/docsv2.7/user/examples/multi-versions/\">https://dubbo.apache.org/zh/docsv2.7/user/examples/multi-versions/</a></p>\n<p>当一个接口实现，出现不兼容升级时，可以用版本号过渡，版本号不同的服务相互间不引用。可以按照以下的步骤进行版本迁移：</p>\n<p>在低压力时间段，先升级一半提供者为新版本</p>\n<p>再将所有消费者升级为新版本</p>\n<p>然后将剩下的一半提供者升级为新版本</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务老版本提供者配置：</span><br><span class=\"line\">&lt;dubbo:service interface=<span class=\"string\">&quot;com.foo.BarService&quot;</span> version=<span class=\"string\">&quot;1.0.0&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">服务新版本提供者配置：</span><br><span class=\"line\">&lt;dubbo:service interface=<span class=\"string\">&quot;com.foo.BarService&quot;</span> version=<span class=\"string\">&quot;2.0.0&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">服务老版本消费者配置：</span><br><span class=\"line\">&lt;dubbo:reference id=<span class=\"string\">&quot;barService&quot;</span> interface=<span class=\"string\">&quot;com.foo.BarService&quot;</span> version=<span class=\"string\">&quot;1.0.0&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">新版本服务消费者配置：</span><br><span class=\"line\">&lt;dubbo:reference id=<span class=\"string\">&quot;barService&quot;</span> interface=<span class=\"string\">&quot;com.foo.BarService&quot;</span> version=<span class=\"string\">&quot;2.0.0&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">如果不需要区分版本，可以按照以下的方式配置：</span><br><span class=\"line\">&lt;dubbo:reference id=<span class=\"string\">&quot;barService&quot;</span> interface=<span class=\"string\">&quot;com.foo.BarService&quot;</span> version=<span class=\"string\">&quot;*&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5、本地存根\"><a href=\"#5、本地存根\" class=\"headerlink\" title=\"5、本地存根\"></a>5、本地存根</h2><p><a href=\"https://dubbo.apache.org/zh/docsv2.7/user/examples/local-stub/\">https://dubbo.apache.org/zh/docsv2.7/user/examples/local-stub/</a></p>\n<p>远程服务后，客户端通常只剩下接口，而实现全在服务器端，但提供方有些时候想在客户端也执行部分逻辑，比如：做 ThreadLocal 缓存，提前验证参数，调用失败后伪造容错数据等等，此时就需要在 API 中带上 Stub，客户端生成 Proxy 实例，会把 Proxy 通过构造函数传给 Stub <a href=\"https://dubbo.apache.org/zh/docsv2.7/user/examples/local-stub/#fn:1\">1</a>，然后把 Stub 暴露给用户，Stub 可以决定要不要去调 Proxy。</p>\n<p><img src=\"stub.jpg\" alt=\"stub.jpg\"></p>\n<p>在消费方，写一个远程接口本地的实现，提供 Stub 的实现 ：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.foo;</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BarServiceStub</span> <span class=\"title\">implements</span> <span class=\"title\">BarService</span> </span>&#123;</span><br><span class=\"line\">    private final BarService barService;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 必须有一个有参构造，并且使构造函数传入真正的远程代理对象</span></span><br><span class=\"line\">    public <span class=\"function\"><span class=\"title\">BarServiceStub</span>(<span class=\"params\">BarService barService</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.barService = barService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    public <span class=\"built_in\">String</span> <span class=\"function\"><span class=\"title\">sayHello</span>(<span class=\"params\"><span class=\"built_in\">String</span> name</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 此代码在客户端执行, 你可以在客户端做ThreadLocal本地缓存，或预先验证参数是否合法，等等</span></span><br><span class=\"line\">        <span class=\"comment\">// ...自己的代码</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 当自己代码执行结束后，再调真正的远程服务</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> barService.sayHello(name);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 你可以容错，可以做任何AOP拦截事项</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;容错数据&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 spring 配置文件中按以下方式配置：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">提供者方配置</span><br><span class=\"line\">&lt;dubbo:service interface=<span class=\"string\">&quot;com.foo.BarService&quot;</span> stub=<span class=\"string\">&quot;true&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">消费者方配置</span><br><span class=\"line\">&lt;dubbo:reference interface=<span class=\"string\">&quot;gmall.service.UserService&quot;</span></span><br><span class=\"line\">  id=<span class=\"string\">&quot;userService&quot;</span> timeout=<span class=\"string\">&quot;5000&quot;</span> retries=<span class=\"string\">&quot;3&quot;</span> version=<span class=\"string\">&quot;*&quot;</span> </span><br><span class=\"line\">\tstub=<span class=\"string\">&quot;com.atguigu.gmall.service.impl.UserServiceStub&quot;</span>&gt;</span><br><span class=\"line\">&lt;dubbo:method name=<span class=\"string\">&quot;getUserAddressList&quot;</span> timeout=<span class=\"string\">&quot;1000&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/dubbo:reference&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<ol>\n<li>Stub 必须有可传入 Proxy 的构造函数。 </li>\n<li>在 interface 旁边放一个 Stub 实现，它实现 BarService 接口，并有一个传入远程 BarService 实例的构造函数 </li>\n</ol>\n<h2 id=\"6、SpringBoot方式配置\"><a href=\"#6、SpringBoot方式配置\" class=\"headerlink\" title=\"6、SpringBoot方式配置\"></a>6、SpringBoot方式配置</h2><h3 id=\"6-1、超时属性\"><a href=\"#6-1、超时属性\" class=\"headerlink\" title=\"6.1、超时属性\"></a>6.1、超时属性</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class=\"line\">@Service(timeout)</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class=\"line\">@Reference(timeout = <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-2、SpringBoot与Dubbo整合的三种方式\"><a href=\"#6-2、SpringBoot与Dubbo整合的三种方式\" class=\"headerlink\" title=\"6.2、SpringBoot与Dubbo整合的三种方式\"></a>6.2、SpringBoot与Dubbo整合的三种方式</h3><p><strong>6.2.1、第一种</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>导入dobuuo-starter</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;<span class=\"number\">0.2</span><span class=\"number\">.0</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>配置application.properties</span><br><span class=\"line\">#dubbo服务名称</span><br><span class=\"line\">dubbo.application.name=boot-order-service-provider</span><br><span class=\"line\">#注册中心地址</span><br><span class=\"line\">dubbo.registry.address=<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">2181</span></span><br><span class=\"line\">#注册中心协议</span><br><span class=\"line\">dubbo.registry.protocol=zookeeper</span><br><span class=\"line\">#通信协议</span><br><span class=\"line\">dubbo.protocol.name=dubbo</span><br><span class=\"line\">dubbo.protocol.prot=<span class=\"number\">20880</span></span><br><span class=\"line\">#监控中心地址:registry从注册中心自动发现</span><br><span class=\"line\">dubbo.monitor.protocol=registry</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>暴漏服务注解@Service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span>使用远程服务@Reference</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5.</span>开启Dubbo注解功能@EnableDubbo</span><br><span class=\"line\"></span><br><span class=\"line\">#老版本会指定包扫描规则</span><br><span class=\"line\">dubbo.scan.base-packages=com</span><br></pre></td></tr></table></figure>\n<p><strong>6.2.2、第二种：保留XML</strong></p>\n<p>想要做到方法级别的配置，保留dubbo的xml配置文件，之后可以在xml中做到method方法级别的配置。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 拷贝xml文件到resource目录,删除application.properties中dubbo的相关配置</span><br><span class=\"line\"># 所有配置都在xml中</span><br><span class=\"line\"><span class=\"number\">1.</span>导入dobuuo-starter</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;<span class=\"number\">0.2</span><span class=\"number\">.0</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>使用@ImportResource导入dubbo的xml配置文件</span><br><span class=\"line\"><span class=\"comment\">//@EnableDubbo</span></span><br><span class=\"line\">@ImportResource(location=<span class=\"string\">&quot;classpath:provider.xml&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>6.2.3、第三种:注解API配置类</strong></p>\n<p>将每一个组件手动创建到容器中</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>创建配置类</span><br><span class=\"line\">package com.atguigu.gmall.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> gmall.service.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDubboConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供者名</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public ApplicationConfig <span class=\"function\"><span class=\"title\">applicationConfig</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        ApplicationConfig applicationConfig = <span class=\"keyword\">new</span> ApplicationConfig();</span><br><span class=\"line\">        applicationConfig.setName(<span class=\"string\">&quot;boot-order-service-provider-config&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> applicationConfig;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注册中心地址</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public RegistryConfig <span class=\"function\"><span class=\"title\">registryConfig</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        RegistryConfig registryConfig = <span class=\"keyword\">new</span> RegistryConfig();</span><br><span class=\"line\">        registryConfig.setProtocol(<span class=\"string\">&quot;zookeeper&quot;</span>);</span><br><span class=\"line\">        registryConfig.setAddress(<span class=\"string\">&quot;127.0.0.1:2181&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> registryConfig;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通信规则</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public ProtocolConfig <span class=\"function\"><span class=\"title\">protocolConfig</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        ProtocolConfig protocolConfig = <span class=\"keyword\">new</span> ProtocolConfig();</span><br><span class=\"line\">        protocolConfig.setName(<span class=\"string\">&quot;dubbo&quot;</span>);</span><br><span class=\"line\">        protocolConfig.setPort(<span class=\"number\">20882</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> protocolConfig;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 配置暴漏服务</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public ServiceConfig&lt;UserService&gt; <span class=\"function\"><span class=\"title\">userServiceConfig</span>(<span class=\"params\">UserService userService</span>)</span> &#123;</span><br><span class=\"line\">        ServiceConfig&lt;UserService&gt; userServiceConfig = <span class=\"keyword\">new</span> ServiceConfig&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//配置接口级别</span></span><br><span class=\"line\">        userServiceConfig.setInterface(UserService.class);</span><br><span class=\"line\">        userServiceConfig.setRef(userService);</span><br><span class=\"line\">        userServiceConfig.setVersion(<span class=\"string\">&quot;1.0.0&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//配置方法级别</span></span><br><span class=\"line\">        MethodConfig methodConfig = <span class=\"keyword\">new</span> MethodConfig();</span><br><span class=\"line\">        methodConfig.setName(<span class=\"string\">&quot;getUserAddressList&quot;</span>);</span><br><span class=\"line\">        methodConfig.setTimeout(<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        userServiceConfig.setMethods(Arrays.asList(methodConfig));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userServiceConfig;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置监控中心</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public MonitorConfig <span class=\"function\"><span class=\"title\">monitorConfig</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        MonitorConfig monitorConfig = <span class=\"keyword\">new</span> MonitorConfig();</span><br><span class=\"line\">        monitorConfig.setProtocol(<span class=\"string\">&quot;registry&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> monitorConfig;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>暴露服务接口</span><br><span class=\"line\">@Service <span class=\"comment\">//暴露服务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>启动dubbo并指定扫描路径</span><br><span class=\"line\">@EnableDubbo(scanBasePackages = <span class=\"string\">&quot;com.atguigu.gmall&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"三、高可用\"><a href=\"#三、高可用\" class=\"headerlink\" title=\"三、高可用\"></a>三、高可用</h1><h2 id=\"3-1、zookeeper宕机与dubbo直连\"><a href=\"#3-1、zookeeper宕机与dubbo直连\" class=\"headerlink\" title=\"3.1、zookeeper宕机与dubbo直连\"></a>3.1、zookeeper宕机与dubbo直连</h2><p><img src=\"Untitled%2012.png\" alt=\"Untitled%2012.png\"></p>\n<p>注册中心的作用就是保存服务提供者位置信息，我们完全可以绕过注册中心使用dubbo直连.</p>\n<p>宕机了有缓存，依旧可以调用。没有注册中心使用直连</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Reference(timeout = <span class=\"number\">0</span>,url = <span class=\"string\">&quot;127.0.0.1:20880&quot;</span>)</span><br><span class=\"line\">UserService userService;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2、集群下dubbo负载均衡机制\"><a href=\"#3-2、集群下dubbo负载均衡机制\" class=\"headerlink\" title=\"3.2、集群下dubbo负载均衡机制\"></a>3.2、集群下dubbo负载均衡机制</h2><p><a href=\"https://dubbo.apache.org/zh/docsv2.7/user/examples/loadbalance/\">https://dubbo.apache.org/zh/docsv2.7/user/examples/loadbalance/</a></p>\n<p>在集群负载均衡时，Dubbo 提供了多种均衡策略，缺省为 random 随机调用,</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**Random LoadBalance**</span><br><span class=\"line\">随机，按权重设置随机概率。</span><br><span class=\"line\">在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。</span><br><span class=\"line\">**RoundRobin LoadBalance**</span><br><span class=\"line\">轮循，按公约后的权重设置轮循比率。</span><br><span class=\"line\">存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。</span><br><span class=\"line\">**LeastActive LoadBalance**</span><br><span class=\"line\">最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。</span><br><span class=\"line\">使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。</span><br><span class=\"line\">**ConsistentHash LoadBalance**</span><br><span class=\"line\">一致性 Hash，相同参数的请求总是发到同一提供者。</span><br><span class=\"line\">当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。算法参见：http:<span class=\"comment\">//en.wikipedia.org/wiki/Consistent_hashing</span></span><br><span class=\"line\">缺省只对第一个参数 Hash，如果要修改，请配置 &lt;dubbo:parameter key=<span class=\"string\">&quot;hash.arguments&quot;</span> value=<span class=\"string\">&quot;0,1&quot;</span> /&gt;</span><br><span class=\"line\">缺省用 <span class=\"number\">160</span> 份虚拟节点，如果要修改，请配置 &lt;dubbo:parameter key=<span class=\"string\">&quot;hash.nodes&quot;</span> value=<span class=\"string\">&quot;320&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-1、Random-LoadBalance\"><a href=\"#3-2-1、Random-LoadBalance\" class=\"headerlink\" title=\"3.2.1、Random LoadBalance\"></a>3.2.1、Random LoadBalance</h3><p><img src=\"Untitled%2013.png\" alt=\"Untitled%2013.png\"></p>\n<h3 id=\"3-2-2、RoundRobin-LoadBalance\"><a href=\"#3-2-2、RoundRobin-LoadBalance\" class=\"headerlink\" title=\"3.2.2、RoundRobin LoadBalance\"></a>3.2.2、RoundRobin LoadBalance</h3><p>第一调完，必须去第二个,根据权重1只能占2次，2占4次，3占1次。</p>\n<p><img src=\"Untitled%2014.png\" alt=\"Untitled%2014.png\"></p>\n<h3 id=\"3-2-3、LeastActive-LoadBalance\"><a href=\"#3-2-3、LeastActive-LoadBalance\" class=\"headerlink\" title=\"3.2.3、LeastActive LoadBalance\"></a>3.2.3、LeastActive LoadBalance</h3><p><img src=\"Untitled%2015.png\" alt=\"Untitled%2015.png\"></p>\n<p>每次都统计上次请求时间</p>\n<p>调哪个前会查那个上次最快</p>\n<h3 id=\"3-2-4、ConsistentHash-LoadBalance\"><a href=\"#3-2-4、ConsistentHash-LoadBalance\" class=\"headerlink\" title=\"3.2.4、ConsistentHash LoadBalance\"></a>3.2.4、ConsistentHash LoadBalance</h3><p>比如getUser,id都等于1的，根据hash分布都会来到1号机器。</p>\n<p><img src=\"Untitled%2016.png\" alt=\"Untitled%2016.png\"></p>\n<h3 id=\"3-2-5、配置\"><a href=\"#3-2-5、配置\" class=\"headerlink\" title=\"3.2.5、配置\"></a>3.2.5、配置</h3><p>默认为随机负载均衡机制</p>\n<p><img src=\"Untitled%2017.png\" alt=\"Untitled%2017.png\"></p>\n<p><img src=\"Untitled%2018.png\" alt=\"Untitled%2018.png\"></p>\n<p>XML：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### **服务端服务级别**</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`&lt;dubbo:service interface=&quot;...&quot; loadbalance=&quot;roundrobin&quot; /&gt;`</span></span><br><span class=\"line\"></span><br><span class=\"line\">### **客户端服务级别**</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`&lt;dubbo:reference interface=&quot;...&quot; loadbalance=&quot;roundrobin&quot; /&gt;`</span></span><br><span class=\"line\"></span><br><span class=\"line\">### **服务端方法级别**</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`&lt;dubbo:service interface=&quot;...&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;dubbo:method name=&quot;...&quot; loadbalance=&quot;roundrobin&quot;/&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/dubbo:service&gt;`</span></span><br><span class=\"line\"></span><br><span class=\"line\">### **客户端方法级别**</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`&lt;dubbo:reference interface=&quot;...&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;dubbo:method name=&quot;...&quot; loadbalance=&quot;roundrobin&quot;/&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/dubbo:reference&gt;`</span></span><br></pre></td></tr></table></figure>\n<p>注解：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Reference(timeout = <span class=\"number\">0</span>,loadbalance = <span class=\"string\">&quot;roundrobin&quot;</span>) </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"Untitled%2019.png\" alt=\"Untitled%2019.png\"></p>\n<h2 id=\"3-3、整合hystrix，服务熔断与降级处理\"><a href=\"#3-3、整合hystrix，服务熔断与降级处理\" class=\"headerlink\" title=\"3.3、整合hystrix，服务熔断与降级处理\"></a>3.3、整合hystrix，服务熔断与降级处理</h2><h3 id=\"3-3-1、服务降级\"><a href=\"#3-3-1、服务降级\" class=\"headerlink\" title=\"3.3.1、服务降级\"></a>3.3.1、服务降级</h3><p>什么是服务降级？</p>\n<p>当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理或换种简单的方式处理，从而释放服务器资源以保证核心交易正常运作或高效运作</p>\n<p>可以通过服务降级功能临时屏蔽某个出错的非关键服务，并定义降级后的返回策略。</p>\n<p>支持2种：</p>\n<ul>\n<li>mock=force:return+null 表示消费方对该服务的方法调用都直接返回 null 值，不发起远程调用。用来屏蔽不重要服务不可用时对调用方的影响。（直接在客户端返回null，不发起远程调用）</li>\n<li>还可以改为 mock=fail:return+null 表示消费方对该服务的方法调用在失败后，再返回 null 值，不抛异常。用来容忍不重要服务不稳定时对调用方的影响。（到达一定超时时间，超时后调用在失败后，再返回 null 值，这个是服务已经调用了）</li>\n</ul>\n<p>通过服务降级手段，牺牲非核心业务的占用的资源，达到让其他核心业务能占用服务器更多资源</p>\n<p><strong>配置，在消费者端</strong></p>\n<p>第一种：屏蔽（不进行远程调用，返回null）</p>\n<p><img src=\"Untitled%2020.png\" alt=\"Untitled%2020.png\"></p>\n<p>第二种：容错（当远程调用失败后，返回null）</p>\n<p><img src=\"Untitled%2021.png\" alt=\"Untitled%2021.png\"></p>\n<h3 id=\"3-3-2、集群容错\"><a href=\"#3-3-2、集群容错\" class=\"headerlink\" title=\"3.3.2、集群容错\"></a>3.3.2、集群容错</h3><p>在集群调用失败时，Dubbo 提供了多种容错方案，缺省为 failover 重试。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>**Failover Cluster**</span><br><span class=\"line\">失败自动切换，当出现失败，重试其它服务器。通常**用于读操作**，但重试会带来更长延迟。</span><br><span class=\"line\">可通过 retries=<span class=\"string\">&quot;2&quot;</span> 来设置重试次数(不含第一次)。</span><br><span class=\"line\"></span><br><span class=\"line\">重试次数配置如下：</span><br><span class=\"line\">&lt;dubbo:service retries=<span class=\"string\">&quot;2&quot;</span> /&gt;</span><br><span class=\"line\">或</span><br><span class=\"line\">&lt;dubbo:reference retries=<span class=\"string\">&quot;2&quot;</span> /&gt;</span><br><span class=\"line\">或</span><br><span class=\"line\">&lt;dubbo:reference&gt;</span><br><span class=\"line\">    &lt;dubbo:method name=<span class=\"string\">&quot;findFoo&quot;</span> retries=<span class=\"string\">&quot;2&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/dubbo:reference&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>**Failfast Cluster**</span><br><span class=\"line\">快速失败，只发起一次调用，失败立即报错。通常用于**非幂等性**的写操作，比如新增记录。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>**Failsafe Cluster**</span><br><span class=\"line\">失败安全，出现异常时，直接**忽略**。通常用于写入审计日志等操作。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span>**Failback Cluster**</span><br><span class=\"line\">**失败自动恢复**，后台记录失败请求，定时重发。通常**用于消息通知**操作。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5.</span>**Forking Cluster**</span><br><span class=\"line\">**并行调用**多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，</span><br><span class=\"line\">但需要浪费更多服务资源。可通过 forks=<span class=\"string\">&quot;2&quot;</span> 来设置最大并行数。太浪费资源。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">6.</span>**Broadcast Cluster**</span><br><span class=\"line\">广播**调用所有提供者，逐个调用，任意一台报错则报错** [<span class=\"number\">2</span>]。</span><br><span class=\"line\">通常**用于通知所有提供者更新缓存**或日志等本地资源信息。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">7.</span>**集群模式配置**</span><br><span class=\"line\">按照以下示例在服务提供方和消费方配置集群模式</span><br><span class=\"line\">&lt;dubbo:service cluster=<span class=\"string\">&quot;failsafe&quot;</span> /&gt;</span><br><span class=\"line\">或</span><br><span class=\"line\">&lt;dubbo:reference cluster=<span class=\"string\">&quot;failsafe&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-3、实际开发整合hystrix提供容错（SpringCloud默认整合的框架）\"><a href=\"#3-3-3、实际开发整合hystrix提供容错（SpringCloud默认整合的框架）\" class=\"headerlink\" title=\"3.3.3、实际开发整合hystrix提供容错（SpringCloud默认整合的框架）\"></a>3.3.3、实际开发整合hystrix提供容错（SpringCloud默认整合的框架）</h3><p>Hystrix 旨在通过控制那些访问远程系统、服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力。Hystrix具备拥有回退机制和断路器功能的线程和信号隔离，请求缓存和请求打包，以及监控和配置等功能。</p>\n<p><strong>1、配置spring-cloud-starter-netflix-hystrix</strong></p>\n<p>spring boot官方提供了对hystrix的集成，直接在消费者、提供者的pom.xml里加入依赖：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;<span class=\"number\">1.4</span><span class=\"number\">.4</span>.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>然后在Application类上增加@EnableHystrix来启用hystrix starter：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@EnableHystrix</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProviderApplication</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2、配置Provider端</strong></p>\n<p>在Dubbo的Provider上增加@HystrixCommand配置，这样子调用就会经过Hystrix代理。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service(version = <span class=\"string\">&quot;1.0.0&quot;</span>)</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServiceImpl</span> <span class=\"title\">implements</span> <span class=\"title\">HelloService</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//使用Hystrix代理，进行处理容错异常</span></span><br><span class=\"line\">    @HystrixCommand(commandProperties = &#123;</span><br><span class=\"line\">     @HystrixProperty(name = <span class=\"string\">&quot;circuitBreaker.requestVolumeThreshold&quot;</span>, value = <span class=\"string\">&quot;10&quot;</span>),</span><br><span class=\"line\">     @HystrixProperty(name = <span class=\"string\">&quot;execution.isolation.thread.timeoutInMilliseconds&quot;</span>, value = <span class=\"string\">&quot;2000&quot;</span>) &#125;)</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public <span class=\"built_in\">String</span> <span class=\"function\"><span class=\"title\">sayHello</span>(<span class=\"params\"><span class=\"built_in\">String</span> name</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// System.out.println(&quot;async provider received: &quot; + name);</span></span><br><span class=\"line\">        <span class=\"comment\">// return &quot;annotation: hello, &quot; + name;</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;Exception to show hystrix enabled.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3、配置Consumer端</strong></p>\n<p>对于Consumer端，则可以增加一层method调用，并在method上配置@HystrixCommand。当调用出错时，会走到fallbackMethod = “reliable”的调用里。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Reference(version = <span class=\"string\">&quot;1.0.0&quot;</span>)</span><br><span class=\"line\">    private HelloService demoService;</span><br><span class=\"line\">\t\t<span class=\"comment\">//fallbackMethod 回调方法,一旦调用失败出错后，调用reliable方法</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//就不用在调用代码中trycatch了</span></span><br><span class=\"line\">    @HystrixCommand(fallbackMethod = <span class=\"string\">&quot;reliable&quot;</span>)</span><br><span class=\"line\">    public <span class=\"built_in\">String</span> <span class=\"function\"><span class=\"title\">doSayHello</span>(<span class=\"params\"><span class=\"built_in\">String</span> name</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> demoService.sayHello(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public <span class=\"built_in\">String</span> <span class=\"function\"><span class=\"title\">reliable</span>(<span class=\"params\"><span class=\"built_in\">String</span> name</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hystrix fallback value&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"四、Dubbo原理\"><a href=\"#四、Dubbo原理\" class=\"headerlink\" title=\"四、Dubbo原理\"></a>四、Dubbo原理</h1><h2 id=\"4-1、RPC原理\"><a href=\"#4-1、RPC原理\" class=\"headerlink\" title=\"4.1、RPC原理\"></a>4.1、RPC原理</h2><p>rpc就是想完成一次远程调用</p>\n<p><img src=\"Untitled%2022.png\" alt=\"Untitled%2022.png\"></p>\n<p>一次完整的RPC调用流程（同步调用，异步另说）如下：</p>\n<p>1）Computer01（client）发起远程调用请求,接下来有一个代理对象client stub</p>\n<p><strong>2）client stub接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体；</strong></p>\n<p><strong>3）client stub找到服务地址，并将消息发送到服务端server stub；</strong></p>\n<p><strong>4）server stub收到消息后进行解码(可能传输的是序列化对象，需要反序列化)；</strong></p>\n<p><strong>5）server stub根据解码结果调用本地的方法服务；</strong></p>\n<p><strong>6）本地方法服务执行完成后，将数据结果返回给server stub；</strong></p>\n<p><strong>7）server stub将返回结果打包(序列化)成消息通过网络发送至消费方client stub；</strong></p>\n<p><strong>8）client stub接收到消息，并进行解码(反序列化)；</strong></p>\n<p>9）服务消费方Computer01得到最终结果。</p>\n<p>RPC框架的目标就是要2~8这些步骤都封装起来，这些细节对用户来说是透明的，不可见的。</p>\n<h2 id=\"4-2、netty通信原理\"><a href=\"#4-2、netty通信原理\" class=\"headerlink\" title=\"4.2、netty通信原理\"></a>4.2、netty通信原理</h2><p>Dubbo底层通信时是使用netty，Netty时基于Java的NIO(Non-Blocking IO)非阻塞,BIO(Blocking IO)阻塞IO。</p>\n<p><strong>BIO：</strong></p>\n<p><img src=\"Untitled%2023.png\" alt=\"Untitled%2023.png\"></p>\n<p>每一个请求进来开一个线程Socket，读取Socket的输入流、进行业务逻辑等等。同时在这操作，并且此时在我们业务逻辑没完成之前，我们线程都不能得到释放的，这样我们的服务器就不能同时处理大量的请求。因为有大量的线程在等待业务逻辑的完成。</p>\n<p><strong>NIO：</strong></p>\n<p><img src=\"Untitled%2024.png\" alt=\"Untitled%2024.png\"></p>\n<p>Channel：通道，通道里还有Buffer，利用Buffer进行数据传输。</p>\n<p>Selector ：一般称 为<strong>选择器</strong> ，也可以翻译为 <strong>多路复用器。</strong></p>\n<p>通道状态：Connect（连接就绪）、Accept（接受就绪）、Read（读就绪）、Write（写就绪）。</p>\n<p><strong>基本原理：</strong></p>\n<p>1个Selector会有很多通道注册了进来，Selector通过监听多个通道，监听会有很多事件，如当Connect了发生什么，Accept了会做什么，Read或Write发生了时要做什么，当发现某一个通道数据准备好了。所以我们通过1个Selector监听多个通道的方式，当某个通道任何一个状态准备好了，我们可以额外开一个线程进行处理。这叫多路复用模型。</p>\n<p><img src=\"Untitled%2025.png\" alt=\"Untitled%2025.png\"></p>\n<p>1.启动</p>\n<p>2.监听某一个端口</p>\n<p>3.初始化一个通道，注册到Selector中</p>\n<p>4.轮询监听通道的accept事件</p>\n<p>5.当accept事件发生后，扔到任务队列，处理通道信息，就与客户端建立连接来生成SocketChannel</p>\n<p>6.然后把刚生成的SocketChannel通道再注册到Selector里面，进行监听read、wirte事件</p>\n<p>7.read、wirte事件准备就绪了就来处理，抛给任务队列。</p>\n<p>注意：有2个Selector，一个是boss来进行监听准备就绪事件，另一个woker是当准备就绪后要做什么工作，把这个工作抛给woker慢慢来做。</p>\n<h2 id=\"4-3、dubbo原理\"><a href=\"#4-3、dubbo原理\" class=\"headerlink\" title=\"4.3、dubbo原理\"></a>4.3、dubbo原理</h2><h3 id=\"4-3-1、dubbo原理-框架设计\"><a href=\"#4-3-1、dubbo原理-框架设计\" class=\"headerlink\" title=\"4.3.1、dubbo原理    -   框架设计\"></a>4.3.1、dubbo原理    -   框架设计</h3><p><img src=\"Untitled%2026.png\" alt=\"Untitled%2026.png\"></p>\n<p><strong>各层说明</strong></p>\n<ul>\n<li><strong>config 配置层</strong>：对外配置接口，以 <code>ServiceConfig</code>, <code>ReferenceConfig</code> 为中心，可以直接初始化配置类，也可以通过 spring 解析<strong>配置生成配置类</strong></li>\n<li><strong>proxy 服务代理层</strong>：服务接口透明代理，<strong>生成服务的客户端 Stub 和服务器端 Skeleton,</strong> 以 <code>ServiceProxy</code> 为中心，扩展接口为 <code>ProxyFactory</code></li>\n<li><strong>registry 注册中心层</strong>：封装服务地址的<strong>注册与发现</strong>，以服务 URL 为中心，扩展接口为 <code>RegistryFactory</code>, <code>Registry</code>, <code>RegistryService</code></li>\n<li><strong>cluster 路由层</strong>：封装多个提供者的路由及<strong>负载均衡</strong>，并桥接注册中心，以 <code>Invoker</code> 为中心，扩展接口为 <code>Cluster</code>, <code>Directory</code>, <code>Router</code>, <code>LoadBalance</code></li>\n<li><strong>monitor 监控层</strong>：RPC <strong>调用次数和调用时间监控</strong>，以 <code>Statistics</code> 为中心，扩展接口为 <code>MonitorFactory</code>, <code>Monitor</code>, <code>MonitorService</code></li>\n<li><strong>protocol 远程调用层</strong>：<strong>封装 RPC 调用</strong>，以 <code>Invocation</code>, <code>Result</code> 为中心，扩展接口为 <code>Protocol</code>, <code>Invoker</code>, <code>Exporter</code></li>\n<li><strong>exchange 信息交换层</strong>：封装请求响应模式，同步转异步，以 <code>Request</code>, <code>Response</code> 为中心，扩展接口为 <code>Exchanger</code>, <code>ExchangeChannel</code>, <code>ExchangeClient</code>, <code>ExchangeServer</code>，创建客户端和服务端，两个架起管道进行数据互联互通。</li>\n<li><strong>transport 网络传输层</strong>：抽象 mina 和 **netty (transport 底层)**为统一接口，以 <code>Message</code> 为中心，扩展接口为 <code>Channel</code>, <code>Transporter</code>, <code>Client</code>, <code>Server</code>, <code>Codec</code></li>\n<li><strong>serialize 数据序列化层</strong>：可复用的一些工具，扩展接口为 <code>Serialization</code>, <code>ObjectInput</code>, <code>ObjectOutput</code>, <code>ThreadPool</code></li>\n</ul>\n<p><strong>说明：</strong>Consumer在左边，Provider在右边。Call为调用逻辑，黑颜色是依赖顺序。</p>\n<h3 id=\"4-3-2、dubbo原理-启动解析、加载配置信息\"><a href=\"#4-3-2、dubbo原理-启动解析、加载配置信息\" class=\"headerlink\" title=\"4.3.2、dubbo原理    -   启动解析、加载配置信息\"></a>4.3.2、dubbo原理    -   启动解析、加载配置信息</h3><p>BeanDefinitionParser定义解析器</p>\n<p>DubboBeanDefinitionParser中的parse方法来解析标签。挨个标签来解析。</p>\n<p>DubboBeanDefinitionParser构造器打断点看怎么创建出来的。</p>\n<p><img src=\"Untitled%2027.png\" alt=\"Untitled%2027.png\"></p>\n<p>init方法注册很多标签解析器。容器启动，解析每一个标签，每一个标签都有对应的***Config.class，保存到指定的对象中,Service标签牵扯到服务暴漏的功能。</p>\n<p><img src=\"Untitled%2028.png\" alt=\"Untitled%2028.png\"></p>\n<h3 id=\"4-3-3、dubbo原理-服务暴露\"><a href=\"#4-3-3、dubbo原理-服务暴露\" class=\"headerlink\" title=\"4.3.3、dubbo原理    -   服务暴露\"></a>4.3.3、dubbo原理    -   服务暴露</h3><p><img src=\"dubbo-%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2.jpg\" alt=\"dubbo-%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2.jpg\"></p>\n<p>Service标签牵扯到服务暴漏的功能，ServiceBean它实现了InitalizingBean（它在创建完对象以后调用afterPropertisSet方法）、ApplicationListener(事件是ContextRefreshedEvent(当IOC容器完成后会回调onApplicationEvent方法))</p>\n<p>afterPropertisSet方法和onApplicationEvent方法都做了什么：</p>\n<p>afterPropertisSet方法保存配置的属性信息。</p>\n<p>onApplicationEvent方法判断当没有爆露时调用export方法暴漏服务，调用doExport方法。调用doExportUrls方法，第一步加载注册信息，再调用doExportUrlsFor1Portocol方法，创建invoker，调用protocol(DubboProtocol).export(wrapperInvoker)</p>\n<p>暴漏URL,OPENServer(url)，启动netty服务器，监听20880端口</p>\n<p>创建服务器createServer(url)</p>\n<p>Exchangers.bind(url,requestHandler)绑定url和处理器</p>\n<p>Transporters.bind(url,new DecodeHandler(new HanderExchangesHandler()))这都是netty的底层，创建一个netty的服务器。</p>\n<p>注册提供者。</p>\n<p>总共2步：</p>\n<p>启动netty服务器，监听20880端口。</p>\n<p>注册中心进行注册服务，把注册好的地址，把注册信息保存在注册中心。</p>\n<p>microkernel plugin模式</p>\n<h3 id=\"4-3-4、dubbo原理-服务引用\"><a href=\"#4-3-4、dubbo原理-服务引用\" class=\"headerlink\" title=\"4.3.4、dubbo原理    -   服务引用\"></a>4.3.4、dubbo原理    -   服务引用</h3><p>如何通过配置reference标签远程引用暴漏的服务。</p>\n<p><img src=\"Untitled%2029.png\" alt=\"Untitled\"></p>\n<p>前置类似暴漏服务原理，对应的是ReferenceBean,特殊在implement FactoryBean，FactoryBean作用是当我们要获取userService，在引用userService的类中需要自动注入userService，需要从spring容器中找，通过调用FactoryBean的getObject方法获取userService对象，getObject调用ReferenceConfig的getT方法，如果ref引用是空的，就init（）初始化对象，ref = createProxy（map）。</p>\n<p><img src=\"Untitled%2030.png\" alt=\"Untitled\"></p>\n<p><img src=\"Untitled%2031.png\" alt=\"Untitled\"></p>\n<p>然后远程引用接口，urls保存了注册中心的地址。</p>\n<p><img src=\"Untitled%2032.png\" alt=\"Untitled\"></p>\n<p>refprotocal还是Protocal，Protocal有2种，1个是DubboProtocal，另一个是RegistryProtocol，这里调用RegistryProtocol的refer方法。</p>\n<p><img src=\"Untitled%2033.png\" alt=\"Untitled\"></p>\n<p>先根据注册中心地址得到注册中心信息。然后调用doRefer,传入了注册中心地址，还有要引用的userService</p>\n<p><img src=\"Untitled%2034.png\" alt=\"Untitled\"></p>\n<p>之后进行订阅服务</p>\n<p><img src=\"Untitled%2035.png\" alt=\"Untitled\"></p>\n<p>订阅服务会进入到DubboProtocol，DubboProtocol会getClients获取客户端。</p>\n<p><img src=\"Untitled%2036.png\" alt=\"Untitled\"></p>\n<p>拿到客户端，初始化客户端</p>\n<p><img src=\"Untitled%2037.png\" alt=\"Untitled\"></p>\n<p>然偶会进行连接</p>\n<p><img src=\"Untitled%2038.png\" alt=\"Untitled\"></p>\n<p>获取返回连接，调用Transporter.connect（），之后就到达了netty的底层。</p>\n<p><img src=\"Untitled%2039.png\" alt=\"Untitled\"></p>\n<p><img src=\"Untitled%2040.png\" alt=\"Untitled\"></p>\n<p><img src=\"Untitled%2041.png\" alt=\"Untitled\"></p>\n<p>相当于创建一个netty客户端，根据url地址监听一个端口。创建完连接后返回DubboProtocol中，创建好invoker，返回invoker。</p>\n<p><img src=\"Untitled%2042.png\" alt=\"Untitled\"></p>\n<p>获取创建好的invoker，里面有url地址，消费者地址。之后在消费者注册表里把刚创建的invoker注册进去。注册进入subscribeUrl订阅地址。记录消费者消费哪个服务。</p>\n<p><img src=\"Untitled%2043.png\" alt=\"Untitled\"></p>\n<p>保存好了后返回到doRefer()</p>\n<p><img src=\"Untitled%2044.png\" alt=\"Untitled\"></p>\n<p>但后一直返回到createProxy。ref代理对象就创建好了，远程信息等都在里面存好了。</p>\n<p>之后使用代理对象来执行远程调用方法。</p>\n<p><img src=\"Untitled%2045.png\" alt=\"Untitled\"></p>\n<h3 id=\"4-3-5、dubbo原理-服务调用\"><a href=\"#4-3-5、dubbo原理-服务调用\" class=\"headerlink\" title=\"4.3.5、dubbo原理    -   服务调用\"></a>4.3.5、dubbo原理    -   服务调用</h3><p>整体流程：</p>\n<p><img src=\"Untitled%2046.png\" alt=\"Untitled\"></p>\n<p>代理对象如何执行方法呢，在这里打个断点。</p>\n<p><img src=\"Untitled%2047.png\" alt=\"Untitled\"></p>\n<p>会调用invoke，并且会传入method和args并封装成一个叫RpcInvocation远程调用的对象。</p>\n<p><img src=\"Untitled%2048.png\" alt=\"Untitled\"></p>\n<p>之后再进一个Invoker，它里面封装了FailOverCluster，他是dubbo带集群容错功能的invoker</p>\n<p><img src=\"Untitled%2049.png\" alt=\"Untitled\"></p>\n<p>进去后查询有多少个可执行版本的方法，再获取负载均衡的机制，之后继续doInvoke</p>\n<p><img src=\"Untitled%2050.png\" alt=\"Untitled\"></p>\n<p>之后有个select能根据我们的负载均衡策略进行负载随机选择1个invoker</p>\n<p><img src=\"Untitled%2051.png\" alt=\"Untitled\"></p>\n<p>接下来调用invoker.invoke执行，到了真正要执行时还封装了一些filter，这个filter在最开始proxy代理对象要用invoker时会在外面封装filter来做（local、mock、cache）</p>\n<p><a href=\"https://dubbo.apache.org/zh/docsv2.7/user/examples/local-mock/\">https://dubbo.apache.org/zh/docsv2.7/user/examples/local-mock/</a></p>\n<p><a href=\"https://dubbo.apache.org/zh/docsv2.7/user/examples/result-cache/\">https://dubbo.apache.org/zh/docsv2.7/user/examples/result-cache/</a></p>\n<p>缓存功能时，然后invoker选中了负载均衡功能后，又进入filter，filter就是各个统计信息（监控中心等）ProtocolFilter，ProtocolFilter里封装到最终时DubboInvoker.</p>\n<p><img src=\"Untitled%2052.png\" alt=\"Untitled\"></p>\n<p><img src=\"Untitled%2053.png\" alt=\"Untitled\"></p>\n<p><img src=\"Untitled%2054.png\" alt=\"Untitled\"></p>\n<p>在DubboInvoker中获取到在服务引用时建立的客户端，拿到引用的哪个远程服务，之后再request发起请求，返回结果。这里request就已经进入到底层了。之后拿客户端，拿通道。</p>\n<p><img src=\"Untitled%2055.png\" alt=\"Untitled\"></p>\n<p><img src=\"Untitled%2056.png\" alt=\"Untitled\"></p>\n<p><img src=\"Untitled%2057.png\" alt=\"Untitled\"></p>\n<p>然后给通道发送出去。</p>\n<p><img src=\"Untitled%2058.png\" alt=\"Untitled\"></p>\n<p>之后返回拿到返回结果对象，里面封装了结果数据</p>\n<p><img src=\"Untitled%2059.png\" alt=\"Untitled\"></p>\n<p>返回返回， 之后打印到控制台。</p>\n<p><img src=\"Untitled%2060.png\" alt=\"Untitled\"></p>\n<h1 id=\"5-结束语\"><a href=\"#5-结束语\" class=\"headerlink\" title=\"5.结束语\"></a>5.结束语</h1><p>祝大家学业有成</p>\n"}],"PostAsset":[{"_id":"source/_posts/learn-typescript/Untitled.png","slug":"Untitled.png","post":"cksbelm9h00025ouc1mk5aopi","modified":0,"renderable":0},{"_id":"source/_posts/ChromeExtensions/Untitled 1.png","slug":"Untitled 1.png","post":"cksbelm9j00035ouc3h945tkq","modified":0,"renderable":0},{"_id":"source/_posts/ChromeExtensions/Untitled 2.png","slug":"Untitled 2.png","post":"cksbelm9j00035ouc3h945tkq","modified":0,"renderable":0},{"_id":"source/_posts/ChromeExtensions/Untitled 3.png","slug":"Untitled 3.png","post":"cksbelm9j00035ouc3h945tkq","modified":0,"renderable":0},{"_id":"source/_posts/ChromeExtensions/Untitled 4.png","slug":"Untitled 4.png","post":"cksbelm9j00035ouc3h945tkq","modified":0,"renderable":0},{"_id":"source/_posts/ChromeExtensions/Untitled.png","slug":"Untitled.png","post":"cksbelm9j00035ouc3h945tkq","modified":0,"renderable":0},{"_id":"source/_posts/Maven学习笔记/logo.jpeg","slug":"logo.jpeg","post":"cksbelm9r000c5ouch6hqdsib","modified":0,"renderable":0},{"_id":"source/_posts/Maven学习笔记/Untitled.png","slug":"Untitled.png","post":"cksbelm9r000c5ouch6hqdsib","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/dubbo-服务暴露.jpg","slug":"dubbo-服务暴露.jpg","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/logo.jpeg","slug":"logo.jpeg","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/stub.jpg","slug":"stub.jpg","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 1.png","slug":"Untitled 1.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 10.png","slug":"Untitled 10.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 11.png","slug":"Untitled 11.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 12.png","slug":"Untitled 12.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 13.png","slug":"Untitled 13.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 14.png","slug":"Untitled 14.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 15.png","slug":"Untitled 15.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 16.png","slug":"Untitled 16.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 17.png","slug":"Untitled 17.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 18.png","slug":"Untitled 18.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 19.png","slug":"Untitled 19.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 2.png","slug":"Untitled 2.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 20.png","slug":"Untitled 20.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 21.png","slug":"Untitled 21.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 22.png","slug":"Untitled 22.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 23.png","slug":"Untitled 23.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 24.png","slug":"Untitled 24.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 25.png","slug":"Untitled 25.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 26.png","slug":"Untitled 26.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 27.png","slug":"Untitled 27.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 28.png","slug":"Untitled 28.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 29.png","slug":"Untitled 29.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 3.png","slug":"Untitled 3.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 30.png","slug":"Untitled 30.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 31.png","slug":"Untitled 31.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 32.png","slug":"Untitled 32.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 33.png","slug":"Untitled 33.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 34.png","slug":"Untitled 34.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 35.png","slug":"Untitled 35.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 36.png","slug":"Untitled 36.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 37.png","slug":"Untitled 37.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 38.png","slug":"Untitled 38.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 39.png","slug":"Untitled 39.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 4.png","slug":"Untitled 4.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 40.png","slug":"Untitled 40.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 41.png","slug":"Untitled 41.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 42.png","slug":"Untitled 42.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 43.png","slug":"Untitled 43.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 44.png","slug":"Untitled 44.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 45.png","slug":"Untitled 45.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 46.png","slug":"Untitled 46.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 47.png","slug":"Untitled 47.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 48.png","slug":"Untitled 48.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 49.png","slug":"Untitled 49.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 5.png","slug":"Untitled 5.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 50.png","slug":"Untitled 50.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 51.png","slug":"Untitled 51.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 52.png","slug":"Untitled 52.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 53.png","slug":"Untitled 53.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 54.png","slug":"Untitled 54.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 55.png","slug":"Untitled 55.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 56.png","slug":"Untitled 56.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 57.png","slug":"Untitled 57.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 58.png","slug":"Untitled 58.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 59.png","slug":"Untitled 59.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 6.png","slug":"Untitled 6.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 60.png","slug":"Untitled 60.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 7.png","slug":"Untitled 7.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 8.png","slug":"Untitled 8.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled 9.png","slug":"Untitled 9.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0},{"_id":"source/_posts/Dubbo学习笔记/Untitled.png","slug":"Untitled.png","post":"cksbelm9t000h5ouc1ywgfso2","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cksbelm9h00025ouc1mk5aopi","category_id":"cksbelm9l00045oucgvsw2e5h","_id":"cksbelm9p00095oucbww369lg"},{"post_id":"cksbelm9j00035ouc3h945tkq","category_id":"cksbelm9o00065ouc0eztd7no","_id":"cksbelm9p000b5oucg2st71ne"},{"post_id":"cksbelm9r000c5ouch6hqdsib","category_id":"cksbelm9s000d5ouc0kdq2l36","_id":"cksbelm9s000g5oucfvh7cabz"},{"post_id":"cksbelm9t000h5ouc1ywgfso2","category_id":"cksbelm9s000d5ouc0kdq2l36","_id":"cksbelm9u000j5oucalbya5qm"}],"PostTag":[{"post_id":"cksbelm9h00025ouc1mk5aopi","tag_id":"cksbelm9n00055ouccr1i5y1c","_id":"cksbelm9p00085ouc4lsseda4"},{"post_id":"cksbelm9j00035ouc3h945tkq","tag_id":"cksbelm9o00075ouc8kq8944e","_id":"cksbelm9p000a5ouceuob8dx9"},{"post_id":"cksbelm9r000c5ouch6hqdsib","tag_id":"cksbelm9s000e5ouc6zn88o44","_id":"cksbelm9s000f5oucclmdd043"},{"post_id":"cksbelm9t000h5ouc1ywgfso2","tag_id":"cksbelm9u000i5oucf4pr4tqi","_id":"cksbelm9u000k5oucf3jg5mab"}],"Tag":[{"name":"TypeScript","_id":"cksbelm9n00055ouccr1i5y1c"},{"name":"浏览器插件","_id":"cksbelm9o00075ouc8kq8944e"},{"name":"Maven","_id":"cksbelm9s000e5ouc6zn88o44"},{"name":"Dubbo","_id":"cksbelm9u000i5oucf4pr4tqi"}]}}